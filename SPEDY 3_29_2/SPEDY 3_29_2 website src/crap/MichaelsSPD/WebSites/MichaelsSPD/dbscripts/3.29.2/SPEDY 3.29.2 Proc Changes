USE [MichaelsSPD]
GO
/****** Object:  StoredProcedure [dbo].[sp_SPD_Batch_PublishMQMessage_ByBatchID]    Script Date: 5/9/2025 5:54:30 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


ALTER PROCEDURE [dbo].[sp_SPD_Batch_PublishMQMessage_ByBatchID]
  @SPD_Batch_ID bigint = 0
AS
  SET NOCOUNT ON

  DECLARE @Message_Body xml
  DECLARE @SPD_Batch_Type_ID int --* 1=Domestic; 2=Import
  DECLARE @Message_ID bigint
  DECLARE @numSendableItemsInBatch int
  DECLARE @NumParentItemsInBatchNeedingaSKU smallint
  DECLARE @SPEDYEnvVars_Environment_Name varchar(50)
  DECLARE @SPEDYEnvVars_Environment_GUID uniqueidentifier
  DECLARE @SPEDYEnvVars_Server_Name nvarchar(2048)
  DECLARE @SPEDYEnvVars_Database_Name nvarchar(2048)
  DECLARE @SPEDYEnvVars_SPD_Root_URL nvarchar(2048)
  DECLARE @SPEDYEnvVars_SPD_Admin_URL nvarchar(2048)
  DECLARE @SPEDYEnvVars_SPD_Vendor_URL nvarchar(2048)
  DECLARE @SPEDYEnvVars_Test_Mode bit
  DECLARE @SPEDYEnvVars_Test_Mode_Email_Address nvarchar(2048)
  DECLARE @SPEDYEnvVars_SPD_Email_FromAddress nvarchar(2048)
  DECLARE @SPEDYEnvVars_SPD_Email_CCAddress varchar(max)
  DECLARE @SPEDYEnvVars_SPD_Email_BCCAddress varchar(max)
  DECLARE @SPEDYEnvVars_SPD_SMTP_Server nvarchar(2048)
  DECLARE @SPEDYEnvVars_SPD_SMTP_Authentication_Required bit
  DECLARE @SPEDYEnvVars_SPD_SMTP_Authentication_User nvarchar(2048)
  DECLARE @SPEDYEnvVars_SPD_SMTP_Authentication_Password nvarchar(2048)
  DECLARE @MichaelsEmailRecipients varchar(max)
  DECLARE @EmailRecipients varchar(max)
  DECLARE @EmailSubject varchar(4000)
  DECLARE @SPEDYBatchGUID varchar(4000)
  DECLARE @EmailBody varchar(max)
  DECLARE @EmailQuery varchar(max)
  DECLARE @DisplayerCost decimal(20, 4)
  DECLARE @DisplayerRetail money
  
  DECLARE @Components varchar(max)
  SET @Components = ''

  SET @numSendableItemsInBatch = 0
  SET @NumParentItemsInBatchNeedingaSKU = 0
 
  SELECT  
       @SPEDYEnvVars_Environment_Name = [Environment_Name]
      ,@SPEDYEnvVars_Environment_GUID = [Environment_GUID]
      ,@SPEDYEnvVars_Server_Name = [Server_Name]
      ,@SPEDYEnvVars_Database_Name = [Database_Name]
      ,@SPEDYEnvVars_SPD_Root_URL = [SPD_Root_URL]
      ,@SPEDYEnvVars_SPD_Admin_URL = [SPD_Admin_URL]
      ,@SPEDYEnvVars_SPD_Vendor_URL = [SPD_Vendor_URL]
      ,@SPEDYEnvVars_Test_Mode = [Test_Mode]
      ,@SPEDYEnvVars_Test_Mode_Email_Address = [Test_Mode_Email_Address]
      ,@SPEDYEnvVars_SPD_Email_FromAddress = [SPD_Email_FromAddress]
      ,@SPEDYEnvVars_SPD_Email_CCAddress = [SPD_Email_CCAddress]
      ,@SPEDYEnvVars_SPD_Email_BCCAddress = [SPD_Email_BCCAddress]
      ,@SPEDYEnvVars_SPD_SMTP_Server = [SPD_SMTP_Server]
      ,@SPEDYEnvVars_SPD_SMTP_Authentication_Required = [SPD_SMTP_Authentication_Required]
      ,@SPEDYEnvVars_SPD_SMTP_Authentication_User = [SPD_SMTP_Authentication_User]
      ,@SPEDYEnvVars_SPD_SMTP_Authentication_Password = [SPD_SMTP_Authentication_Password]
      --SELECT *
  FROM SPD_Environment
  WHERE Server_Name = @@SERVERNAME AND Database_Name = DB_NAME()
  
  -- stage ids
  DECLARE @STAGE_COMPLETED int
  DECLARE @STAGE_WAITINGFORSKU int
  DECLARE @STAGE_DBC int
  -- build stage ids
  select @STAGE_COMPLETED = [id] from SPD_Workflow_Stage where Workflow_id = 1 and Stage_Type_id = 4
  select @STAGE_WAITINGFORSKU = [id] from SPD_Workflow_Stage where Workflow_id = 1 and Stage_Type_id = 3
  select @STAGE_DBC = [id] from SPD_Workflow_Stage where Workflow_id = 1 and Stage_Type_id = 6

  --  ............................................................................................
  --  ............................................................................................
  --
  --  When batches are moved from stage to stage in SPEDY, the user interface 
  --  (specifically item_action.aspx) changes the Is_Valid flag to unknown (-1) to 
  --  force a human to physically click on a batch and make sure it is Valid.
  --  
  --  This procedure is run when a batch reaches stage "Waiting for SKU".
  --
  --  For the "Waiting for SKU" stage, no human actually clicks on batches.  This 
  --  stage is completely automated, sending messages to RMS and awaiting response. 
  --
  --  So, here, we are setting the batch to Valid (1) if it has been marked as 
  --  Unknown (-1) by item_action.aspx.
  --  
      UPDATE SPD_Batch SET Is_Valid = 1 WHERE ID = @SPD_Batch_ID AND Is_Valid = -1
  --  
  --  ............................................................................................
  --  ............................................................................................


  --  Of course, explicitly invalid batches (0) will be sent back to the previous stage...
  IF ( (SELECT Is_Valid FROM SPD_Batch WHERE ID = @SPD_Batch_ID) = 0 )
  BEGIN
    UPDATE SPD_Batch SET 
      Workflow_Stage_ID = @STAGE_DBC,
      Date_Modified = getdate(),
      Modified_User = 0
    WHERE ID = @SPD_Batch_ID
  
    -- Record log of update
    INSERT INTO SPD_Batch_History
    (
      SPD_Batch_ID,
      Workflow_Stage_ID,
      [Action],
      Date_Modified,
      Modified_User,
      Notes
    )
    VALUES
    (
      @SPD_Batch_ID,
      @STAGE_WAITINGFORSKU,
      'Reject',
      getdate(),
      0,
      'This batch is not valid. Sending back to previous stage (DBC/QA)'
    )
  END
  ELSE
  BEGIN
	-- Process valid batch
    SELECT @SPD_Batch_Type_ID = COALESCE(Batch_Type_ID, 0) FROM SPD_Batch WHERE ID = @SPD_Batch_ID
    
    IF (@SPD_Batch_Type_ID = 1)
    BEGIN
      -- Domestic
      SELECT @NumParentItemsInBatchNeedingaSKU = COUNT(*)
      FROM SPD_Batch b
		  INNER JOIN SPD_Item_Headers h ON h.Batch_ID = b.ID
		  INNER JOIN SPD_Items i ON i.Item_Header_ID = h.ID
      WHERE b.ID = @SPD_Batch_ID AND Michaels_SKU IS NULL
      -- FJL Feb 2010 Only Check first 2 chars of Pack_Item_Indicator
        AND COALESCE(RTRIM(REPLACE(LEFT(i.[pack_item_indicator],2), '-', '')), '') IN ('D','DP','SB')

      SELECT @numSendableItemsInBatch = COUNT(item.id)
      FROM SPD_Items item
		  INNER JOIN SPD_Item_Headers header ON header.id = item.item_header_id 
		  INNER JOIN SPD_Batch batch ON header.batch_id = batch.id
		  INNER JOIN SPD_Batch_Types batchtype ON batchtype.ID = batch.batch_type_id
      WHERE batch.ID = @SPD_Batch_ID AND NULLIF(item.[michaels_sku], '') IS NULL
      -- FJL Feb 2010 Only Check first 2 chars of Pack_Item_Indicator
        AND COALESCE(RTRIM(REPLACE(LEFT(item.[pack_item_indicator],2), '-', '')), '') NOT IN ('D','DP','SB')
        
      if (@NumParentItemsInBatchNeedingaSKU > 0 and @numSendableItemsInBatch = 0)
      begin
        select @Components = @Components + 
          (CASE @Components when '' then '' else ';' END) + 
          item.[michaels_sku] + ',' + convert(varchar(20), item.Qty_In_Pack)
        from SPD_Items item
          INNER JOIN SPD_Item_Headers header ON header.id = item.item_header_id 
          INNER JOIN SPD_Batch batch ON header.batch_id = batch.id
          WHERE batch.ID = @SPD_Batch_ID AND NULLIF(item.[michaels_sku], '') IS NOT NULL
	      -- FJL Feb 2010 Only Check first 2 chars of Pack_Item_Indicator
            AND COALESCE(RTRIM(REPLACE(LEFT(item.[pack_item_indicator],2), '-', '')), '') NOT IN ('D','DP','SB')
      end

      SET @Message_Body = (
        SELECT
          CONVERT(xml, (
            SELECT
              'SPEDY' As "Source"
              ,'SPEDYItemDomestic' As "Contents"
              ,((@SPD_Batch_ID % 3) + 1) As "ThreadID"
              ,dbo.udf_s_Convert_SQLDateTime_To_UTCDateTimeString(getdate()) As "PublishTime"
            FOR XML PATH ('mikHeader')
			) )
          , CONVERT(xml, (
            SELECT
              CONVERT(varchar(20), batch.id) + '.' + CONVERT(varchar(20), item.id) + '.' + 
                REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(CONVERT(varchar(100), dbo.udf_s_Convert_SQLDateTime_To_UTCDateTimeString(getdate()) ), '-05:00', ''), '-', ''), ' ', ''), ':', ''), '.', '') As "@id"
              ,'SPEDYItem' + batchtype.Batch_Type_Desc As "@type"
              ,'Create' As "@action"
              ,COALESCE(batch.id, '') As spd_batch_id
              ,COALESCE(LOWER(batchtype.Batch_Type_Desc) , '') As spd_batch_type
              ,COALESCE(dbo.udf_ReplaceSpecialChars(batch.[vendor_name]), '') As vendor_name
              ,COALESCE(batch.[vendor_number], '') As vendor_number
              ,COALESCE(batch.[batch_type_id], '') As spd_batch_type_id
              ,COALESCE(batch.[workflow_stage_id], '') As spd_workflow_stage_id
              ,COALESCE(header.[id] , '') As spd_header_id
              ,COALESCE(header.[log_id], '') As log_id
              ,COALESCE(header.[submitted_by], '') As submitted_by
              ,COALESCE(dbo.udf_s_Convert_SQLDateTime_To_UTCDateTimeString(header.[date_submitted]) , '') As date_submitted
              ,COALESCE(dbo.udf_ReplaceSpecialChars(header.[supply_chain_analyst]), '') As supply_chain_analyst
              ,COALESCE(dbo.udf_ReplaceSpecialChars(header.[mgr_supply_chain]), '') As mgr_supply_chain
              ,COALESCE(header.[dir_scvr], '') As dir_scvr
              ,COALESCE(header.[rebuy_yn], '') As rebuy_yn
              ,COALESCE(header.[replenish_yn], '') As replenish_yn
              ,COALESCE(header.[store_order_yn], '') As store_order_yn
              ,COALESCE(dbo.udf_s_Convert_SQLDateTime_To_UTCDateTimeString(header.[date_in_retek]), '') As date_in_retek
              ,COALESCE(header.[enter_retek], '') As enter_retek
              ,COALESCE(header.[us_vendor_num], '') As us_vendor_num
              ,COALESCE(header.[canadian_vendor_num], '') As canadian_vendor_num
              ,COALESCE(dbo.udf_ReplaceSpecialChars(header.[us_vendor_name]), '') As us_vendor_name
              ,COALESCE(dbo.udf_ReplaceSpecialChars(header.[canadian_vendor_name]), '') As canadian_vendor_name
              ,COALESCE(header.[buyer_approval], '') As buyer_approval
              ,COALESCE(header.[stock_category], '') As stock_category
              ,COALESCE(header.[canada_stock_category], '') As canada_stock_category
              ,COALESCE(header.[item_type], '') As item_type
              ,COALESCE(header.[item_type_attribute], '') As item_type_attribute
              ,COALESCE(header.[allow_store_order], '') As allow_store_order
              ,COALESCE(header.[perpetual_inventory], '') As perpetual_inventory
              ,COALESCE(header.[inventory_control], '') As inventory_control
              ,COALESCE(header.[freight_terms], '') As freight_terms
              ,COALESCE(header.[auto_replenish], '') As auto_replenish
              ,COALESCE(header.[sku_group], '') As sku_group
              ,COALESCE(header.[store_supplier_zone_group], '') As store_supplier_zone_group
              ,COALESCE(header.[whs_supplier_zone_group], '') As whs_supplier_zone_group
              ,COALESCE(dbo.udf_ReplaceSpecialChars(header.[comments]), '') As comments
              ,COALESCE(header.[batch_file_id], '') As batch_file_id
              ,COALESCE(header.[RMS_Orderable], '') As rms_sellable
              ,COALESCE(header.[RMS_Orderable], '') As rms_orderable
              ,COALESCE(header.[RMS_Inventory], '') As rms_inventory
              -- FJL July 2010
              ,COALESCE(header.Discountable,'Y')	As discountable_ind
              ,COALESCE(item.[id],'') As spd_item_id
              ,COALESCE(item.[item_header_id] , '') As item_header_id
              ,COALESCE(item.[add_change], '') As add_change
		      -- FJL Feb 2010 Only SEND first 2 chars of Pack_Item_Indicator per Lopa Mudra Ganguli
              ,COALESCE(RTRIM(REPLACE(LEFT(item.[pack_item_indicator],2), '-', '')), '') As pack_item_indicator
              ,COALESCE(item.[michaels_sku], '') As michaels_sku
              ,COALESCE(item.[vendor_upc], '') As vendor_upc
              -- FJL Replace 8 upc fields with comma delimited list (made by trigger)
              ,Coalesce(item.[UPC_List],'')		As upc
              ,COALESCE(header.[department_num], '') As department
              ,COALESCE(item.[class_num] , '') As class
              ,COALESCE(item.[sub_class_num] , '') As subclass
              ,COALESCE(dbo.udf_ReplaceSpecialChars(item.[vendor_style_num]), '') As vendor_style_num
              ,COALESCE(rtrim(replace(replace(dbo.udf_ReplaceSpecialChars(item.[item_desc]), char(13), ' '), char(10), ' ')), '') As item_desc
              ,COALESCE(item.Stocking_Strategy_Code, '') as stocking_strategy_code
              --,COALESCE(item.[hybrid_type], '') As hybrid_type
              --,COALESCE(item.[hybrid_source_dc], '') As hybrid_source_dc
              --,COALESCE(item.[hybrid_lead_time], '') As hybrid_lead_time
              --,COALESCE(dbo.udf_s_Convert_SQLDateTime_To_UTCDateTimeString(item.[hybrid_conversion_date]), '') As hybrid_conversion_date
              ,COALESCE(item.[eaches_master_case], '') As eaches_master_case
              ,COALESCE(item.[eaches_inner_pack], '') As eaches_inner_pack
              ,COALESCE(item.[pre_priced], '') As pre_priced
              ,COALESCE(item.[pre_priced_uda], '') As pre_priced_uda
              --,COALESCE(item.[us_cost], '') As us_cost
              --,COALESCE(item.[canada_cost], '') As canada_cost
              ,COALESCE(item.[Total_US_Cost], '') As us_cost
              ,COALESCE(item.[Total_Canada_Cost], '') As canada_cost
              
              ,COALESCE(item.[base_retail], '') As base_retail
              ,COALESCE(item.[central_retail], '') As central_retail
              ,COALESCE(item.[test_retail], '') As test_retail
              ,COALESCE(item.[alaska_retail], '') As alaska_retail
              ,COALESCE(item.[canada_retail], '') As canada_retail
              ,COALESCE(item.[zero_nine_retail], '') As zero_nine_retail
              ,COALESCE(item.[california_retail], '') As california_retail
              ,COALESCE(item.[village_craft_retail], '') As village_craft_retail
              ,COALESCE(CONVERT(varchar(20),item.[Retail9]), '') As zone9_retail    --Change Order 14 LP
              ,COALESCE(CONVERT(varchar(20),item.[Retail10]), '') As zone10_retail  --Change Order 14 LP
              ,COALESCE(CONVERT(varchar(20),item.[Retail11]), '') As zone11_retail  --Change Order 14 LP
              ,COALESCE(CONVERT(varchar(20),item.[Retail12]), '') As zone12_retail  --Change Order 14 LP
              ,COALESCE(CONVERT(varchar(20),item.[Retail13]), '') As zone13_retail  --Change Order 14 LP
              ,COALESCE(CONVERT(varchar(20),item.[RDQuebec]), '') As zone14_retail 
              ,COALESCE(CONVERT(varchar(20),item.[RDPuertoRico]), '') As zone15_retail
              ,COALESCE(CONVERT(varchar(20),item.[pog_setup_per_store]), '') As pog_setup_per_store
              ,COALESCE(CONVERT(varchar(20),item.[pog_max_qty]), '') As pog_max_qty
              ,COALESCE(CONVERT(varchar(20),item.[projected_unit_sales]), '') As projected_unit_sales
              ,COALESCE(CONVERT(varchar(20),item.[each_case_height]), '') As each_case_height
              ,COALESCE(CONVERT(varchar(20),item.[each_case_width]), '') As each_case_width
              ,COALESCE(CONVERT(varchar(20),item.[each_case_length]), '') As each_case_length
              ,COALESCE(CONVERT(varchar(20),item.[each_case_weight]), '') As each_case_weight
              ,COALESCE(CONVERT(varchar(20),item.[each_case_pack_cube]), '') As each_case_pack_cube
              ,COALESCE(CONVERT(varchar(20),item.[inner_case_height]), '') As inner_case_height
              ,COALESCE(CONVERT(varchar(20),item.[inner_case_width]), '') As inner_case_width
              ,COALESCE(CONVERT(varchar(20),item.[inner_case_length]), '') As inner_case_length
              ,COALESCE(CONVERT(varchar(20),item.[inner_case_weight]), '') As inner_case_weight
              ,COALESCE(CONVERT(varchar(20),item.[inner_case_pack_cube]), '') As inner_case_pack_cube
              ,COALESCE(CONVERT(varchar(20),item.[master_case_height]), '') As master_case_height
              ,COALESCE(CONVERT(varchar(20),item.[master_case_width]), '') As master_case_width
              ,COALESCE(CONVERT(varchar(20),item.[master_case_length]), '') As master_case_length
              ,COALESCE(CONVERT(varchar(20),item.[master_case_weight]), '') As master_case_weight
              ,COALESCE(CONVERT(varchar(20),item.[master_case_pack_cube]), '') As master_case_pack_cube
              ,COALESCE(dbo.udf_ReplaceSpecialChars(item.[country_of_origin]), '') As country_of_origin
              ,COALESCE(item.[tax_uda], '') As tax_uda
              ,COALESCE(item.[tax_value_uda], '') As tax_value_uda
              ,COALESCE(item.[hazardous], '') As hazardous
              ,COALESCE(item.[hazardous_flammable], '') As hazardous_flammable
              ,COALESCE(item.[hazardous_container_type], '') As hazardous_container_type
              ,COALESCE(CONVERT(varchar(20),item.[hazardous_container_size]), '') As hazardous_container_size
              ,COALESCE(item.[hazardous_msds_uom], '') As hazardous_msds_uom
              ,COALESCE(dbo.udf_ReplaceSpecialChars(item.[hazardous_manufacturer_name]), '') As hazardous_manufacturer_name
              ,COALESCE(dbo.udf_ReplaceSpecialChars(item.[hazardous_manufacturer_city]), '') As hazardous_manufacturer_city
              ,COALESCE(dbo.udf_ReplaceSpecialChars(item.[hazardous_manufacturer_state]), '') As hazardous_manufacturer_state
              ,COALESCE(dbo.udf_ReplaceSpecialChars(item.[hazardous_manufacturer_phone]), '') As hazardous_manufacturer_phone
              ,COALESCE(dbo.udf_ReplaceSpecialChars(item.[hazardous_manufacturer_country]), '') As hazardous_manufacturer_country
              ,COALESCE(item.[MSDS_ID], '') As msds_file_id
              ,COALESCE(item.[Image_ID], '') As product_image_file_id
              ,COALESCE(item.[tax_wizard], '') As tax_wizard
              ,COALESCE(dbo.udf_s_Convert_SQLDateTime_To_UTCDateTimeString(batch.[date_created]), '') As date_created
              ,COALESCE(dbo.udf_s_ResolveSecurityUserID_to_SecurityUserName(batch.[created_user]), 'MQRECV ') As create_user_domainlogin
              ,COALESCE(dbo.udf_s_Convert_SQLDateTime_To_UTCDateTimeString(item.[date_last_modified]), '') As date_last_modified
              ,COALESCE(dbo.udf_s_ResolveSecurityUserID_to_SecurityUserName(item.[update_user_id]), 'MQRECV ') As update_user_domainlogin
              ,case when ltrim(rtrim(isnull(item.[private_brand_label], ''))) != '' then 'Y' else 'N' end as private_brand_uda
              ,COALESCE(item.[private_brand_label], '') as private_brand_value_uda
              ,@Components As components
              ,COALESCE(item.[QuoteReferenceNumber], '') as QuoteReferenceNumber 
              --Multilingual fields...
              ,'en_US-' + CASE WHEN silE.[Package_Language_Indicator] = '' THEN 'N' ELSE COALESCE(silE.[Package_Language_Indicator], 'N') END + ',fr_CA-'+ CASE WHEN silF.[Package_Language_Indicator] = '' THEN 'N' ELSE COALESCE(silF.[Package_Language_Indicator], 'N') END + ',es_PR-'+ CASE WHEN silS.[Package_Language_Indicator] = '' THEN 'N' ELSE COALESCE(silS.[Package_Language_Indicator], 'N') END as pli
              ,'en_US-' + CASE WHEN silE.[Translation_Indicator] = '' THEN 'N' ELSE COALESCE(silE.[Translation_Indicator], 'N') END + ',fr_CA-'+ CASE WHEN silF.[Translation_Indicator] = '' THEN 'N' ELSE COALESCE(silF.[Translation_Indicator], 'N') END + ',es_PR-'+ CASE WHEN silS.[Translation_Indicator] = '' THEN 'N' ELSE COALESCE(silS.[Translation_Indicator], 'N') END as ti			  
              ,case when COALESCE(dbo.udf_ReplaceSpecialChars(silE.[Description_Short]), '') = '' then 'Desc. not available' else COALESCE(dbo.udf_ReplaceSpecialChars(silE.[Description_Short]), 'Desc. not available') end as short_cfd 
              ,case when COALESCE(dbo.udf_ReplaceSpecialChars(silE.[Description_Long]), '') = '' then 'Description not available' else COALESCE(dbo.udf_ReplaceSpecialChars(silE.[Description_Long]), 'Description not available') end as long_cfd
			  ,COALESCE(item.Harmonized_Code_Number, '') as import_hts_code
			  ,COALESCE(item.Canada_Harmonized_Code_Number, '') as canada_hts_code
              ,COALESCE(dbo.udf_ReplaceSpecialChars(item.Customs_Description), '') as short_customs_desc         
			  --PMO200141 GTIN14 Enhancements changes
			  ,'' as vendor_inner_gtin --COALESCE(item.[vendor_inner_gtin], '') As vendor_inner_gtin
			  ,'' as vendor_case_gtin --COALESCE(item.[vendor_case_gtin], '') As vendor_case_gtin
			  ,COALESCE(item.[PhytoSanitaryCertificate], '') As phytosanitarycertificate 
			  ,COALESCE(item.[PhytoTemporaryShipment], '') As phytotemporaryshipment
            FROM SPD_Items item
            INNER JOIN SPD_Item_Headers header ON header.id = item.item_header_id 
            INNER JOIN SPD_Batch batch ON header.batch_id = batch.id
            INNER JOIN SPD_Batch_Types batchtype ON batchtype.ID = batch.batch_type_id
            LEFT JOIN SPD_Item_Languages as silE on silE.Item_ID = item.ID and silE.Language_Type_ID = 1	-- ENGLISH Language Fields
            LEFT JOIN SPD_Item_Languages as silF on silF.Item_ID = item.ID and silF.Language_Type_ID = 2	-- FRENSH Language Fields
            LEFT JOIN SPD_Item_Languages as silS on silS.Item_ID = item.ID and silS.Language_Type_ID = 3	-- SPANISH Language Fields
            WHERE batch.ID = @SPD_Batch_ID AND NULLIF(item.[michaels_sku], '') IS NULL
		      -- FJL Feb 2010 Only check first 2 chars of Pack_Item_Indicator per Lopa Mudra Ganguli
              AND ( 
                ( (@numSendableItemsInBatch > 0) and COALESCE(RTRIM(REPLACE(LEFT(item.[pack_item_indicator],2), '-', '')), '') NOT IN ('D','DP','SB') )
                OR
                ( (@NumParentItemsInBatchNeedingaSKU > 0 and @numSendableItemsInBatch = 0) 
					and COALESCE(RTRIM(REPLACE(LEFT(item.[pack_item_indicator],2), '-', '')), '') IN ('D','DP','SB') )
                )
            ORDER BY batch.id, item.id
            FOR XML PATH ('mikData')
          ))
        FOR XML PATH ('mikMessage')
      )
      
    END

    IF (@SPD_Batch_Type_ID = 2)
    BEGIN
      -- Import
      SELECT @NumParentItemsInBatchNeedingaSKU = COUNT(*)
      FROM SPD_Batch b
      INNER JOIN SPD_Import_Items i ON i.Batch_ID = b.ID
      WHERE b.ID = @SPD_Batch_ID AND MichaelsSKU IS NULL
		-- FJL Feb 2010 Check just left 2 chars of PackItemIndicator
        AND COALESCE(RTRIM(REPLACE(LEFT(i.[packitemindicator],2), '-', '')), '') IN ('D','DP','SB')

      SELECT @numSendableItemsInBatch = COUNT(importitem.id)
      FROM SPD_Import_Items importitem
      INNER JOIN SPD_Batch batch ON importitem.batch_id = batch.id
      INNER JOIN SPD_Batch_Types batchtype ON batchtype.ID = batch.batch_type_id
      WHERE batch.ID = @SPD_Batch_ID AND NULLIF(importitem.[michaelssku], '') IS NULL
		-- FJL Feb 2010 Check just left 2 chars of PackItemIndicator
        AND COALESCE(RTRIM(REPLACE(LEFT(importitem.[packitemindicator],2), '-', '')), '') NOT IN ('D','DP','SB')
        
      if (@NumParentItemsInBatchNeedingaSKU > 0 and @numSendableItemsInBatch = 0)
      begin
        select @Components = @Components + 
          (CASE @Components when '' then '' else ';' END) + 
          importitem.[michaelssku] + ',' + convert(varchar(20), importitem.Qty_In_Pack)
        from SPD_Import_Items importitem
          INNER JOIN SPD_Batch batch ON importitem.batch_id = batch.id
          WHERE batch.ID = @SPD_Batch_ID AND NULLIF(importitem.[michaelssku], '') IS NOT NULL
		-- FJL Feb 2010 Check just left 2 chars of PackItemIndicator
            AND COALESCE(RTRIM(REPLACE(LEFT(importitem.[packitemindicator],2), '-', '')), '') NOT IN ('D','DP','SB')
      end

      SET @Message_Body = (
        SELECT
          CONVERT(xml, (
            SELECT
              'SPEDY' As "Source"
              ,'SPEDYItemImport' As "Contents"
              ,((@SPD_Batch_ID % 3) + 1) As "ThreadID"
              ,dbo.udf_s_Convert_SQLDateTime_To_UTCDateTimeString(getdate()) As "PublishTime"
            FOR XML PATH ('mikHeader')
			))
		  , CONVERT(xml, (
            SELECT
              CONVERT(varchar(20), batch.id) + '.' + CONVERT(varchar(20), importitem.id) + '.' + 
                REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(CONVERT(varchar(100), dbo.udf_s_Convert_SQLDateTime_To_UTCDateTimeString(getdate()) ), '-05:00', ''), '-', ''), ' ', ''), ':', ''), '.', '') As "@id"
              ,'SPEDYItem' + batchtype.Batch_Type_Desc As "@type"
              ,'Create' As "@action"
              ,COALESCE(batch.id , '') As spd_batch_id
              ,COALESCE(LOWER(batchtype.Batch_Type_Desc) , '') As spd_batch_type
              ,COALESCE(dbo.udf_ReplaceSpecialChars(batch.[vendor_name]), '') As vendor_name
              ,COALESCE(batch.[vendor_number], '') As vendor_number
              ,COALESCE(batch.[batch_type_id], '') As batch_type_id
              ,COALESCE(batch.[workflow_stage_id], '') As spd_workflow_stage_id
              ,COALESCE(importitem.[id] , '') As spd_importitem_id
              ,COALESCE(importitem.[itemtask], '') As add_change 
              ,COALESCE(dbo.udf_s_Convert_SQLDateTime_To_UTCDateTimeString(importitem.[datecreated]), '') As date_created
              ,COALESCE(dbo.udf_s_Convert_SQLDateTime_To_UTCDateTimeString(importitem.[datelastmodified]), '') As date_last_modified
              ,COALESCE(dbo.udf_s_ResolveSecurityUserID_to_SecurityUserName(importitem.[createduserid]), 'MQRECV') As create_user_domainlogin
              ,COALESCE(dbo.udf_s_ResolveSecurityUserID_to_SecurityUserName(importitem.[updateuserid]), 'MQRECV') As update_user_domainlogin
              ,COALESCE(dbo.udf_s_Convert_SQLDateTime_To_UTCDateTimeString(importitem.[datesubmitted]), '') As date_submitted
              ,COALESCE(importitem.[vendor], '') As vendor
              ,COALESCE(importitem.[agent], '') As agent
              ,COALESCE(importitem.[agenttype], '') As agenttype
              ,COALESCE(dbo.udf_ReplaceSpecialChars(importitem.[buyer]), '') As buyer
              ,COALESCE(dbo.udf_ReplaceSpecialChars(importitem.[fax]), '') As fax
              ,COALESCE(dbo.udf_ReplaceSpecialChars(importitem.[enteredby]), '') As enteredby
              ,COALESCE(importitem.[quotesheetstatus], '') As quotesheetstatus
              ,COALESCE(importitem.[season], '') As season
              ,COALESCE(importitem.[skugroup], '') As skugroup
              ,COALESCE(dbo.udf_ReplaceSpecialChars(importitem.[email]), '') As email
              ,COALESCE(dbo.udf_s_Convert_SQLDateTime_To_UTCDateTimeString(importitem.[entereddate]), '') As entereddate
              ,COALESCE(importitem.[dept], '') As dept
              ,COALESCE(importitem.[class], '') As class
              ,COALESCE(importitem.[subclass], '') As subclass
              ,COALESCE(importitem.[primaryupc], '') As primaryupc
              ,COALESCE(importitem.[michaelssku], '') As michaelssku
              -- FJL July 2010
              ,Coalesce(importitem.UPC_List,'')		As upc
              ,COALESCE(importitem.[packsku], '') As packsku
              ,COALESCE(dbo.udf_ReplaceSpecialChars(importitem.[planogramname]), '') As planogramname
              ,COALESCE(importitem.[vendornumber], '') As vendornumber
              ,COALESCE(importitem.[vendorrank], '') As vendorrank
              ,COALESCE(importitem.[itemtask], '') As itemtask
              ,COALESCE(rtrim(replace(replace(dbo.udf_ReplaceSpecialChars(importitem.[description]), char(13), ' '), char(10), ' ')), '') As description
              ,COALESCE(dbo.udf_ReplaceSpecialChars(importitem.[paymentterms]), '') As paymentterms
              ,COALESCE(importitem.[days], '') As days
              ,COALESCE(importitem.[vendorminorderamount], '') As vendorminorderamount
              ,COALESCE(dbo.udf_ReplaceSpecialChars(importitem.[vendorname]), '') As vendorname
              ,COALESCE(dbo.udf_ReplaceSpecialChars(importitem.[vendoraddress1]), '') As vendoraddress1
              ,COALESCE(dbo.udf_ReplaceSpecialChars(importitem.[vendoraddress2]), '') As vendoraddress2
              ,COALESCE(dbo.udf_ReplaceSpecialChars(importitem.[vendoraddress3]), '') As vendoraddress3
              ,COALESCE(dbo.udf_ReplaceSpecialChars(importitem.[vendoraddress4]), '') As vendoraddress4
              ,COALESCE(dbo.udf_ReplaceSpecialChars(importitem.[vendorcontactname]), '') As vendorcontactname
              ,COALESCE(dbo.udf_ReplaceSpecialChars(importitem.[vendorcontactphone]), '') As vendorcontactphone
              ,COALESCE(dbo.udf_ReplaceSpecialChars(importitem.[vendorcontactemail]), '') As vendorcontactemail
              ,COALESCE(dbo.udf_ReplaceSpecialChars(importitem.[vendorcontactfax]), '') As vendorcontactfax
              ,COALESCE(dbo.udf_ReplaceSpecialChars(importitem.[manufacturename]), '') As manufacturename
              ,COALESCE(dbo.udf_ReplaceSpecialChars(importitem.[manufactureaddress1]), '') As manufactureaddress1
              ,COALESCE(dbo.udf_ReplaceSpecialChars(importitem.[manufactureaddress2]), '') As manufactureaddress2
              ,COALESCE(dbo.udf_ReplaceSpecialChars(importitem.[manufacturecontact]), '') As manufacturecontact
              ,COALESCE(dbo.udf_ReplaceSpecialChars(importitem.[manufacturephone]), '') As manufacturephone
              ,COALESCE(dbo.udf_ReplaceSpecialChars(importitem.[manufactureemail]), '') As manufactureemail
              ,COALESCE(dbo.udf_ReplaceSpecialChars(importitem.[manufacturefax]), '') As manufacturefax
              ,COALESCE(dbo.udf_ReplaceSpecialChars(importitem.[agentcontact]), '') As agentcontact
              ,COALESCE(dbo.udf_ReplaceSpecialChars(importitem.[agentphone]), '') As agentphone
              ,COALESCE(dbo.udf_ReplaceSpecialChars(importitem.[agentemail]), '') As agentemail
              ,COALESCE(dbo.udf_ReplaceSpecialChars(importitem.[agentfax]), '') As agentfax
              ,COALESCE(dbo.udf_ReplaceSpecialChars(importitem.[vendorstylenumber]), '') As vendorstylenumber
              ,COALESCE(importitem.[harmonizedcodenumber], '') As harmonizedcodenumber
              ,COALESCE(importitem.CanadaHarmonizedCodeNumber, '') as canadaharmonizedcodenumber
              ,COALESCE(dbo.udf_ReplaceSpecialChars(importitem.Customs_Description), '') as shortcustomsdescription
              ,COALESCE(dbo.udf_ReplaceSpecialChars(importitem.[detailinvoicecustomsdesc]), '') As detailinvoicecustomsdesc
              ,COALESCE(dbo.udf_ReplaceSpecialChars(importitem.[componentmaterialbreakdown]), '') As componentmaterialbreakdown
              ,COALESCE(dbo.udf_ReplaceSpecialChars(importitem.[componentconstructionmethod]), '') As componentconstructionmethod
              ,COALESCE(dbo.udf_ReplaceSpecialChars(importitem.[individualitempackaging]), '') As individualitempackaging
              ,COALESCE(importitem.[eachinsidemastercasebox], '') As eachinsidemastercasebox
              ,COALESCE(importitem.[eachinsideinnerpack], '') As eachinsideinnerpack
              --,COALESCE(importitem.[eachpiecenetweightlbsperounce], '') As eachpiecenetweightlbsperounce
              ,COALESCE(importitem.[ReshippableInnerCartonWeight], '') As eachpiecenetweightlbsperounce
              ,COALESCE(convert(varchar(20),importitem.eachlength),'') as eachlength
              ,COALESCE(convert(varchar(20),importitem.eachwidth),'') as eachwidth
              ,COALESCE(convert(varchar(20),importitem.eachheight),'') as eachheight
              ,COALESCE(convert(varchar(20),importitem.eachweight),'') as eachweight
              ,COALESCE(convert(varchar(20),importitem.cubicfeeteach),'') as cubicfeeteach
              ,COALESCE(importitem.[reshippableinnercartonlength], '') As reshippableinnercartonlength
              ,COALESCE(importitem.[reshippableinnercartonwidth], '') As reshippableinnercartonwidth
              ,COALESCE(importitem.[reshippableinnercartonheight], '') As reshippableinnercartonheight
              ,COALESCE(importitem.[ReshippableInnerCartonWeight], '') As reshippableinnercartonweight
              ,COALESCE(importitem.[mastercartondimensionslength], '') As mastercartondimensionslength
              ,COALESCE(importitem.[mastercartondimensionswidth], '') As mastercartondimensionswidth
              ,COALESCE(importitem.[mastercartondimensionsheight], '') As mastercartondimensionsheight
              ,COALESCE(importitem.[cubicfeetpermastercarton], '') As cubicfeetpermastercarton
              ,COALESCE(importitem.[weightmastercarton], '') As weightmastercarton
              ,COALESCE(importitem.[cubicfeetperinnercarton], '') As cubicfeetperinnercarton
              ,COALESCE(importitem.[fobshippingpoint], '') As fobshippingpoint
              ,COALESCE(importitem.[dutypercent], '') As dutypercent
              ,COALESCE(importitem.[dutyamount], '') As dutyamount
              ,COALESCE(dbo.udf_ReplaceSpecialChars(importitem.[additionaldutycomment]), '') As additionaldutycomment
              ,COALESCE(importitem.[additionaldutyamount], '') As additionaldutyamount
              ,COALESCE(importitem.[oceanfreightamount], '') As oceanfreightamount
              ,COALESCE(importitem.[oceanfreightcomputedamount], '') As oceanfreightcomputedamount
              ,COALESCE(importitem.[agentcommissionpercent], '') As agentcommissionpercent
              ,COALESCE(importitem.[agentcommissionamount], '') As agentcommissionamount
              ,COALESCE(importitem.[otherimportcostspercent], '') As otherimportcostspercent
              ,COALESCE(importitem.[otherimportcostsamount], '') As otherimportcostsamount
              ,COALESCE(importitem.[packagingcostamount], '') As packagingcostamount
              ,COALESCE(importitem.[totalimportburden], '') As totalimportburden
              ,COALESCE(importitem.[warehouselandedcost], '') As warehouselandedcost
              ,COALESCE(dbo.udf_ReplaceSpecialChars(importitem.[purchaseorderissuedto]), '') As purchaseorderissuedto
              ,COALESCE(importitem.[shippingpoint], '') As shippingpoint
              ,COALESCE(importitem.[countryoforigin], '') As countryoforigin
              ,COALESCE(dbo.udf_ReplaceSpecialChars(importitem.[vendorcomments]), '') As vendorcomments
              ,COALESCE(importitem.[stockcategory], '') As stockcategory
              ,COALESCE(importitem.[freightterms], '') As freightterms
              ,COALESCE(importitem.[itemtype], '') As itemtype
			-- FJL Feb 2010 SEND just left 2 chars of PackItemIndicator per Lopa Mudra Ganguli
              ,COALESCE(RTRIM(REPLACE(LEFT(importitem.[packitemindicator],2), '-', '')), '') As packitemindicator
              ,COALESCE(importitem.[itemtypeattribute], '') As itemtypeattribute
              ,COALESCE(importitem.[allowstoreorder], '') As allowstoreorder
              -- FJL July 2010 add
              ,Coalesce(importitem.Discountable,'Y')	As discountable_ind
              ,COALESCE(importitem.[inventorycontrol], '') As inventorycontrol
              ,COALESCE(importitem.[autoreplenish], '') As autoreplenish
              ,COALESCE(importitem.[prepriced], '') As prepriced
              ,COALESCE(importitem.[taxuda], '') As taxuda
              ,COALESCE(importitem.[prepriceduda], '') As prepriceduda
              ,COALESCE(importitem.[taxvalueuda], '') As taxvalueuda
              ,COALESCE(importitem.Stocking_Strategy_Code, '') as stocking_strategy_code
              --,COALESCE(importitem.[hybridtype], '') As hybridtype
              --,COALESCE(importitem.[sourcingdc], '') As sourcingdc
              --,COALESCE(importitem.[leadtime], '') As leadtime
              --,COALESCE(dbo.udf_s_Convert_SQLDateTime_To_UTCDateTimeString(importitem.[conversiondate]), '') As conversiondate
              ,COALESCE(importitem.[storesuppzonegrp], '') As storesuppzonegrp
              ,COALESCE(importitem.[whsesuppzonegrp], '') As whsesuppzonegrp
              ,COALESCE(importitem.[pogmaxqty], '') As pogmaxqty
              ,COALESCE(importitem.[pogsetupperstore], '') As pogsetupperstore
              ,COALESCE(importitem.[projsalesperstorepermonth], '') As projsalesperstorepermonth
              ,COALESCE(importitem.[outboundfreight], '') As outboundfreight
              ,COALESCE(importitem.[ninepercentwhsecharge], '') As ninepercentwhsecharge
              ,COALESCE(importitem.[totalstorelandedcost], '') As totalstorelandedcost
              ,COALESCE(importitem.[rdbase], '') As rdbase
              ,COALESCE(importitem.[rdcentral], '') As rdcentral
              ,COALESCE(importitem.[rdtest], '') As rdtest
              ,COALESCE(importitem.[rdalaska], '') As rdalaska
              ,COALESCE(importitem.[rdcanada], '') As rdcanada
              ,COALESCE(importitem.[rd0thru9], '') As rd0thru9
              ,COALESCE(importitem.[rdcalifornia], '') As rdcalifornia
              ,COALESCE(importitem.[rdvillagecraft], '') As rdvillagecraft
              ,COALESCE(CONVERT(varchar(20),importitem.[Retail9]), '') As zone9_retail    --LP Change Order 14
              ,COALESCE(CONVERT(varchar(20),importitem.[Retail10]), '') As zone10_retail  --LP Change Order 14
              ,COALESCE(CONVERT(varchar(20),importitem.[Retail11]), '') As zone11_retail  --LP Change Order 14
              ,COALESCE(CONVERT(varchar(20),importitem.[Retail12]), '') As zone12_retail  --LP Change Order 14
              ,COALESCE(CONVERT(varchar(20),importitem.[Retail13]), '') As zone13_retail  --LP Change Order 14
              ,COALESCE(CONVERT(varchar(20),importitem.[RDQuebec]), '') As zone14_retail 
              ,COALESCE(CONVERT(varchar(20),importitem.[RDPuertoRico]), '') As zone15_retail
              --,COALESCE(importitem.[hazmatyes], '') As hazmatyes
              --,COALESCE(importitem.[hazmatno], '') As hazmatno
              ,CONVERT(varchar(1), (CASE WHEN COALESCE(importitem.[hazmatyes], '') = 'X' THEN 'Y' ELSE 'N' END)) As hazmat
              ,COALESCE(dbo.udf_ReplaceSpecialChars(importitem.[hazmatmfgcountry]), '') As hazmatmfgcountry
              ,COALESCE(dbo.udf_ReplaceSpecialChars(importitem.[hazmatmfgname]), '') As hazmatmfgname
              ,COALESCE(importitem.[hazmatmfgflammable], '') As hazmatmfgflammable
              ,COALESCE(dbo.udf_ReplaceSpecialChars(importitem.[hazmatmfgcity]), '') As hazmatmfgcity
              ,COALESCE(dbo.udf_ReplaceSpecialChars(importitem.[hazmatcontainertype]), '') As hazmatcontainertype
              ,COALESCE(dbo.udf_ReplaceSpecialChars(importitem.[hazmatmfgstate]), '') As hazmatmfgstate
              ,COALESCE(importitem.[hazmatcontainersize], '') As hazmatcontainersize
              ,COALESCE(dbo.udf_ReplaceSpecialChars(importitem.[hazmatmfgphone]), '') As hazmatmfgphone
              ,COALESCE(importitem.[hazmatmsdsuom], '') As hazmatmsdsuom
              ,COALESCE(importitem.[CoinBattery], '') As coinbattery
              ,'' As tssa --COALESCE(importitem.[tssa], '') As tssa
              ,COALESCE(importitem.[csa], '') As csa
              ,COALESCE(importitem.[ul], '') As ul
              ,COALESCE(importitem.[licenceagreement], '') As licenceagreement
              ,COALESCE(importitem.[fumigationcertificate], '') As phytosanitarycertificate  
			  ,COALESCE(importitem.[PhytoTemporaryShipment], '') As phytotemporaryshipment
              ,COALESCE(importitem.[kilndriedcertificate], '') As kilndriedcertificate
              ,COALESCE(importitem.[chinacominspecnumandccibstickers], '') As chinacominspecnumandccibstickers
              ,COALESCE(importitem.[originalvisa], '') As originalvisa
              ,COALESCE(importitem.[textiledeclarationmidcode], '') As textiledeclarationmidcode
              ,COALESCE(importitem.[quotachargestatement], '') As quotachargestatement
              ,COALESCE(importitem.[msds], '') As msds
              ,COALESCE(importitem.[tsca], '') As tsca
              ,COALESCE(importitem.[dropballtestcert], '') As dropballtestcert
              ,COALESCE(importitem.[manmedicaldevicelisting], '') As manmedicaldevicelisting
              ,COALESCE(importitem.[manfdaregistration], '') As manfdaregistration
              ,COALESCE(importitem.[copyrightindemnification], '') As copyrightindemnification
              ,COALESCE(importitem.[fishwildlifecert], '') As fishwildlifecert
              ,COALESCE(importitem.[proposition65labelreq], '') As proposition65labelreq
              ,COALESCE(importitem.[cccr], '') As cccr
              ,COALESCE(importitem.[formaldehydecompliant], '') As formaldehydecompliant
              ,COALESCE(importitem.[is_valid], '') As is_valid
              ,COALESCE(importitem.[RMS_Orderable], '') As rms_sellable
              ,COALESCE(importitem.[RMS_Orderable], '') As rms_orderable
              ,COALESCE(importitem.[RMS_Inventory], '') As rms_inventory
              ,case when ltrim(rtrim(isnull(importitem.[private_brand_label], ''))) != '' then 'Y' else 'N' end as private_brand_uda
              ,COALESCE(importitem.[private_brand_label], '') as private_brand_value_uda
              ,@Components As components
              ,COALESCE(importitem.[QuoteReferenceNumber], '') as QuoteReferenceNumber
              --Multilingual fields...
              ,'en_US-' + CASE WHEN silE.[Package_Language_Indicator] = '' THEN 'N' ELSE COALESCE(silE.[Package_Language_Indicator], 'N') END + ',fr_CA-'+ CASE WHEN silF.[Package_Language_Indicator] = '' THEN 'N' ELSE COALESCE(silF.[Package_Language_Indicator], 'N') END + ',es_PR-'+ CASE WHEN silS.[Package_Language_Indicator] = '' THEN 'N' ELSE COALESCE(silS.[Package_Language_Indicator], 'N') END as pli
              ,'en_US-' + CASE WHEN silE.[Translation_Indicator] = '' THEN 'N' ELSE COALESCE(silE.[Translation_Indicator], 'N') END + ',fr_CA-'+ CASE WHEN silF.[Translation_Indicator] = '' THEN 'N' ELSE COALESCE(silF.[Translation_Indicator], 'N') END + ',es_PR-'+ CASE WHEN silS.[Translation_Indicator] = '' THEN 'N' ELSE COALESCE(silS.[Translation_Indicator], 'N') END as ti			  
			  ,case when COALESCE(dbo.udf_ReplaceSpecialChars(silE.[Description_Short]), '') = '' then 'Desc. not available' else COALESCE(dbo.udf_ReplaceSpecialChars(silE.[Description_Short]), 'Desc. not available') end as short_cfd 
              ,case when COALESCE(dbo.udf_ReplaceSpecialChars(silE.[Description_Long]), '') = '' then 'Description not available' else COALESCE(dbo.udf_ReplaceSpecialChars(silE.[Description_Long]), 'Description not available') end as long_cfd
              --PMO200141 GTIN14 Enhancements changes
			  ,'' as innergtin--COALESCE(importitem.[innergtin], '') As innergtin
			  ,'' as casegtin--COALESCE(importitem.[casegtin], '') As casegtin
			  --,COALESCE(CONVERT(varchar(25),importitem.[MinimumOrderQuantity]), '') As MinimumOrderQuantity
			  ,COALESCE(importitem.[ProductIdentifiesAsCosmetic], '') As ProductIdentifiesAsCosmetic
            FROM SPD_Import_Items importitem
            INNER JOIN SPD_Batch batch ON importitem.batch_id = batch.id
            INNER JOIN SPD_Batch_Types batchtype ON batchtype.ID = batch.batch_type_id
            LEFT JOIN SPD_Import_Item_Languages as silE on silE.Import_Item_ID = importitem.ID and silE.Language_Type_ID = 1	-- ENGLISH Language Fields
            LEFT JOIN SPD_Import_Item_Languages as silF on silF.Import_Item_ID = importitem.ID and silF.Language_Type_ID = 2	-- FRENCH Language Fields
            LEFT JOIN SPD_Import_Item_Languages as silS on silS.Import_Item_ID = importitem.ID and silS.Language_Type_ID = 3	-- SPANISH Language Fields
            WHERE batch.ID = @SPD_Batch_ID AND NULLIF(importitem.[michaelssku], '') IS NULL
              AND (
					-- FJL Feb 2010 Only check first 2 chars of PackItemIndicator
                ( (@numSendableItemsInBatch > 0) and COALESCE(RTRIM(REPLACE(LEFT(importitem.[packitemindicator],2), '-', '')), '') NOT IN ('D','DP','SB') )
                OR
                ( (@NumParentItemsInBatchNeedingaSKU > 0 and @numSendableItemsInBatch = 0) 
					and COALESCE(RTRIM(REPLACE(LEFT(importitem.[packitemindicator],2), '-', '')), '') IN ('D','DP','SB') )
                )
            ORDER BY batch.id, importitem.id
            FOR XML PATH ('mikData')
          ))
        FOR XML PATH ('mikMessage')
      )
    END
  END -- Is Valid?
  

  IF ((@Message_Body IS NOT NULL) AND ( @numSendableItemsInBatch > 0 or (@NumParentItemsInBatchNeedingaSKU > 0 and @numSendableItemsInBatch = 0) ))
  BEGIN
    
    INSERT INTO SPD_MQComm_Message
    (
      [SPD_Batch_ID]
      ,[Message_Type_ID]
      ,[Message_Body]
      ,[Message_Direction]
    )
    VALUES
    (
      @SPD_Batch_ID
      ,1
      ,@Message_Body
      ,1
    )
    
    SET @Message_ID = SCOPE_IDENTITY()

    INSERT INTO SPD_MQComm_Message_Status
    (
      [Message_ID]
      ,[Status_ID]
    )
    VALUES
    (
      @Message_ID
      ,1
    )
  END
  
  PRINT '@numSendableItemsInBatch: ' + CONVERT(varchar(10), @numSendableItemsInBatch)
  PRINT '@NumParentItemsInBatchNeedingaSKU: ' + CONVERT(varchar(10), @NumParentItemsInBatchNeedingaSKU)
 
  -- Did we create a Pack SKU Message request?  If so Mark the Batch as NI Pack Message Sent
  IF ( @NumParentItemsInBatchNeedingaSKU > 0 and @numSendableItemsInBatch = 0 )
  BEGIN
	UPDATE SPD_Batch SET
		NI_PackMsg_Sent	= 1
		,Date_Modified = getdate()
        ,Modified_User = 0
	WHERE ID =  @SPD_Batch_ID

	INSERT INTO SPD_Batch_History (
		SPD_Batch_ID,
		Workflow_Stage_ID,
		[Action],
		Date_Modified,
		Modified_User,
		Notes
	)
	VALUES (
		@SPD_Batch_ID,
		@STAGE_WAITINGFORSKU,
		'System Activity',
		getdate(),
		0,
		'Pack SKU Request Message Sent to RMS.'
	)
		
  END

  IF (@numSendableItemsInBatch = 0 AND @NumParentItemsInBatchNeedingaSKU = 0)
  BEGIN

    IF ( (SELECT Is_Valid FROM SPD_Batch WHERE ID = @SPD_Batch_ID) = 1)
    BEGIN
      UPDATE SPD_Batch SET 
        Workflow_Stage_ID = @STAGE_COMPLETED,
        Is_Valid = 1,
        Date_Modified = getdate(),
        Modified_User = 0
      WHERE ID = @SPD_Batch_ID
    
      -- Record log of update
      INSERT INTO SPD_Batch_History
      (
        SPD_Batch_ID,
        Workflow_Stage_ID,
        [Action],
        Date_Modified,
        Modified_User,
        Notes
      )
      VALUES
      (
        @SPD_Batch_ID,
        @STAGE_WAITINGFORSKU,
        'Approve',
        getdate(),
        0,
        'There are no items to send to RMS.  Marking batch as complete.'
      )
      
      --Update SPD_Batch_History_Stage_Durations table with End Date for "Waiting" stage
      Update SPD_Batch_History_Stage_Durations
      Set End_Date = getDate(), [Hours]=dbo.BDATEDIFF_BUSINESS_HOURS([Start_Date], getDate(), DEFAULT, DEFAULT),
		Approved_User_ID = 0
      Where Batch_ID = @SPD_BATCH_ID And Stage_ID = @STAGE_WAITINGFORSKU and End_Date is null
      
      -- Record log of update
      INSERT INTO SPD_Batch_History
      (
        SPD_Batch_ID,
        Workflow_Stage_ID,
        [Action],
        Date_Modified,
        Modified_User,
        Notes
      )
      VALUES
      (
        @SPD_Batch_ID,
        @STAGE_COMPLETED,
        'Complete',
        getdate(),
        0,
        'Batch Complete.'
      )

      -- Send emails          
      SELECT @MichaelsEmailRecipients = COALESCE(@MichaelsEmailRecipients + '; ', '') + su.Email_Address
      FROM SPD_Batch_History bh
      INNER JOIN Security_User su ON su.ID = bh.modified_user
      WHERE IsNumeric(bh.modified_user) = 1 
        AND NULLIF(LTRIM(RTRIM(su.Email_Address)), '') IS NOT NULL
        AND SPD_Batch_ID = @SPD_Batch_ID
        AND CHARINDEX('michaels.com', LOWER(su.Email_Address)) > 0
      GROUP BY bh.modified_user, su.Email_Address
      
      SELECT @EmailRecipients = COALESCE(@EmailRecipients + '; ', '') + su.Email_Address
      FROM SPD_Batch_History bh
      INNER JOIN Security_User su ON su.ID = bh.modified_user
      WHERE IsNumeric(bh.modified_user) = 1 
        AND NULLIF(LTRIM(RTRIM(su.Email_Address)), '') IS NOT NULL
        AND SPD_Batch_ID = @SPD_Batch_ID
        AND CHARINDEX('michaels.com', LOWER(su.Email_Address)) = 0
      GROUP BY bh.modified_user, su.Email_Address
      
      SELECT @SPEDYBatchGUID = [GUID] FROM SPD_Batch WHERE ID = @SPD_Batch_ID

      IF (@SPEDYEnvVars_Test_Mode = 1) SET @MichaelsEmailRecipients = @SPEDYEnvVars_Test_Mode_Email_Address
      IF (@SPEDYEnvVars_Test_Mode = 1) SET @EmailRecipients = @SPEDYEnvVars_Test_Mode_Email_Address
      

	-- FJL July 2010 - Get more info for the subject line per IS Req F47
		Declare @DeptNo varchar(5), @VendorNo varchar(20), @VendorName varchar(50)
		Select @DeptNo = convert(varchar(5), Fineline_Dept_ID)
			, @VendorNo = convert(varchar(20), Vendor_Number)
			, @VendorName = Vendor_Name
		From SPD_Batch
		Where ID = @SPD_Batch_ID
	  SET @EmailSubject = 'SPEDY Complete. D' + COALESCE(@DeptNo, '') + ' ' + COALESCE(@VendorNo,'') + '-' + COALESCE(@VendorName,'') + '. Log ID#: ' +  convert(varchar(20),@SPD_Batch_ID)
      --SET @EmailSubject = 'SPEDY Batch ' + CONVERT(varchar(20), COALESCE(@SPD_Batch_ID, '')) + ' is Complete.'
      --IF (@SPEDYEnvVars_Test_Mode = 1) SET @EmailSubject = '[' + @SPEDYEnvVars_Environment_Name + '] ' + @EmailSubject
      
      -- *** Michaels Email
      SET @EmailBody = '<font face="Arial" size="2"><p>' + @EmailSubject + '  Congratulations!</p><p>Next Steps:<ul type="square" style="padding-top: 0; margin-top: 0;"><li><a href="' + @SPEDYEnvVars_SPD_Root_URL + '/batchexport.aspx?guid=' + @SPEDYBatchGUID + '">Download the completed batch to Excel</a></li><li><a href="' + @SPEDYEnvVars_SPD_Root_URL + '">Login to SPEDY to review this batch.</a></li></ul></p></font>'
      EXEC sp_SQLSMTPMail
        @vcSender = @SPEDYEnvVars_SPD_Email_FromAddress,
        @vcFrom = @SPEDYEnvVars_SPD_Email_FromAddress,
        @vcTo = @MichaelsEmailRecipients,
        @vcCC = @SPEDYEnvVars_SPD_Email_CCAddress,
        @vcBCC = @SPEDYEnvVars_SPD_Email_BCCAddress,
        @vcSubject = @EmailSubject,
        @vcHTMLBody = @EmailBody,
        @bAutoGenerateTextBody = 1,
        @vcSMTPServer = @SPEDYEnvVars_SPD_SMTP_Server,
        @cDSNOptions = '2',
        @bAuthenticate = @SPEDYEnvVars_SPD_SMTP_Authentication_Required,
        @vcSMTPAuth_UserName = @SPEDYEnvVars_SPD_SMTP_Authentication_User,
        @vcSMTPAuth_UserPassword = @SPEDYEnvVars_SPD_SMTP_Authentication_Password

      IF (@SPEDYEnvVars_Test_Mode = 0)
      BEGIN
        -- *** Vendor Email
        SET @EmailBody = '<font face="Arial" size="2"><p>' + @EmailSubject + '  Congratulations!</p><p>Next Steps:<ul type="square" style="padding-top: 0; margin-top: 0;"><li><a href="' + @SPEDYEnvVars_SPD_Vendor_URL + '/batchexport.aspx?guid=' + @SPEDYBatchGUID + '">Download the completed batch to Excel</a></li><li><a href="' + @SPEDYEnvVars_SPD_Vendor_URL + '">Login to SPEDY to review this batch.</a></li></ul></p></font>'
        EXEC sp_SQLSMTPMail
          @vcSender = @SPEDYEnvVars_SPD_Email_FromAddress,
          @vcFrom = @SPEDYEnvVars_SPD_Email_FromAddress,
          @vcTo = @EmailRecipients,
          @vcCC = @SPEDYEnvVars_SPD_Email_CCAddress,
          @vcBCC = @SPEDYEnvVars_SPD_Email_BCCAddress,
          @vcSubject = @EmailSubject,
          @vcHTMLBody = @EmailBody,
          @bAutoGenerateTextBody = 1,
          @vcSMTPServer = @SPEDYEnvVars_SPD_SMTP_Server,
          @cDSNOptions = '2',
          @bAuthenticate = @SPEDYEnvVars_SPD_SMTP_Authentication_Required,
          @vcSMTPAuth_UserName = @SPEDYEnvVars_SPD_SMTP_Authentication_User,
          @vcSMTPAuth_UserPassword = @SPEDYEnvVars_SPD_SMTP_Authentication_Password
      END

    END

  END


GO


ALTER PROCEDURE [dbo].[sp_SPD_Import_Item_SaveRecord] 
	@ID bigint OUTPUT,
	@Batch_ID bigint,
	@DateSubmitted datetime = null,
	@Vendor varchar(100) = null,
	@Agent varchar(100) = null,
	@AgentType varchar(20) = null,
	@Buyer varchar(100) = null,
	@Fax varchar(100) = null,
	@EnteredBy varchar(100) = null,
	@SKUGroup varchar(100) = null,
	@Email varchar(100) = null,
	@EnteredDate datetime = null,
	@Dept varchar(100) = null,
	@Class varchar(100) = null,
	@SubClass varchar(100) = null,
	@PrimaryUPC varchar(100) = null,
	@MichaelsSKU varchar(100) = null,
	@GenerateMichaelsUPC varchar(1) = null,
	@AdditionalUPC1 varchar(100) = null,
	@AdditionalUPC2 varchar(100) = null,
	@AdditionalUPC3 varchar(100) = null,
	@AdditionalUPC4 varchar(100) = null,
	@AdditionalUPC5 varchar(100) = null,
	@AdditionalUPC6 varchar(100) = null,
	@AdditionalUPC7 varchar(100) = null,
	@AdditionalUPC8 varchar(100) = null,
	--PMO200141 GTIN14 Enhancements changes
	@InnerGTIN varchar(100) = null,
	@CaseGTIN varchar(100) = null,
	@GenerateMichaelsGTIN varchar(1) = null,
	--PMO200141 GTIN14 Enhancements changes end
	@PackSKU varchar(100) = null,
	@PlanogramName varchar(100) = null,
	@VendorNumber varchar(100) = null,
	@VendorRank varchar(100) = null,
	@ItemTask varchar(100) = null,
	@Description varchar(100) = null,
	@Days varchar(20) = null,
	@VendorMinOrderAmount varchar(20) = null,
	@VendorContactName varchar(100) = null,
	@VendorContactPhone varchar(100) = null,
	@VendorContactEmail varchar(100) = null,
	@VendorContactFax varchar(100) = null,
	@ManufactureContact varchar(100) = null,
	@ManufacturePhone varchar(100) = null,
	@ManufactureEmail varchar(100) = null,
	@ManufactureFax varchar(100) = null,
	@AgentContact varchar(100) = null,
	@AgentPhone varchar(100) = null,
	@AgentEmail varchar(100) = null,
	@AgentFax varchar(100) = null,
	@VendorStyleNumber varchar(100) = null,
	@HarmonizedCodeNumber varchar(100) = null,
	@DetailInvoiceCustomsDesc varchar(max) = null,
	@ComponentMaterialBreakdown varchar(max) = null,
	@ComponentConstructionMethod varchar(max) = null,
	@IndividualItemPackaging varchar(100) = null,
	@EachInsideMasterCaseBox varchar(100) = null,
	@EachInsideInnerPack varchar(100) = null,
	--@EachPieceNetWeightLbsPerOunce varchar(100) = null,
	@ReshippableInnerCartonWeight decimal(18,6) = Null,
	@ReshippableInnerCartonLength varchar(100) = null,
	@ReshippableInnerCartonWidth varchar(100) = null,
	@ReshippableInnerCartonHeight varchar(100) = null,
	@MasterCartonDimensionsLength varchar(100) = null,
	@MasterCartonDimensionsWidth varchar(100) = null,
	@MasterCartonDimensionsHeight varchar(100) = null,
	@CubicFeetPerMasterCarton varchar(100) = null,
	@WeightMasterCarton varchar(100) = null,
	@CubicFeetPerInnerCarton varchar(100) = null,
	@FOBShippingPoint varchar(100) = null,
	@DutyPercent varchar(100) = null,
	@DutyAmount varchar(100) = null,
	@AdditionalDutyComment varchar(100) = null,
	@AdditionalDutyAmount varchar(100) = null,
	@OceanFreightAmount varchar(100) = null,
	@OceanFreightComputedAmount varchar(100) = null,
	@AgentCommissionPercent varchar(100) = null,
	@AgentCommissionAmount varchar(100) = null,
	@OtherImportCostsPercent varchar(100) = null,
	@OtherImportCostsAmount varchar(100) = null,
	@PackagingCostAmount varchar(100) = null,
	@TotalImportBurden varchar(100) = null,
	@WarehouseLandedCost varchar(100) = null,
	@PurchaseOrderIssuedTo varchar(max) = null,
	@ShippingPoint varchar(100) = null,
	@CountryOfOrigin varchar(100) = null,
	@CountryOfOriginName varchar(50) = null,
	@VendorComments varchar(max) = null,
	@StockCategory varchar(20) = null,
	@FreightTerms varchar(20) = null,
	@ItemType varchar(20) = null,
	@PackItemIndicator varchar(20) = null,
	@ItemTypeAttribute varchar(20) = null,
	@AllowStoreOrder varchar(20) = null,
	@InventoryControl varchar(20) = null,
	@AutoReplenish varchar(20) = null,
	@PrePriced varchar(20) = null,
	@TaxUDA varchar(20) = null,
	@PrePricedUDA varchar(20) = null,
	@TaxValueUDA varchar(20) = null,
	@HybridType varchar(20) = null,
	@SourcingDC varchar(20) = null,
	@LeadTime varchar(20) = null,
	@ConversionDate datetime = null,
	@StoreSuppZoneGRP varchar(20) = null,
	@WhseSuppZoneGRP varchar(20) = null,
	@POGMaxQty varchar(20) = null,
	@POGSetupPerStore varchar(20) = null,
	@ProjSalesPerStorePerMonth varchar(20) = null,
	@OutboundFreight varchar(20) = null,
	@NinePercentWhseCharge varchar(20) = null,
	@TotalStoreLandedCost varchar(20) = null,
	@RDBase varchar(20) = null,
	@RDCentral varchar(20) = null,
	@RDTest varchar(20) = null,
	@RDAlaska varchar(20) = null,
	@RDCanada varchar(20) = null,
	@RD0Thru9 varchar(20) = null,
	@RDCalifornia varchar(20) = null,
	@RDVillageCraft varchar(20) = null,
	@Retail9 money,
	@Retail10 money,
	@Retail11 money,
	@Retail12 money,
	@Retail13 money,
	@RDQuebec money = null,
	@RDPuertoRico money = null,
	@HazMatYes varchar(1) = null,
	@HazMatNo varchar(1) = null,
	@HazMatMFGCountry varchar(40) = null,
	@HazMatMFGName varchar(40) = null,
	@HazMatMFGFlammable varchar(40) = null,
	@HazMatMFGCity varchar(40) = null,
	@HazMatContainerType varchar(40) = null,
	@HazMatMFGState varchar(40) = null,
	@HazMatContainerSize varchar(40) = null,
	@HazMatMFGPhone varchar(40) = null,
	@HazMatMSDSUOM varchar(40) = null,
	@CoinBattery varchar(1) = null,
	@TSSA varchar(1) = null,
	@CSA varchar(1) = null,
	@UL varchar(1) = null,
	@LicenceAgreement varchar(1) = null,
	@FumigationCertificate varchar(1) = null,
	@PhytoTemporaryShipment varchar(1) = null,
	@KILNDriedCertificate varchar(1) = null,
	@ChinaComInspecNumAndCCIBStickers varchar(1) = null,
	@OriginalVisa varchar(1) = null,
	@TextileDeclarationMidCode varchar(1) = null,
	@QuotaChargeStatement varchar(1) = null,
	@MSDS varchar(1) = null,
	@TSCA varchar(1) = null,
	@DropBallTestCert varchar(1) = null,
	@ManMedicalDeviceListing varchar(1) = null,
	@ManFDARegistration varchar(1) = null,
	@CopyRightIndemnification varchar(1) = null,
	@FishWildLifeCert varchar(1) = null,
	@Proposition65LabelReq varchar(1) = null,
	@CCCR varchar(1) = null,
	@FormaldehydeCompliant varchar(1) = null,
	@QuoteSheetStatus varchar(20) = null,
	@Season varchar(20) = null,
	@PaymentTerms varchar(20) = null,
	@VendorName varchar(100) = null,
	@VendorAddress1 varchar(100) = null,
	@VendorAddress2 varchar(100) = null,
	@VendorAddress3 varchar(100) = null,
	@VendorAddress4 varchar(100) = null,
	@ManufactureName varchar(100) = null,
	@ManufactureAddress1 varchar(100) = null,
	@ManufactureAddress2 varchar(100) = null,
	@UserID int,
	@Batch_Action varchar(50) = null,
	@Batch_Notes varchar(max) = null,
	@RMS_Sellable varchar(1) = null,
	@RMS_Orderable varchar(1) = null,
	@RMS_Inventory varchar(1) = null,
	@Parent_ID bigint = 0,
	@RegularBatchItem bit = 0,
	@Displayer_Cost decimal(18,6) = null,
	@Product_Cost decimal(18,6) = null,
	@Store_Total int = null,
	@POG_Start_Date datetime = null,
	@POG_Comp_Date datetime = null,
	@Calculate_Options int = 0,
	@Like_Item_SKU varchar(20) = null,
	@Like_Item_Description varchar(255) = null,
	@Like_Item_Retail money = null,
	@Annual_Regular_Unit_Forecast decimal(18,6) = null,
	@Like_Item_Store_Count decimal(18,6) = null,
	@Like_Item_Regular_Unit decimal(18,6) = null,
	@Like_Item_Unit_Store_Month decimal(18,6) = null,
	@Annual_Reg_Retail_Sales decimal(18,6) = null,
	@Facings decimal(18,6) = null,
	@Min_Pres_Per_Facing decimal(18,6) = null,
	@Inner_Pack decimal(18,6) = null,
	@POG_Min_Qty decimal(18,3) = null,
	@Private_Brand_Label varchar(20) = null,
	@Discountable varchar(1) = null,
	@Qty_In_Pack int = null, 
	@Valid_Existing_SKU bit = null,
	@Item_Status varchar(10) = null,
	@SkipInvalidatingPackChildren bit = 0, 
	@QuoteReferenceNumber varchar(20) = null,
	@CustomsDescription varchar(255) = null, 
	@IsDirty bit = 1,
	@Stocking_Strategy_Code nvarchar(5) = Null,
	@eachheight decimal(18,6) = Null,
	@eachwidth decimal(18,6) = Null,
	@eachlength decimal(18,6) = Null,
	@eachweight decimal(18,6) = Null,
	@cubicfeeteach decimal(18,6) = Null,
	@CanadaHarmonizedCodeNumber varchar(10) = Null,
	@SuppTariffPercent varchar(100) = null,
	@SuppTariffAmount varchar(100) = null,
	@MinimumOrderQuantity int = null, 
	@ProductIdentifiesAsCosmetic varchar(1) = null
	
AS
	SET NOCOUNT ON

	DECLARE @CurrentDate datetime,
			@BatchImportItemType smallint

    SET @CurrentDate = getdate()
	SET @BatchImportItemType = 2

  DECLARE @Vendor_Num int,
					@Vendor_Name varchar(50),
					@Department_ID int

  SET @Vendor_Num = Cast(@VendorNumber as int)
	SET @Vendor_Name = Left(@VendorName, 50)
	SET @Department_ID = @Dept

	--BEGIN calculate RecAgentCommissionPercent 
	DECLARE @RecAgentCommissionPercent varchar(100)
	SET @RecAgentCommissionPercent = Null
	
	--only do this if they have agent selected
	IF (@Agent is not null and @Agent <> '')
	BEGIN
		DECLARE @IsPrivateBrand bit
		SET @IsPrivateBrand = 0
		If coalesce(@Private_Brand_Label,'') <> '12'
		BEGIN
			SET @IsPrivateBrand = 1
		END
		
		Select @RecAgentCommissionPercent = default_rate
		from Import_Burden_Default_Exceptions IBDE
		where ltrim(rtrim(upper(IBDE.Agent_Name))) = ltrim(rtrim(upper(@AgentType)))
		and coalesce(IBDE.Private_brand_flag,0) = @IsPrivateBrand
		and IBDE.dept = @Dept and @Dept is not null and @AgentType is not null
		
		IF @RecAgentCommissionPercent is null
		BEGIN
			Select @RecAgentCommissionPercent = default_rate 
			from Import_Burden_Defaults IBD
			where ltrim(rtrim(upper(IBD.Agent_Name))) = ltrim(rtrim(upper(@AgentType)))
			and coalesce(IBD.Private_brand_flag,0) = @IsPrivateBrand 
		END	
	END
	
	--END calculate RecAgentCommissionPercent

	IF EXISTS(SELECT 1 FROM [dbo].[SPD_Import_Items] where [ID] = @ID)
	BEGIN
		-- update record
		UPDATE [dbo].[SPD_Import_Items] SET 
			Batch_ID = @Batch_ID,
			DateSubmitted = @DateSubmitted,
			Vendor = @Vendor,
			Agent = @Agent,
			AgentType = @AgentType,
			Buyer = @Buyer,
			Fax = @Fax,
			EnteredBy = @EnteredBy,
			SKUGroup = @SKUGroup,
			Email = @Email,
			EnteredDate = @EnteredDate,
			Dept = @Dept,
			Class = @Class,
			SubClass = @SubClass,
			PrimaryUPC = @PrimaryUPC,
			MichaelsSKU = @MichaelsSKU,
			GenerateMichaelsUPC = @GenerateMichaelsUPC,
			AdditionalUPC1 = @AdditionalUPC1,
			AdditionalUPC2 = @AdditionalUPC2,
			AdditionalUPC3 = @AdditionalUPC3,
			AdditionalUPC4 = @AdditionalUPC4,
			AdditionalUPC5 = @AdditionalUPC5,
			AdditionalUPC6 = @AdditionalUPC6,
			AdditionalUPC7 = @AdditionalUPC7,
			AdditionalUPC8 = @AdditionalUPC8,
			PackSKU = @PackSKU,
			PlanogramName = @PlanogramName,
			VendorNumber = @VendorNumber,
			VendorRank = @VendorRank,
			ItemTask = @ItemTask,
			Description = @Description,
			Days = @Days,
			VendorMinOrderAmount = @VendorMinOrderAmount,
			VendorContactName = @VendorContactName,
			VendorContactPhone = @VendorContactPhone,
			VendorContactEmail = @VendorContactEmail,
			VendorContactFax = @VendorContactFax,
			ManufactureContact = @ManufactureContact,
			ManufacturePhone = @ManufacturePhone,
			ManufactureEmail = @ManufactureEmail,
			ManufactureFax = @ManufactureFax,
			AgentContact = @AgentContact,
			AgentPhone = @AgentPhone,
			AgentEmail = @AgentEmail,
			AgentFax = @AgentFax,
			VendorStyleNumber = @VendorStyleNumber,
			HarmonizedCodeNumber = @HarmonizedCodeNumber,
			DetailInvoiceCustomsDesc = @DetailInvoiceCustomsDesc,
			ComponentMaterialBreakdown = @ComponentMaterialBreakdown,
			ComponentConstructionMethod = @ComponentConstructionMethod,
			IndividualItemPackaging = @IndividualItemPackaging,
			EachInsideMasterCaseBox = @EachInsideMasterCaseBox,
			EachInsideInnerPack = @EachInsideInnerPack,
			--EachPieceNetWeightLbsPerOunce = @EachPieceNetWeightLbsPerOunce,
			ReshippableInnerCartonWeight = @ReshippableInnerCartonWeight,
			ReshippableInnerCartonLength = @ReshippableInnerCartonLength,
			ReshippableInnerCartonWidth = @ReshippableInnerCartonWidth,
			ReshippableInnerCartonHeight = @ReshippableInnerCartonHeight,
			MasterCartonDimensionsLength = @MasterCartonDimensionsLength,
			MasterCartonDimensionsWidth = @MasterCartonDimensionsWidth,
			MasterCartonDimensionsHeight = @MasterCartonDimensionsHeight,
			CubicFeetPerMasterCarton = @CubicFeetPerMasterCarton,
			WeightMasterCarton = @WeightMasterCarton,
			CubicFeetPerInnerCarton = @CubicFeetPerInnerCarton,
			FOBShippingPoint = @FOBShippingPoint,
			DutyPercent = @DutyPercent,
			DutyAmount = @DutyAmount,
			AdditionalDutyComment = @AdditionalDutyComment,
			AdditionalDutyAmount = @AdditionalDutyAmount,
			OceanFreightAmount = @OceanFreightAmount,
			OceanFreightComputedAmount = @OceanFreightComputedAmount,
			AgentCommissionPercent = @AgentCommissionPercent,
			AgentCommissionAmount = @AgentCommissionAmount,
			OtherImportCostsPercent = @OtherImportCostsPercent,
			OtherImportCostsAmount = @OtherImportCostsAmount,
			PackagingCostAmount = @PackagingCostAmount,
			TotalImportBurden = @TotalImportBurden,
			WarehouseLandedCost = @WarehouseLandedCost,
			PurchaseOrderIssuedTo = @PurchaseOrderIssuedTo,
			ShippingPoint = @ShippingPoint,
			CountryOfOrigin = @CountryOfOrigin,
			CountryOfOriginName = @CountryOfOriginName,
			VendorComments = @VendorComments,
			StockCategory = @StockCategory,
			FreightTerms = @FreightTerms,
			ItemType = @ItemType,
			PackItemIndicator = @PackItemIndicator,
			ItemTypeAttribute = @ItemTypeAttribute,
			AllowStoreOrder = @AllowStoreOrder,
			InventoryControl = @InventoryControl,
			AutoReplenish = @AutoReplenish,
			PrePriced = @PrePriced,
			TaxUDA = @TaxUDA,
			PrePricedUDA = @PrePricedUDA,
			TaxValueUDA = @TaxValueUDA,
			HybridType = @HybridType,
			SourcingDC = @SourcingDC,
			LeadTime = @LeadTime,
			ConversionDate = @ConversionDate,
			StoreSuppZoneGRP = @StoreSuppZoneGRP,
			WhseSuppZoneGRP = @WhseSuppZoneGRP,
			POGMaxQty = @POGMaxQty,
			POGSetupPerStore = @POGSetupPerStore,
			ProjSalesPerStorePerMonth = @ProjSalesPerStorePerMonth,
			OutboundFreight = @OutboundFreight,
			NinePercentWhseCharge = @NinePercentWhseCharge,
			TotalStoreLandedCost = @TotalStoreLandedCost,
			RDBase = @RDBase,
			RDCentral = @RDCentral,
			RDTest = @RDTest,		
			RDAlaska = @RDAlaska,			
			RDCanada = @RDCanada,			
			RD0Thru9 = @RD0Thru9,
			RDCalifornia = @RDCalifornia,
			RDVillageCraft = @RDVillageCraft,
			Retail9 = @Retail9,
			Retail10 = @Retail10,
			Retail11 = @Retail11,
			Retail12 = @Retail12,
			Retail13 = @Retail13,
			RDQuebec = @RDQuebec,
			RDPuertoRico = @RDPuertoRico,
			HazMatYes = @HazMatYes,
			HazMatNo = @HazMatNo,
			HazMatMFGCountry = @HazMatMFGCountry,
			HazMatMFGName = @HazMatMFGName,
			HazMatMFGFlammable = @HazMatMFGFlammable,
			HazMatMFGCity = @HazMatMFGCity,
			HazMatContainerType = @HazMatContainerType,
			HazMatMFGState = @HazMatMFGState,
			HazMatContainerSize = @HazMatContainerSize,
			HazMatMFGPhone = @HazMatMFGPhone,
			HazMatMSDSUOM = @HazMatMSDSUOM,
			CoinBattery = @CoinBattery,
			TSSA = @TSSA,
			CSA = @CSA,
			UL = @UL,
			LicenceAgreement = @LicenceAgreement,
			FumigationCertificate = @FumigationCertificate,
			PhytoTemporaryShipment = @PhytoTemporaryShipment,
			KILNDriedCertificate = @KILNDriedCertificate,
			ChinaComInspecNumAndCCIBStickers = @ChinaComInspecNumAndCCIBStickers,
			OriginalVisa = @OriginalVisa,
			TextileDeclarationMidCode = @TextileDeclarationMidCode,
			QuotaChargeStatement = @QuotaChargeStatement,
			MSDS = @MSDS,
			TSCA = @TSCA,
			DropBallTestCert = @DropBallTestCert,
			ManMedicalDeviceListing = @ManMedicalDeviceListing,
			ManFDARegistration = @ManFDARegistration,
			CopyRightIndemnification = @CopyRightIndemnification,
			FishWildLifeCert = @FishWildLifeCert,
			Proposition65LabelReq = @Proposition65LabelReq,
			CCCR = @CCCR,
			FormaldehydeCompliant = @FormaldehydeCompliant,
			QuoteSheetStatus = @QuoteSheetStatus,
			Season = @Season,
			PaymentTerms = @PaymentTerms,
			VendorName = @VendorName,
			VendorAddress1 = @VendorAddress1,
			VendorAddress2 = @VendorAddress2,
			VendorAddress3 = @VendorAddress3,
			VendorAddress4 = @VendorAddress4,
			ManufactureName = @ManufactureName,
			ManufactureAddress1 = @ManufactureAddress1,
			ManufactureAddress2 = @ManufactureAddress2,
			RMS_Sellable = @RMS_Sellable,
			RMS_Orderable = @RMS_Orderable,
			RMS_Inventory = @RMS_Inventory,
			Parent_ID = @Parent_ID,
			RegularBatchItem = @RegularBatchItem,
			UpdateUserID = @UserID,
			Displayer_Cost = @Displayer_Cost,
			Product_Cost = @Product_Cost,
			Store_Total = @Store_Total,
			POG_Start_Date = @POG_Start_Date,
			POG_Comp_Date = @POG_Comp_Date,
			Calculate_Options = @Calculate_Options,
			Like_Item_SKU = @Like_Item_SKU,
			Like_Item_Description = @Like_Item_Description,
			Like_Item_Retail = @Like_Item_Retail,
			Annual_Regular_Unit_Forecast = @Annual_Regular_Unit_Forecast,
			Like_Item_Store_Count = @Like_Item_Store_Count,
			Like_Item_Regular_Unit = @Like_Item_Regular_Unit,
			Like_Item_Unit_Store_Month = @Like_Item_Unit_Store_Month,
			Annual_Reg_Retail_Sales = @Annual_Reg_Retail_Sales,
			Facings = @Facings,
			Min_Pres_Per_Facing = @Min_Pres_Per_Facing,
			Inner_Pack = @Inner_Pack,
			POG_Min_Qty = @POG_Min_Qty,
			Private_Brand_Label = @Private_Brand_Label,
			Discountable = @Discountable,
			Qty_In_Pack = @Qty_In_Pack, 
			Valid_Existing_SKU = @Valid_Existing_SKU,
			Item_Status = @Item_Status, 
			QuoteReferenceNumber = @QuoteReferenceNumber,
			Customs_Description = @CustomsDescription,
			RecAgentCommissionPercent = @RecAgentCommissionPercent,
			Stocking_Strategy_Code = @Stocking_Strategy_Code,
			eachheight = @eachheight,
			eachwidth = @eachwidth,
			eachlength = @eachlength,
			eachweight = @eachweight,
			cubicfeeteach = @cubicfeeteach,
			CanadaHarmonizedCodeNumber = @CanadaHarmonizedCodeNumber,
			SuppTariffPercent = @SuppTariffPercent,
			SuppTariffAmount = @SuppTariffAmount,
		    InnerGTIN = @InnerGTIN,
			CaseGTIN = @CaseGTIN,
			GenerateMichaelsGTIN = @GenerateMichaelsGTIN,
			MinimumOrderQuantity = @MinimumOrderQuantity,
			ProductIdentifiesAsCosmetic = @ProductIdentifiesAsCosmetic
		WHERE 
			[ID] = @ID
		--LP Spedy Order 12, enforce calc options of childern on Like Item
		IF (@Parent_ID = 0)
		BEGIN
		--NAK 12/5/2012: Per Srilatha @ Michaels, MSS Quotes should not have the Forecast Type overwritten for Child items.
			IF (Coalesce(@QuoteReferenceNumber,'') = '')
			BEGIN
				update [dbo].[SPD_Import_Items] SET
					Calculate_Options = @Calculate_Options,
					Store_Total = @Store_Total,
					POG_Start_Date = @POG_Start_Date,
					POG_Comp_Date = @POG_Comp_Date
				where Batch_ID = @Batch_ID and Parent_ID > 0
			END
			Else
			BEGIN
				update [dbo].[SPD_Import_Items] SET
					Store_Total = @Store_Total,
					POG_Start_Date = @POG_Start_Date,
					POG_Comp_Date = @POG_Comp_Date
				where Batch_ID = @Batch_ID and Parent_ID > 0
			END
				
		End
		
		-- update [dbo].[SPD_Import_Items] SET
		declare @str varchar(20)
		set @str = COALESCE(RTRIM(REPLACE(LEFT(COALESCE(@PackItemIndicator, ''),2), '-', '')), '')
		if ( ISNULL(@Batch_ID, 0) > 0 and (@str = 'D' or @str = 'DP' or @str = 'SB') and (@SkipInvalidatingPackChildren != 1) )
		begin
		  update [dbo].[SPD_Import_Items] SET Is_Valid = -1 where [ID] != @ID and ([Batch_ID] = @Batch_ID or [Parent_ID] = @ID) and COALESCE(RTRIM(REPLACE(LEFT(COALESCE(PackItemIndicator, ''),2), '-', '')), '') NOT IN ('D', 'DP','SB')
		end
		
		-- update batch ??
		IF (ISNULL(@Batch_ID, 0) > 0 and @Parent_ID = 0)
		BEGIN

			update [dbo].[SPD_Batch] set 
				Vendor_Name = @Vendor_Name,
				Vendor_Number = @Vendor_Num,
				Fineline_Dept_ID = @Department_ID,
				date_modified = @CurrentDate,
				modified_user = @UserID
			where [ID] = @Batch_ID
		END
		
		-- update date modified?
		IF (@IsDirty = 1)
		BEGIN
			UPDATE [dbo].[SPD_Import_Items] SET
			DateLastModified = @CurrentDate
			WHERE [ID] = @ID
		
		END

	END
	ELSE
	BEGIN

		-- insert into batch ??
		IF (ISNULL(@Batch_ID, 0) <= 0 and @Parent_ID = 0)
		BEGIN

			INSERT INTO [dbo].[SPD_Batch](
				Vendor_Name,
				Vendor_Number,
				Batch_Type_ID,
				WorkFlow_Stage_ID,
				Fineline_Dept_ID,
				date_created,
				created_user,
				date_modified,
				modified_user
			) values (
				@Vendor_Name,
				@Vendor_Num,
				@BatchImportItemType,
				1,
				@Department_ID,
				@CurrentDate,
				@UserID,
				@CurrentDate,
				@UserID
			)
			
			SET @Batch_ID = SCOPE_IDENTITY()

			-- insert into batch history
			INSERT INTO [dbo].[SPD_Batch_History](
				spd_batch_id,
				workflow_stage_id,
				[action],
				modified_user,
				date_modified,
				notes
			) values (
				@Batch_ID,
				1,
				@Batch_Action,
				@UserID,
				@CurrentDate,
				@Batch_Notes
			)
			
			--Insert Into Batch History Stage Durations table if Action was "Created" or "Uploaded"
			If @Batch_Action = 'Created' or @Batch_Action = 'Uploaded' AND Not EXISTS(SELECT 1 FROM SPD_Batch_History_Stage_Durations Where Batch_ID = @Batch_ID AND Stage_ID = 1)
			Begin
				INSERT INTO SPD_Batch_History_Stage_Durations(Batch_ID, Stage_ID, Start_Date, End_Date, Hours)
				VALUES(@Batch_ID, 1, getDate(), null, null)
			END
		END

		-- insert record
		INSERT INTO [dbo].[SPD_Import_Items] (
			Batch_ID,
			DateSubmitted,
			Vendor,
			Agent,
			AgentType,
			Buyer,
			Fax,
			EnteredBy,
			SKUGroup,
			Email,
			EnteredDate,
			Dept,
			Class,
			SubClass,
			PrimaryUPC,
			MichaelsSKU,
			GenerateMichaelsUPC,
			AdditionalUPC1,
			AdditionalUPC2,
			AdditionalUPC3,
			AdditionalUPC4,
			AdditionalUPC5,
			AdditionalUPC6,
			AdditionalUPC7,
			AdditionalUPC8,
			PackSKU,
			PlanogramName,
			VendorNumber,
			VendorRank,
			ItemTask,
			Description,
			Days,
			VendorMinOrderAmount,
			VendorContactName,
			VendorContactPhone,
			VendorContactEmail,
			VendorContactFax,
			ManufactureContact,
			ManufacturePhone,
			ManufactureEmail,
			ManufactureFax,
			AgentContact,
			AgentPhone,
			AgentEmail,
			AgentFax,
			VendorStyleNumber,
			HarmonizedCodeNumber,
			DetailInvoiceCustomsDesc,
			ComponentMaterialBreakdown,
			ComponentConstructionMethod,
			IndividualItemPackaging,
			EachInsideMasterCaseBox,
			EachInsideInnerPack,
			--EachPieceNetWeightLbsPerOunce,
			ReshippableInnerCartonWeight,
			ReshippableInnerCartonLength,
			ReshippableInnerCartonWidth,
			ReshippableInnerCartonHeight,
			MasterCartonDimensionsLength,
			MasterCartonDimensionsWidth,
			MasterCartonDimensionsHeight,
			CubicFeetPerMasterCarton,
			WeightMasterCarton,
			CubicFeetPerInnerCarton,
			FOBShippingPoint,
			DutyPercent,
			DutyAmount,
			AdditionalDutyComment,
			AdditionalDutyAmount,
			OceanFreightAmount,
			OceanFreightComputedAmount,
			AgentCommissionPercent,
			AgentCommissionAmount,
			OtherImportCostsPercent,
			OtherImportCostsAmount,
			PackagingCostAmount,
			TotalImportBurden,
			WarehouseLandedCost,
			PurchaseOrderIssuedTo,
			ShippingPoint,
			CountryOfOrigin,
			CountryOfOriginName,
			VendorComments,
			StockCategory,
			FreightTerms,
			ItemType,
			PackItemIndicator,
			ItemTypeAttribute,
			AllowStoreOrder,
			InventoryControl,
			AutoReplenish,
			PrePriced,
			TaxUDA,
			PrePricedUDA,
			TaxValueUDA,
			HybridType,
			SourcingDC,
			LeadTime,
			ConversionDate,
			StoreSuppZoneGRP,
			WhseSuppZoneGRP,
			POGMaxQty,
			POGSetupPerStore,
			ProjSalesPerStorePerMonth,
			OutboundFreight,
			NinePercentWhseCharge,
			TotalStoreLandedCost,
			RDBase,
			RDCentral,
			RDTest,
			RDAlaska,			
			RDCanada,			
			RD0Thru9,
			RDCalifornia,
			RDVillageCraft,
			HazMatYes,
			HazMatNo,
			HazMatMFGCountry,
			HazMatMFGName,
			HazMatMFGFlammable,
			HazMatMFGCity,
			HazMatContainerType,
			HazMatMFGState,
			HazMatContainerSize,
			HazMatMFGPhone,
			HazMatMSDSUOM,
			CoinBattery,
			TSSA,
			CSA,
			UL,
			LicenceAgreement,
			FumigationCertificate,
			PhytoTemporaryShipment,
			KILNDriedCertificate,
			ChinaComInspecNumAndCCIBStickers,
			OriginalVisa,
			TextileDeclarationMidCode,
			QuotaChargeStatement,
			MSDS,
			TSCA,
			DropBallTestCert,
			ManMedicalDeviceListing,
			ManFDARegistration,
			CopyRightIndemnification,
			FishWildLifeCert,
			Proposition65LabelReq,
			CCCR,
			FormaldehydeCompliant,
			QuoteSheetStatus,
			Season,
			PaymentTerms,
			VendorName,
			VendorAddress1,
			VendorAddress2,
			VendorAddress3,
			VendorAddress4,
			ManufactureName,
			ManufactureAddress1,
			ManufactureAddress2,
			RMS_Sellable ,
			RMS_Orderable ,
			RMS_Inventory ,
			Parent_ID ,
			RegularBatchItem ,
			DateCreated,
			CreatedUserID,
			DateLastModified,
			UpdateUserID,
			Displayer_Cost,
			Product_Cost,
			Store_Total,
			POG_Start_Date,
			POG_Comp_Date,
			Calculate_Options,
			Like_Item_SKU,
			Like_Item_Description,
			Like_Item_Retail,
			Annual_Regular_Unit_Forecast,
			Like_Item_Store_Count,
			Like_Item_Regular_Unit,
			Like_Item_Unit_Store_Month,
			Annual_Reg_Retail_Sales,
			Facings,
			Min_Pres_Per_Facing,
			Inner_Pack,
			POG_Min_Qty,
			Retail9,
			Retail10,
			Retail11,
			Retail12,
			Retail13,
			RDQuebec,
			RDPuertoRico,
			Private_Brand_Label,
			Discountable,
			Qty_In_Pack,
			Valid_Existing_SKU,
			Item_Status, 
			QuoteReferenceNumber,
			Customs_Description,
			RecAgentCommissionPercent,
			Stocking_Strategy_Code,
			eachheight,
			eachwidth,
			eachlength,
			eachweight,
			cubicfeeteach,
			CanadaHarmonizedCodeNumber,
			SuppTariffPercent,
			SuppTariffAmount,
			--PMO200141 GTIN14 Enhancements changes Start
			InnerGTIN,
			CaseGTIN,
			GenerateMichaelsGTIN,
			--PMO200141 GTIN14 Enhancements changes End
			MinimumOrderQuantity,
			ProductIdentifiesAsCosmetic
		) VALUES (
			@Batch_ID,
			@DateSubmitted,
			@Vendor,
			@Agent,
			@AgentType,
			@Buyer,
			@Fax,
			@EnteredBy,
			@SKUGroup,
			@Email,
			@EnteredDate,
			@Dept,
			@Class,
			@SubClass,
			@PrimaryUPC,
			@MichaelsSKU,
			@GenerateMichaelsUPC,
			@AdditionalUPC1,
			@AdditionalUPC2,
			@AdditionalUPC3,
			@AdditionalUPC4,
			@AdditionalUPC5,
			@AdditionalUPC6,
			@AdditionalUPC7,
			@AdditionalUPC8,
			@PackSKU,
			@PlanogramName,
			@VendorNumber,
			@VendorRank,
			@ItemTask,
			@Description,
			@Days,
			@VendorMinOrderAmount,
			@VendorContactName,
			@VendorContactPhone,
			@VendorContactEmail,
			@VendorContactFax,
			@ManufactureContact,
			@ManufacturePhone,
			@ManufactureEmail,
			@ManufactureFax,
			@AgentContact,
			@AgentPhone,
			@AgentEmail,
			@AgentFax,
			@VendorStyleNumber,
			@HarmonizedCodeNumber,
			@DetailInvoiceCustomsDesc,
			@ComponentMaterialBreakdown,
			@ComponentConstructionMethod,
			@IndividualItemPackaging,
			@EachInsideMasterCaseBox,
			@EachInsideInnerPack,
			--@EachPieceNetWeightLbsPerOunce,
			@ReshippableInnerCartonWeight,
			@ReshippableInnerCartonLength,
			@ReshippableInnerCartonWidth,
			@ReshippableInnerCartonHeight,
			@MasterCartonDimensionsLength,
			@MasterCartonDimensionsWidth,
			@MasterCartonDimensionsHeight,
			@CubicFeetPerMasterCarton,
			@WeightMasterCarton,
			@CubicFeetPerInnerCarton,
			@FOBShippingPoint,
			@DutyPercent,
			@DutyAmount,
			@AdditionalDutyComment,
			@AdditionalDutyAmount,
			@OceanFreightAmount,
			@OceanFreightComputedAmount,
			@AgentCommissionPercent,
			@AgentCommissionAmount,
			@OtherImportCostsPercent,
			@OtherImportCostsAmount,
			@PackagingCostAmount,
			@TotalImportBurden,
			@WarehouseLandedCost,
			@PurchaseOrderIssuedTo,
			@ShippingPoint,
			@CountryOfOrigin,
			@CountryOfOriginName,
			@VendorComments,
			@StockCategory,
			@FreightTerms,
			@ItemType,
			@PackItemIndicator,
			@ItemTypeAttribute,
			@AllowStoreOrder,
			@InventoryControl,
			@AutoReplenish,
			@PrePriced,
			@TaxUDA,
			@PrePricedUDA,
			@TaxValueUDA,
			@HybridType,
			@SourcingDC,
			@LeadTime,
			@ConversionDate,
			@StoreSuppZoneGRP,
			@WhseSuppZoneGRP,
			@POGMaxQty,
			@POGSetupPerStore,
			@ProjSalesPerStorePerMonth,
			@OutboundFreight,
			@NinePercentWhseCharge,
			@TotalStoreLandedCost,
			@RDBase,
			@RDCentral,
			@RDTest,	
			@RDAlaska,			
			@RDCanada,			
			@RD0Thru9,
			@RDCalifornia,
			@RDVillageCraft,
			@HazMatYes,
			@HazMatNo,
			@HazMatMFGCountry,
			@HazMatMFGName,
			@HazMatMFGFlammable,
			@HazMatMFGCity,
			@HazMatContainerType,
			@HazMatMFGState,
			@HazMatContainerSize,
			@HazMatMFGPhone,
			@HazMatMSDSUOM,
			@CoinBattery,
			@TSSA,
			@CSA,
			@UL,
			@LicenceAgreement,
			@FumigationCertificate,
			@PhytoTemporaryShipment,
			@KILNDriedCertificate,
			@ChinaComInspecNumAndCCIBStickers,
			@OriginalVisa,
			@TextileDeclarationMidCode,
			@QuotaChargeStatement,
			@MSDS,
			@TSCA,
			@DropBallTestCert,
			@ManMedicalDeviceListing,
			@ManFDARegistration,
			@CopyRightIndemnification,
			@FishWildLifeCert,
			@Proposition65LabelReq,
			@CCCR,
			@FormaldehydeCompliant,
			@QuoteSheetStatus,
			@Season,
			@PaymentTerms,
			@VendorName,
			@VendorAddress1,
			@VendorAddress2,
			@VendorAddress3,
			@VendorAddress4,
			@ManufactureName,
			@ManufactureAddress1,
			@ManufactureAddress2,
			@RMS_Sellable ,
			@RMS_Orderable ,
			@RMS_Inventory ,
			@Parent_ID ,
			@RegularBatchItem ,
			@CurrentDate,
			@UserID,
			@CurrentDate,
			@UserID,
			@Displayer_Cost,
			@Product_Cost,
			@Store_Total,
			@POG_Start_Date,
			@POG_Comp_Date,
			@Calculate_Options,
			@Like_Item_SKU,
			@Like_Item_Description,
			@Like_Item_Retail,
			@Annual_Regular_Unit_Forecast,
			@Like_Item_Store_Count,
			@Like_Item_Regular_Unit,
			@Like_Item_Unit_Store_Month,
			@Annual_Reg_Retail_Sales,
			@Facings,
			@Min_Pres_Per_Facing,
			@Inner_Pack,
			@POG_Min_Qty,
			@Retail9,
			@Retail10,
			@Retail11,
			@Retail12,
			@Retail13,
			@RDQuebec,
			@RDPuertoRico, 
			@Private_Brand_Label,
			@Discountable,
			@Qty_In_Pack,
			@Valid_Existing_SKU,
			@Item_Status, 
			@QuoteReferenceNumber,
			@CustomsDescription,
			@RecAgentCommissionPercent,
			@Stocking_Strategy_Code,
			@eachheight,
			@eachwidth,
			@eachlength,
			@eachweight,
			@cubicfeeteach,
			@CanadaHarmonizedCodeNumber,
			@SuppTariffPercent,
			@SuppTariffAmount,
			--PMO200141 GTIN14 Enhancements changes Start
			@InnerGTIN,
			@CaseGTIN,
			@GenerateMichaelsGTIN,
			--PMO200141 GTIN14 Enhancements changes End
			@MinimumOrderQuantity,
			@ProductIdentifiesAsCosmetic
		)
		SET @ID = SCOPE_IDENTITY()
	END


GO


ALTER PROCEDURE [dbo].[sp_SPD_ItemHeader_SaveRecord] 
  @ID bigint OUTPUT,
  @Batch_ID bigint,
  @Log_ID varchar(20),
  @Submitted_By varchar(100),
  @Date_Submitted datetime,
  @Supply_Chain_Analyst varchar(50),
  @Mgr_Supply_Chain varchar(50),
  @Dir_SCVR varchar(50),
  @Rebuy_YN varchar(1),
  @Replenish_YN varchar(1),
  @Store_Order_YN varchar(1),
  @Date_In_Retek datetime,
  @Enter_Retek varchar(50),
  @US_Vendor_Num int,
  @Canadian_Vendor_Num int,
  @US_Vendor_Name varchar(50),
  @Canadian_Vendor_Name varchar(50),
  @Department_Num int,
  @Buyer_Approval varchar(50),
  @Stock_Category varchar(1),
  @Canada_Stock_Category varchar(1),
  @Item_Type varchar(1),
  @Item_Type_Attribute varchar(50),
  @Allow_Store_Order varchar(1),
  @Perpetual_Inventory varchar(1),
  @Inventory_Control varchar(1),
  @Discountable varchar(1),
  @Freight_Terms varchar(50),
  @Auto_Replenish varchar(1),
  @SKU_Group varchar(50),
  @Store_Supplier_Zone_Group varchar(50),
  @WHS_Supplier_Zone_Group varchar(50),
  @Comments varchar(max),
  @Worksheet_Desc varchar(4000),
  @Batch_File_ID bigint,
  @User_ID int,
  @Batch_Action varchar(50) = '',
  @Batch_Notes varchar(max) = '',
  @Session_User_Name varchar(50) = '',
  @Is_Valid smallint = null,
  @RMS_Sellable varchar(1) = null,
  @RMS_Orderable varchar(1) = null,
  @RMS_Inventory varchar(1) = null,
  @Calculate_Options integer = 0,	
  @Store_Total int = null,
  @POG_Start_Date datetime = null,
  @POG_Comp_Date datetime = null,
  @Add_Unit_Cost money = null, 
  @calculateParentTotals bit = 0
AS
	SET NOCOUNT ON

  -- init
  DECLARE @dateNow datetime
  SET @dateNow = getdate()
  
  -- @vendorStage
  declare @vendorStage int 


  DECLARE @Vendor_Num int,
    @Vendor_Name varchar(50),
    @Department_ID int,
    @batchID bigint

  SET @Vendor_Num = 0
  SET @Vendor_Name = ''
  SET @Department_ID = 0

  IF (ISNULL(@US_Vendor_Num, 0) != 0)
    SET @Vendor_Num = @US_Vendor_Num
  ELSE
    SET @Vendor_Num = @Canadian_Vendor_Num
  IF (ISNULL(@US_Vendor_Name, '') != '')
    SET @Vendor_Name = @US_Vendor_Name
  ELSE
    SET @Vendor_Name = @Canadian_Vendor_Name
  SET @Department_ID = @Department_Num


	IF EXISTS(SELECT 1 FROM [dbo].[SPD_Item_Headers] where [ID] = @ID)
	BEGIN
    IF (ISNULL(@Batch_ID, 0) <= 0)
    BEGIN
      UPDATE [dbo].[SPD_Item_Headers] SET 
        Batch_ID = @Batch_ID
      WHERE 
        [ID] = @ID
    END
    
		-- update record
		UPDATE [dbo].[SPD_Item_Headers] SET 
      Log_ID = @Log_ID,
      Submitted_By = @Submitted_By,
      Date_Submitted = @Date_Submitted,
      Supply_Chain_Analyst = @Supply_Chain_Analyst,
      Mgr_Supply_Chain = @Mgr_Supply_Chain,
      Dir_SCVR = @Dir_SCVR,
      Rebuy_YN = @Rebuy_YN,
      Replenish_YN = @Replenish_YN,
      Store_Order_YN = @Store_Order_YN,
      Date_In_Retek = @Date_In_Retek,
      Enter_Retek = @Enter_Retek,
      US_Vendor_Num = @US_Vendor_Num,
      Canadian_Vendor_Num = @Canadian_Vendor_Num,
      US_Vendor_Name = @US_Vendor_Name,
      Canadian_Vendor_Name = @Canadian_Vendor_Name,
      Department_Num = @Department_Num,
      Buyer_Approval = @Buyer_Approval,
      Stock_Category = @Stock_Category,
      Canada_Stock_Category = @Canada_Stock_Category,
      Item_Type = @Item_Type,
      Item_Type_Attribute = @Item_Type_Attribute,
      Allow_Store_Order = @Allow_Store_Order,
      Perpetual_Inventory = @Perpetual_Inventory,
      Inventory_Control = @Inventory_Control,
      Freight_Terms = @Freight_Terms,
      Auto_Replenish = @Auto_Replenish,
      SKU_Group = @SKU_Group,
      Store_Supplier_Zone_Group = @Store_Supplier_Zone_Group,
      WHS_Supplier_Zone_Group = @WHS_Supplier_Zone_Group,
      Comments = @Comments,
      Worksheet_Desc = @Worksheet_Desc,
      Batch_File_ID = @Batch_File_ID,
      RMS_Sellable = @RMS_Sellable,
      RMS_Orderable = @RMS_Orderable,
      RMS_Inventory = @RMS_Inventory,
      Date_Last_Modified = getdate(),
      Update_User_ID = @User_ID,
	    Calculate_Options = @Calculate_Options,	
      Store_Total = @Store_Total,
      POG_Start_Date = @POG_Start_Date,
      POG_Comp_Date = @POG_Comp_Date,
      Discountable = @Discountable,
      Add_Unit_Cost = @Add_Unit_Cost
		WHERE 
			[ID] = @ID
			
	  -- BEGIN update items (D/DP totals)
	  -- -------------------------------------------------------------------
	  
	  declare @DPCount int
	  declare @DCount int
	  declare @itemID bigint
	  declare @pii varchar(20)
	  declare @uscost money, @tuscost money
	  declare @ccost money, @tccost money
	  
	  if (@calculateParentTotals = 1)
	  begin
	    select @DPCount = isnull(count(1), 0) from SPD_Items i where i.Item_Header_ID = @ID and COALESCE(RTRIM(REPLACE(LEFT(i.[Pack_Item_Indicator],2), '-', '')), '') = 'DP'
      select @DCount = isnull(count(1), 0) from SPD_Items i where i.Item_Header_ID = @ID and COALESCE(RTRIM(REPLACE(LEFT(i.[Pack_Item_Indicator],2), '-', '')), '') in ('D','SB')
	    if (@Item_Type != 'R' and ((@DPCount + @DCount) = 1))
	    begin
	      select @itemID = isnull(i.[ID], 0), @uscost = i.US_Cost, @ccost = i.Canada_Cost, @pii = i.Pack_Item_Indicator
	      from SPD_Items i where i.Item_Header_ID = @ID 
	        and COALESCE(RTRIM(REPLACE(LEFT(i.[Pack_Item_Indicator],2), '-', '')), '') IN ('D', 'DP','SB')
	        and i.[ID] = (select MIN([ID]) from SPD_Items i where i.Item_Header_ID = @ID and COALESCE(RTRIM(REPLACE(LEFT(i.[Pack_Item_Indicator],2), '-', '')), '') IN ('D', 'DP', 'SB'))
  	      
	      if (@itemID > 0 and isnull(@pii, '') <> 'C')
	      begin
	        if (@uscost is not null and @uscost >= 0 and isnull(@Add_Unit_Cost, 0) >= 0)
	        begin
	          set @tuscost = @uscost + isnull(@Add_Unit_Cost, 0)
	          update SPD_Items set Total_US_Cost = @tuscost where [ID] = @itemID
	        end 
	        if (@ccost is not null and @ccost >= 0 and isnull(@Add_Unit_Cost, 0) >= 0)
	        begin
	          set @tccost = @ccost + isnull(@Add_Unit_Cost, 0)
	          update SPD_Items set Total_Canada_Cost = @tccost where [ID] = @itemID
	        end
	      end
	    end
	  end
	  
	  -- -------------------------------------------------------------------
	  -- END update items (D/DP totals)


    -- update batch ??
    IF (ISNULL(@Batch_ID, 0) > 0)
    BEGIN
      update [dbo].[SPD_Batch] set
        Vendor_Name = @Vendor_Name,
        Vendor_Number = @Vendor_Num,
        Fineline_Dept_ID = @Department_ID--,
        --date_modified = @dateNow,
        --modified_user = @User_ID
      where [ID] = @Batch_ID
    END
    
    -- update items
    update [dbo].[SPD_Items] set [Is_Valid] = -1 where [Item_Header_ID] = @ID
    -- update batch
    select @batchID = Batch_ID from [SPD_Item_Headers] where [ID] = @ID
    update [dbo].[SPD_Batch] set [Batch_Valid] = -1 where [ID] = @batchID

	END
	ELSE
	BEGIN



    -- insert into batch ??
    IF (ISNULL(@Batch_ID, 0) <= 0)
    BEGIN
      
      select @vendorStage = isnull(ws.[id], 1)
      from SPD_Workflow_Stage ws 
        inner join SPD_Workflow w on ws.Workflow_id = w.Workflow_id
      where w.Workflow_id = 1 and 
        ws.Stage_Type_id = 5 and 
        ws.[sequence] = (select min([sequence]) from SPD_Workflow_Stage ws2 where ws2.Workflow_id = 1 and ws2.Stage_Type_id = 5)

        
      INSERT INTO [dbo].[SPD_Batch](
        Vendor_Name,
        Vendor_Number,
        Batch_Type_ID,
        WorkFlow_Stage_ID,
        Fineline_Dept_ID,
        date_created,
        created_user,
        date_modified,
        modified_user
        ) values (
        @Vendor_Name,
        @Vendor_Num,
        1,
        @vendorStage,
        @Department_ID,
        @dateNow,
        @User_ID,
        @dateNow,
        @User_ID
        )
      SET @Batch_ID = SCOPE_IDENTITY()

      -- insert into batch history
      INSERT INTO [dbo].[SPD_Batch_History](
        spd_batch_id,
        workflow_stage_id,
        [action],
        modified_user,
        date_modified,
        notes
        ) values (
        @Batch_ID,
        @vendorStage,
        @Batch_Action,
        @User_ID,
        @dateNow,
        @Batch_Notes
        )
		
		--Insert Into Batch History Stage Durations table if Action was "Created" or "Uploaded"
		If @Batch_Action = 'Created' or @Batch_Action = 'Uploaded' AND Not EXISTS(SELECT 1 FROM SPD_Batch_History_Stage_Durations Where Batch_ID = @Batch_ID AND Stage_ID = @vendorStage)
		Begin
			INSERT INTO SPD_Batch_History_Stage_Durations(Batch_ID, Stage_ID, Start_Date, End_Date, Hours)
			VALUES(@Batch_ID, @vendorStage, getDate(), null, null)
		END

    END

		-- insert record
    
		INSERT INTO [dbo].[SPD_Item_Headers] (
			Batch_ID,
      Log_ID ,
      Submitted_By ,
      Date_Submitted ,
      Supply_Chain_Analyst ,
      Mgr_Supply_Chain ,
      Dir_SCVR ,
      Rebuy_YN ,
      Replenish_YN ,
      Store_Order_YN ,
      Date_In_Retek ,
      Enter_Retek ,
      US_Vendor_Num ,
      Canadian_Vendor_Num ,
      US_Vendor_Name ,
      Canadian_Vendor_Name ,
      Department_Num ,
      Buyer_Approval ,
      Stock_Category ,
      Canada_Stock_Category ,
      Item_Type ,
      Item_Type_Attribute ,
      Allow_Store_Order ,
      Perpetual_Inventory ,
      Inventory_Control ,
      Freight_Terms ,
      Auto_Replenish ,
      SKU_Group ,
      Store_Supplier_Zone_Group ,
      WHS_Supplier_Zone_Group ,
      Comments ,
      Worksheet_Desc ,
      Batch_File_ID ,
      RMS_Sellable ,
      RMS_Orderable ,
      RMS_Inventory ,
      Date_Created,
      Created_User_ID,
      Date_Last_Modified,
      Update_User_ID,
	  Calculate_Options,	
      Store_Total,
      POG_Start_Date,
      POG_Comp_Date,
      Discountable,
      Add_Unit_Cost
		) VALUES (
			@Batch_ID,
      @Log_ID ,
      @Submitted_By ,
      @Date_Submitted ,
      @Supply_Chain_Analyst ,
      @Mgr_Supply_Chain ,
      @Dir_SCVR ,
      @Rebuy_YN ,
      @Replenish_YN ,
      @Store_Order_YN ,
      @Date_In_Retek ,
      @Enter_Retek ,
      @US_Vendor_Num ,
      @Canadian_Vendor_Num ,
      @US_Vendor_Name ,
      @Canadian_Vendor_Name ,
      @Department_Num ,
      @Buyer_Approval ,
      @Stock_Category ,
      @Canada_Stock_Category ,
      @Item_Type ,
      @Item_Type_Attribute ,
      @Allow_Store_Order ,
      @Perpetual_Inventory ,
      @Inventory_Control ,
      @Freight_Terms ,
      @Auto_Replenish ,
      @SKU_Group ,
      @Store_Supplier_Zone_Group ,
      @WHS_Supplier_Zone_Group ,
      @Comments ,
      @Worksheet_Desc ,
      @Batch_File_ID ,
      @RMS_Sellable ,
      @RMS_Orderable ,
      @RMS_Inventory ,
      @dateNow,
      @User_ID,
      @dateNow,
      @User_ID,
	  @Calculate_Options,
      @Store_Total,
      @POG_Start_Date,
      @POG_Comp_Date,
      @Discountable,
      @Add_Unit_Cost
		)
		SET @ID = SCOPE_IDENTITY()

	END


GO



/*
INBOUND RMS MESSAGE PROCESSING
Ken Wallace and Jeff Littlefield

This is the main starting point for inbound message processing.  Incoming messages are collected into a cursor along with any already processed messages that have 
a time stamp later than the first in the list. This ensures that message are reapplied as necessary to the item master (Inserts occur then updates)

Each message is first evaluated for the New Item Process as well as updates to the control tables (Class, subclass, dept etc)
When a New Item Batch goes to completion a flag is set to Update the Item Master with SPEDY Only Data (data that is not maintained by RMS). 
This update of the Item Master is done AFTER the Message has been processed by the "Update Item Master routines" to ensure that the Item master record exists before
the SPEDY Only data from the New Item Record is committed to the Item Master

At the bottom of this routine is the logic to Call the Item Master Update and Item Maintenance routines as well as the call to Update Item Master from New Item.

Note that Logging is now incorporated into the routines.  At key points, process and diagnostic info is logged using the routine usp_SPD_MQ_LogMessage.  
Log messages are grouped together with a common Timestamp that is passed from routine to routine.

-- To rerun messages, use the following template to clear our the statues for the messages to rerun
-- Delete from SPD_MQComm_Message_Status where message_ID in (Message IDs to reprocess) and status_ID <> 1

*/

ALTER PROCEDURE [dbo].[sp_SPD_MQComm_ProcessIncomingMQMessages]
	-- This allows us to rerun manually to reprocess Specific messages by specifying N
	@AddAllReadyProcessedMessages char(1) = 'Y'
AS
  DECLARE @TimeZoneOffset int
  DECLARE @MessageID bigint
  DECLARE @strXMLDoc xml
  DECLARE @intXMLDocHandle int
  DECLARE @XML_HeaderSegment_Source varchar(1000)
  DECLARE @XML_HeaderSegment_Contents varchar(1000)
  DECLARE @XML_HeaderSegment_ThreadID varchar(1000)
  DECLARE @XML_HeaderSegment_PublishTime varchar(1000)
  DECLARE @XML_DataSegment_ID varchar(1000)
  DECLARE @XML_DataSegment_Type varchar(1000)
  DECLARE @XML_DataSegment_Action varchar(1000)
  DECLARE @XML_DataSegment_LastID varchar(1000)
  DECLARE @SPEDYRefString varchar(1000)
  DECLARE @SPEDYBatchID bigint
  DECLARE @SPEDYBatchTypeID tinyint
  DECLARE @SPEDYItemHeaderID bigint
  DECLARE @SPEDYItemID bigint
  DECLARE @NumItemsInBatch bigint
  DECLARE @NumCompleteItemsInBatch bigint
  DECLARE @NumParentItemsInBatchNeedingaSKU smallint
  DECLARE @VERBSTATEMENTSTRING varchar(max)
  DECLARE @VERBSTATEMENTSTRING2 varchar(max)
  DECLARE @SELECTSTATEMENTSTRING varchar(max)
  DECLARE @PREPARESTRING varchar(max)
  DECLARE @CLEANUPSTRING varchar(max)
  DECLARE @WHERECLAUSE1 varchar(max)
  DECLARE @WHERECLAUSE2 varchar(max)
  DECLARE @SUCCESSFLAG bit
  DECLARE @SUCCESSMSG varchar(max)
  DECLARE @XML_DataSegment_PrimaryUPC varchar(20)
  DECLARE @XML_DataSegment_ErrorMessage1 varchar(max)
  DECLARE @XML_DataSegment_ErrorMessage2 varchar(max)
  DECLARE @SPEDYEnvVars_Environment_Name varchar(50)
  DECLARE @SPEDYEnvVars_Environment_GUID uniqueidentifier
  DECLARE @SPEDYEnvVars_Server_Name nvarchar(2048)
  DECLARE @SPEDYEnvVars_Database_Name nvarchar(2048)
  DECLARE @SPEDYEnvVars_SPD_Root_URL nvarchar(2048)
  DECLARE @SPEDYEnvVars_SPD_Admin_URL nvarchar(2048)
  DECLARE @SPEDYEnvVars_SPD_Vendor_URL nvarchar(2048)
  DECLARE @SPEDYEnvVars_Test_Mode bit
  DECLARE @SPEDYEnvVars_Test_Mode_Email_Address nvarchar(2048)
  DECLARE @SPEDYEnvVars_SPD_Email_FromAddress nvarchar(2048)
  DECLARE @SPEDYEnvVars_SPD_Email_CCAddress varchar(max)
  DECLARE @SPEDYEnvVars_SPD_Email_BCCAddress varchar(max)
  DECLARE @SPEDYEnvVars_SPD_SMTP_Server nvarchar(2048)
  DECLARE @SPEDYEnvVars_SPD_SMTP_Authentication_Required bit
  DECLARE @SPEDYEnvVars_SPD_SMTP_Authentication_User nvarchar(2048)
  DECLARE @SPEDYEnvVars_SPD_SMTP_Authentication_Password nvarchar(2048)
  DECLARE @MichaelsEmailRecipients varchar(max)
  DECLARE @EmailRecipients varchar(max)
  DECLARE @EmailSubject varchar(4000)
  DECLARE @SPEDYBatchGUID varchar(4000)
  DECLARE @EmailBody varchar(max)
  DECLARE @EmailQuery varchar(max)
  DECLARE @DisplayerCost decimal(20, 4)
  DECLARE @DisplayerRetail money
  DECLARE @WorkflowStageID tinyint
  DECLARE @WorkflowID tinyint
  DECLARE @MsgTimeStamp datetime
  DECLARE @msg varchar(1000)
  DECLARE @MessageRecNo int
  DECLARE @MessageCount int
  Declare @UpdateIMFromNI bit
  Declare @UpdateBID bigint


  SET NOCOUNT ON
  -- stage ids
  DECLARE @STAGE_COMPLETED int
  DECLARE @STAGE_WAITINGFORSKU int
  DECLARE @STAGE_DBC int

   --build stage ids work worflowID = 1
  select @STAGE_COMPLETED = [id] from SPD_Workflow_Stage where Workflow_id = 1 and Stage_Type_id = 4
  select @STAGE_WAITINGFORSKU = [id] from SPD_Workflow_Stage where Workflow_id = 1 and Stage_Type_id = 3
  select @STAGE_DBC = [id] from SPD_Workflow_Stage where Workflow_id = 1 and Stage_Type_id = 6
  
  --select @STAGE_COMPLETED, @STAGE_PRIOR_TO_COMPLETED
  
  -- This variable used to set a common timestamp for all logged messages in the execution of the routine
  SET @MsgTimeStamp = getdate()
  
  --Set @msg = 'P R O C   P R E P R O C E S S   B E G I N S...'
  --EXEC usp_SPD_MQ_LogMessage @D=@MsgTimeStamp, @M=@msg

  SELECT  
       @SPEDYEnvVars_Environment_Name = [Environment_Name]
      ,@SPEDYEnvVars_Environment_GUID = [Environment_GUID]
      ,@SPEDYEnvVars_Server_Name = [Server_Name]
      ,@SPEDYEnvVars_Database_Name = [Database_Name]
      ,@SPEDYEnvVars_SPD_Root_URL = [SPD_Root_URL]
      ,@SPEDYEnvVars_SPD_Admin_URL = [SPD_Admin_URL]
      ,@SPEDYEnvVars_SPD_Vendor_URL = [SPD_Vendor_URL]
      ,@SPEDYEnvVars_Test_Mode = [Test_Mode]
      ,@SPEDYEnvVars_Test_Mode_Email_Address = [Test_Mode_Email_Address]
      ,@SPEDYEnvVars_SPD_Email_FromAddress = [SPD_Email_FromAddress]
      ,@SPEDYEnvVars_SPD_Email_CCAddress = [SPD_Email_CCAddress]
      ,@SPEDYEnvVars_SPD_Email_BCCAddress = [SPD_Email_BCCAddress]
      ,@SPEDYEnvVars_SPD_SMTP_Server = [SPD_SMTP_Server]
      ,@SPEDYEnvVars_SPD_SMTP_Authentication_Required = [SPD_SMTP_Authentication_Required]
      ,@SPEDYEnvVars_SPD_SMTP_Authentication_User = [SPD_SMTP_Authentication_User]
      ,@SPEDYEnvVars_SPD_SMTP_Authentication_Password = [SPD_SMTP_Authentication_Password]
      --SELECT *
  FROM SPD_Environment
  WHERE Server_Name = @@SERVERNAME AND Database_Name = DB_NAME()
  
  DECLARE @intOffset int
  Declare @tDate datetime	--, @temp1 varchar(100)
  DECLARE @MinPublishTime datetime

  -- Create a temp table so process all message in process sequence order
  CREATE TABLE #Messages (
		  RecordNumber int Identity(1,1)
		, MessageID	bigint
		, MessageBody XML
		, PublishTime datetime
		)
  
-- *****************************************************************************************************************************************
--	Build list of messages to process based on the Message Published time stamp so we know we are processing the messages in the right order
-- *****************************************************************************************************************************************
Print 'Selecting Messages to Process...'
  DECLARE myCursor CURSOR FOR 
    SELECT top 4000 m.ID, m.Message_Body 
    FROM SPD_MQComm_Message m
    INNER JOIN (
		  SELECT 
			x.Message_ID 
			, COUNT(x.ID)							As NumEntries
			, MAX(x.ID)								As MostRecentID
			, MAX(x.Status_ID)						As MaxStatusID
			, ( SELECT Status_ID 
				FROM SPD_MQComm_Message_Status 
				WHERE ID = MAX(x.ID) )				As MostRecentStatusID
		  FROM SPD_MQComm_Message_Status x
		  GROUP BY x.Message_ID
	    ) ms ON ms.Message_ID = m.ID
	WHERE m.Message_Direction = 0			-- Inbound Messages
		AND ms.MostRecentStatusID = 1		-- With an unprocessed flag 
    ORDER BY m.ID ASC

Print 'Updating Message records with the Message Type and Publish date...'
  OPEN myCursor
  FETCH NEXT FROM myCursor INTO @MessageID, @strXMLDoc
  WHILE @@FETCH_STATUS = 0
  BEGIN
		EXEC sp_xml_preparedocument @intXMLDocHandle OUTPUT, @strXMLDoc
		SELECT
			@XML_HeaderSegment_Source = mikHeader_Source
		  , @XML_HeaderSegment_PublishTime = mikHeader_PublishTime
		FROM OPENXML (@intXMLDocHandle, '/mikMessage')
		WITH (
		   mikHeader_Source varchar(1000) 'mikHeader/Source'
		  ,mikHeader_Contents varchar(1000) 'mikHeader/Contents'
		  ,mikHeader_ThreadID varchar(1000) 'mikHeader/ThreadID'
		  ,mikHeader_PublishTime varchar(1000) 'mikHeader/PublishTime'
		) hdr
		EXEC sp_xml_removedocument @intXMLDocHandle

		-- Normalize the time
		SET @TimeZoneOffset = 0
		SET @intOffset = CharIndex(' +', @XML_HeaderSegment_PublishTime) - 1
		IF @intOffset <= 0
		BEGIN
			SET @intOffset = CharIndex(' -', @XML_HeaderSegment_PublishTime) - 1
		END
		IF @intOffset > 0
		BEGIN
			SET @TimeZoneOffset = (convert(int, substring(@XML_HeaderSegment_PublishTime, @intOffset+2, 3))) * -1
			SET @XML_HeaderSegment_PublishTime = LEFT(@XML_HeaderSegment_PublishTime, @intOffset)
		END
	  	if charindex('.', @XML_HeaderSegment_PublishTime) > 0 and len(@XML_HeaderSegment_PublishTime) - charindex('.', @XML_HeaderSegment_PublishTime) > 3
		begin
	 		set @XML_HeaderSegment_PublishTime = substring(@XML_HeaderSegment_PublishTime, 1,  charindex('.', @XML_HeaderSegment_PublishTime) + 3)
 		end
		SET @tDate = DateAdd(hour, @TimeZoneOffset, convert(datetime,@XML_HeaderSegment_PublishTime))

		INSERT #Messages
			SELECT @MessageID, @strXMLDoc, @tDate
			--SELECT @RecNo as RecNo, @MessageID, @strXMLDoc, @temp, @intOffset, @temp1, @TimeZoneOffset, @tDate

		-- Now save the Process Time with the Message
		UPDATE SPD_MQComm_Message
			SET Message_Source = @XML_HeaderSegment_Source
				, Message_Publish_Time = @tDate
		WHERE ID = @MessageID
		FETCH NEXT FROM myCursor INTO @MessageID, @strXMLDoc
  END
  CLOSE myCursor
  DEALLOCATE myCursor

	-- Now Get any Messages ALREADY PROCESSED that have a PublishTime Time Stamp greater than the Min PublishTime time from Temp table
	-- Inbound messages that have already been processed and are Item Master type.  Need to do them again if its a Item master source
	-- This ensures we have processed them in the correct order.
  IF @AddAllReadyProcessedMessages = 'Y'
  BEGIN	
	  Print ' Adding in Message that need to be reprocessed...'
	  SELECT @MinPublishTime = min(PublishTime) FROM #Messages

	  if @MinPublishTime > '12/1/2018'
	  begin
		  INSERT #Messages
			SELECT M.ID, M.Message_Body, M.Message_Publish_Time
			FROM SPD_MQComm_Message M
				Left Join #Messages tM	ON M.ID = tM.MessageID
			WHERE Message_Publish_Time > @MinPublishTime
				AND Message_Direction = 0	-- inbound message 
				AND Message_Source = 'RIB.etItemsFromRMS'
				AND tM.MessageID is NULL		-- Make sure it's not already selected
	   end
  END

-- *****************************************************************************************************************************************
--									B E G I N      P R O C E S S I N G
-- *****************************************************************************************************************************************
    --SELECT MessageID, MessageBody
    --FROM #Messages
    --ORDER BY PublishTime ASC
  
  Set @MessageCount = (Select count(*) from #Messages )
  IF @MessageCount > 0
	Set @msg = 'P R O C E S S     B E G I N S     - Total Msgs: ' + convert(varchar(20), @MessageCount)
  ELSE
	Set @msg = 'P R O C E S S     C H E C K     - Total Msgs: 0'
  	
  EXEC usp_SPD_MQ_LogMessage @D=@MsgTimeStamp, @M=@msg
  
-- USE TEMP file #Messages to process the messages
  DECLARE myXMLMessages CURSOR FOR 
    SELECT MessageID, MessageBody, RecordNumber		
    FROM #Messages
    ORDER BY MessageID asc
    
  OPEN myXMLMessages
  FETCH NEXT FROM myXMLMessages INTO @MessageID, @strXMLDoc, @MessageRecNo
  WHILE @@FETCH_STATUS = 0
  BEGIN
	SET @UpdateIMFromNI = 0		-- Reset Flag to not update Item Master from New Item for each message
	Set @UpdateBID = 0

    SET @XML_HeaderSegment_Source = NULL
    SET @XML_HeaderSegment_Contents = NULL
    SET @XML_HeaderSegment_ThreadID = NULL
    SET @XML_HeaderSegment_PublishTime = NULL
    SET @XML_DataSegment_ID = NULL
    SET @XML_DataSegment_Type = NULL
    SET @XML_DataSegment_Action = NULL
    SET @XML_DataSegment_LastID = NULL
    SET @XML_DataSegment_PrimaryUPC = NULL
    SET @XML_DataSegment_ErrorMessage1 = NULL
    SET @XML_DataSegment_ErrorMessage2 = NULL
    SET @SPEDYRefString = NULL
    SET @SPEDYBatchID = NULL
    SET @SPEDYBatchTypeID = NULL
    SET @SPEDYItemHeaderID = NULL
    SET @SPEDYItemID = NULL
    SET @VERBSTATEMENTSTRING = NULL
    SET @VERBSTATEMENTSTRING2 = NULL
    SET @SELECTSTATEMENTSTRING = NULL
    SET @PREPARESTRING = NULL
    SET @CLEANUPSTRING = NULL
    SET @WHERECLAUSE1 = NULL
    SET @WHERECLAUSE2 = NULL

    -- ========================================================================
    -- SET STATUS TO PROCESSING
    -- ========================================================================
    INSERT INTO SPD_MQComm_Message_Status (Message_ID, Status_ID) VALUES (@MessageID, 2)
    set @msg = 'Retrieving Message: ' + convert(varchar(20),@MessageID) + ' ( Record No. ' + convert(varchar(20),@MessageRecNo) + ' )'
	Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Retrieving Message: ')
	EXEC usp_SPD_MQ_LogMessage @D=@MsgTimeStamp, @M=@msg

    SET @SUCCESSFLAG = 0
    SET @SUCCESSMSG = NULL
    SET @NumItemsInBatch = 0
    SET @NumCompleteItemsInBatch = 0
    SET @NumParentItemsInBatchNeedingaSKU = 0

    EXEC sp_xml_preparedocument @intXMLDocHandle OUTPUT, @strXMLDoc
    SET @PREPARESTRING = '
      SET NOCOUNT ON
      
      DECLARE @strXMLDoc xml
      DECLARE @intXMLDocHandle int
      
      SELECT @strXMLDoc = m.Message_Body 
      FROM SPD_MQComm_Message m
      WHERE m.ID = ''0' + CONVERT(varchar(20), @MessageID) + '''
      
      EXEC sp_xml_preparedocument @intXMLDocHandle OUTPUT, @strXMLDoc
    '

    SET @CLEANUPSTRING = '
      EXEC sp_xml_removedocument @intXMLDocHandle    
      SET NOCOUNT OFF
    '

    -- ========================================================================
    -- DETERMINE MESSAGE TYPE
    -- ========================================================================
    SELECT
      @XML_HeaderSegment_Source = mikHeader_Source,
      @XML_HeaderSegment_Contents = mikHeader_Contents,
      @XML_HeaderSegment_ThreadID = mikHeader_ThreadID,
      @XML_HeaderSegment_PublishTime = mikHeader_PublishTime
    FROM OPENXML (@intXMLDocHandle, '/mikMessage')
    WITH
    (
       mikHeader_Source varchar(1000) 'mikHeader/Source'
      ,mikHeader_Contents varchar(1000) 'mikHeader/Contents'
      ,mikHeader_ThreadID varchar(1000) 'mikHeader/ThreadID'
      ,mikHeader_PublishTime varchar(1000) 'mikHeader/PublishTime'
    )

    -- ========================================================================
    -- MESSAGE TYPE: ITEM RESPONSE or ITEM UPDATE
    --   - Item Response updates SPEDY and affects spedy workflow
    --   - Item Updates only update the item_master table.
    -- ========================================================================
    
    
    IF ( @XML_HeaderSegment_Source = 'RIB.etItemsFromRMS' )
    BEGIN
      -- Get the identifier string for the referenced spedy transaction
      SELECT 
         @SPEDYRefString = mikData_spedy_item_id
        ,@XML_DataSegment_ID = data.mikDataAttrs_id
        ,@XML_DataSegment_Type = data.mikDataAttrs_type
        ,@XML_DataSegment_Action = data.mikDataAttrs_action
      FROM OPENXML (@intXMLDocHandle, '/mikMessage/mikData[@type=''Sku'']')
      WITH 
      (
         mikDataAttrs_id varchar(1000) '@id'
        ,mikDataAttrs_type varchar(1000) '@type'
        ,mikDataAttrs_action varchar(1000) '@action'
        ,mikData_spedy_item_id varchar(1000) 'spedy_item_id'
      ) data

      SELECT 
         @XML_DataSegment_ID = COALESCE(@XML_DataSegment_ID, upc.mikDataUPCAttrs_id)
        ,@XML_DataSegment_Type = COALESCE(@XML_DataSegment_Type, upc.mikDataUPCAttrs_type)
        ,@XML_DataSegment_Action = COALESCE(@XML_DataSegment_Action, upc.mikDataUPCAttrs_action)
      FROM OPENXML (@intXMLDocHandle, '/mikMessage/mikData[@type=''UPC'']')
      WITH 
      (
         mikDataUPCAttrs_id varchar(1000) '@id'
        ,mikDataUPCAttrs_type varchar(1000) '@type'
        ,mikDataUPCAttrs_action varchar(1000) '@action'
        ,mikDataUPC_upc varchar(1000) 'upc'
        ,mikDataUPC_item varchar(1000) 'item'
        ,mikDataUPC_primary_ref_item_ind varchar(1000) 'primary_ref_item_ind'
        ,mikDataUPC_item_number_type varchar(1000) 'item_number_type'
        ,mikDataUPC_upc_desc varchar(1000) 'upc_desc'
      ) upc
      
      SET @VERBSTATEMENTSTRING = NULL
      SET @VERBSTATEMENTSTRING2 = NULL
      SET @SELECTSTATEMENTSTRING = NULL     

      PRINT '@XML_HeaderSegment_Source: ' + @XML_HeaderSegment_Source 
      PRINT '@SPEDYRefString: ' + COALESCE(@SPEDYRefString, 'n\a')
      PRINT '@XML_DataSegment_ID: ' + COALESCE(@XML_DataSegment_ID , 'n\a')
      PRINT '@XML_DataSegment_Type: ' + COALESCE(@XML_DataSegment_Type , 'n\a')
      PRINT '@XML_DataSegment_Action: ' +COALESCE( @XML_DataSegment_Action , 'n\a')

      -- + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +
      -- PROCESS ITEM RESPONSE MESSAGE
      -- + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +
      IF ( NULLIF(@SPEDYRefString, '') IS NOT NULL )
      BEGIN
      
        -- this is a New Item response message
        IF (@SPEDYEnvVars_Test_Mode = 1) PRINT @msg
        IF (@SPEDYEnvVars_Test_Mode = 1) PRINT '@SPEDYRefString: ' + @SPEDYRefString  

        -- Split Batch from Item_ID
        SET @SPEDYBatchID = 0
        SET @SPEDYBatchTypeID = 0
        SET @SPEDYItemID = 0

        IF (LEN(@SPEDYRefString) > 0)
        BEGIN
			IF (CHARINDEX('.', @SPEDYRefString) > 0)
			BEGIN
				IF (ISNUMERIC(SUBSTRING(@SPEDYRefString, 0, CHARINDEX('.', @SPEDYRefString))) = 1)
				BEGIN
					SET @SPEDYBatchID = SUBSTRING(@SPEDYRefString, 0, CHARINDEX('.', @SPEDYRefString))
				END        
			END
        END
        
        -- Make sure that this message is for an active, uncompleted batch.
        -- SPEDYBatchIDs are only associated with New Item Batches (Item originiated in SPEDY as opposed to originating in RMS)
        IF (@SPEDYBatchID > 0)
        BEGIN
			SET @WorkflowID = 0
			SET @WorkflowID = coalesce(
				(	SELECT WS.Workflow_ID
					FROM SPD_Batch B
						join SPD_Workflow_Stage ws on B.workflow_Stage_ID = ws.ID
					WHERE B.ID = @SPEDYBatchID
						and B.[enabled] = 1			-- Must be an enabled batch
						and ws.[Stage_Type_id] <> 4	-- Must not be a completed batch
				), 0 )
        END

        IF ( @SPEDYBatchID > 0 and @WorkflowID = 1 )
        BEGIN
          -- Lookup Batch and determine if Import or Domestic
          -- Domestic Batch = 1
          -- Import Batch = 2
	
			EXEC usp_SPD_MQ_LogMessage @D=@MsgTimeStamp, @M='Processing New Item Response Message'
			SELECT @SPEDYBatchTypeID = COALESCE(Batch_Type_ID, 0) FROM SPD_Batch WHERE ID = @SPEDYBatchID

			-- Indicate that this is a New Item Response Message
			UPDATE SPD_MQComm_Message
			SET Message_Type_ID = 2, SPD_Batch_ID = @SPEDYBatchID
			WHERE ID = @MessageID

			IF ( @SPEDYBatchTypeID > 0)
			BEGIN
				IF ( ISNUMERIC(SUBSTRING(@SPEDYRefString, CHARINDEX('.', @SPEDYRefString)+1, LEN(@SPEDYRefString) ) ) = 1)
				BEGIN
					SET @SPEDYItemID = SUBSTRING(@SPEDYRefString, CHARINDEX('.', @SPEDYRefString)+1, LEN(@SPEDYRefString) )
					SET @SPEDYItemID = COALESCE(@SPEDYItemID, 0)

					SELECT @SPEDYItemHeaderID = h.ID 
					FROM SPD_Item_Headers h
					INNER JOIN SPD_Items i ON i.Item_Header_ID = h.ID
					WHERE i.ID = @SPEDYItemID

					SET @SPEDYItemHeaderID = COALESCE(@SPEDYItemHeaderID, 0)
				END
			END
        END

		-- FJL ONLY DO THIS STUFF if WORKFLOW ID=1 (an uncompleted New Item message)
		-- Convert the XML message to a New Item Response record (SKU, Vendor, UPC, etc info)
        IF (@SPEDYBatchID > 0 and @WorkflowID = 1)
        BEGIN
			SET @SELECTSTATEMENTSTRING = '
			FROM OPENXML (@intXMLDocHandle, ''/mikMessage'')
			WITH
			(
			   mikHeader_Source varchar(1000) ''mikHeader/Source''
			  ,mikHeader_Contents varchar(1000) ''mikHeader/Contents''
			  ,mikHeader_ThreadID varchar(1000) ''mikHeader/ThreadID''
			  ,mikHeader_PublishTime varchar(1000) ''mikHeader/PublishTime''
			) hdr
			INNER JOIN (
			  SELECT *
			  FROM OPENXML (@intXMLDocHandle, ''/mikMessage/mikData[@type=''''Sku'''']'')
			  WITH
			  (
				 mikDataAttrs_ID varchar(1000) ''@id''
				,mikDataAttrs_Type varchar(1000) ''@type''
				,mikDataAttrs_Action varchar(1000) ''@action''
				,mikData_item varchar(1000) ''item''
				,mikData_spedy_item_id varchar(1000) ''spedy_item_id''
				,mikData_item_number_type varchar(1000) ''item_number_type''
				,mikData_pack_ind varchar(1000) ''pack_ind''
				,mikData_item_level varchar(1000) ''item_level''
				,mikData_tran_level varchar(1000) ''tran_level''
				,mikData_dept varchar(1000) ''dept''
				,mikData_dept_name varchar(1000) ''dept_name''
				,mikData_class varchar(1000) ''class''
				,mikData_class_name varchar(1000) ''class_name''
				,mikData_subclass varchar(1000) ''subclass''
				,mikData_sub_name varchar(1000) ''sub_name''
				,mikData_status varchar(1000) ''status''
				,mikData_item_desc varchar(1000) ''item_desc''
				,mikData_short_desc varchar(1000) ''short_desc''
				,mikData_desc_up varchar(1000) ''desc_up''
				,mikData_primary_ref_item_ind varchar(1000) ''primary_ref_item_ind''
				,mikData_retail_zone_group_id varchar(1000) ''retail_zone_group_id''
				,mikData_cost_zone_group_id varchar(1000) ''cost_zone_group_id''
				,mikData_standard_uom varchar(1000) ''standard_uom''
				,mikData_merchandise_ind varchar(1000) ''merchandise_ind''
				,mikData_store_ord_mult varchar(1000) ''store_ord_mult''
				,mikData_forecast_ind varchar(1000) ''forecast_ind''
				,mikData_mfg_rec_retail varchar(1000) ''mfg_rec_retail''
				,mikData_catch_weight_ind varchar(1000) ''catch_weight_ind''
				,mikData_const_dimen_ind varchar(1000) ''const_dimen_ind''
				,mikData_simple_pack_ind varchar(1000) ''simple_pack_ind''
				,mikData_contains_inner_ind varchar(1000) ''contains_inner_ind''
				,mikData_sellable_ind varchar(1000) ''sellable_ind''
				,mikData_orderable_ind varchar(1000) ''orderable_ind''
				,mikData_unit_retail varchar(1000) ''unit_retail''
				,mikData_gift_wrap_ind varchar(1000) ''gift_wrap_ind''
				,mikData_ship_alone_ind varchar(1000) ''ship_alone_ind''
				,mikData_item_xform_ind varchar(1000) ''item_xform_ind''
				,mikData_inventory_ind varchar(1000) ''inventory_ind''
				,mikData_item_type_attr varchar(1000) ''item_type_attr''
				,mikData_stock_category varchar(1000) ''stock_category''
				,mikData_sku_group varchar(1000) ''sku_group''
				,mikData_hyb_cnv_date varchar(1000) ''hyb_cnv_date''
				,mikData_repl_ind varchar(1000) ''repl_ind''
				,mikData_pi_ind varchar(1000) ''pi_ind''
				,mikData_store_orderable_ind varchar(1000) ''store_orderable_ind''
				,mikData_inv_control varchar(1000) ''inv_control''
				,mikData_discountable_ind varchar(1000) ''discountable_ind''
				,mikData_age_ver_req_ind varchar(1000) ''age_ver_req_ind''
				,mikData_price_prompt_ind varchar(1000) ''price_prompt_ind''
				,mikData_store_level_default varchar(1000) ''store_level_default''
				,mikData_pack_item_type varchar(1000) ''pack_item_type''
				,mikData_hazmat_ind varchar(1000) ''hazmat_ind''
				,mikData_flammable_ind varchar(1000) ''flammable_ind''
				,mikData_store_sup_zone_group varchar(1000) ''store_sup_zone_group''
				,mikData_wh_sup_zone_group varchar(1000) ''wh_sup_zone_group''
				,mikData_store_order_max_qty varchar(1000) ''store_order_max_qty''
				,mikData_min_order_qty varchar(1000) ''min_order_qty''
				,mikData_create_datetime varchar(1000) ''create_datetime''
				,mikData_last_update_datetime varchar(1000) ''last_update_datetime''
				,mikData_last_update_id varchar(1000) ''last_update_id''
				,mikData_prmy_supplier varchar(1000) ''prmy_supplier''
				,mikData_prmy_supp_country varchar(1000) ''prmy_supp_country''
				,mikData_prmy_supp_inner_pack_size varchar(1000) ''prmy_supp_inner_pack_size''
				,mikData_prmy_ref_item_no varchar(1000) ''prmy_ref_item_no''
				,mikData_prmy_ref_item_type varchar(1000) ''prmy_ref_item_type''
				,mikData_unit_cost varchar(1000) ''unit_cost''
				,mikData_InnerGTIN varchar(1000) ''innergtin''
				,mikData_CaseGTIN varchar(1000) ''casegtin''
			  )
			) data ON data.mikData_spedy_item_id IS NOT NULL

			--* UPC
			LEFT OUTER JOIN (
			  SELECT TOP 1 *
			  FROM OPENXML (@intXMLDocHandle, ''/mikMessage/mikData[@type=''''UPC'''']'')
			  WITH
			  (
				 mikDataUPCAttrs_ID varchar(1000) ''@id''
				,mikDataUPCAttrs_Type varchar(1000) ''@type''
				,mikDataUPCAttrs_Action varchar(1000) ''@action''
				,mikDataUPC_upc varchar(1000) ''upc''
				,mikDataUPC_item varchar(1000) ''item''
				,mikDataUPC_primary_ref_item_ind varchar(1000) ''primary_ref_item_ind''
				,mikDataUPC_item_number_type varchar(1000) ''item_number_type''
				,mikDataUPC_upc_desc varchar(1000) ''upc_desc''
			  )
			) upc ON 1 = 1

			--* SkuSupplier
			LEFT OUTER JOIN (
			  SELECT TOP 1 *
			  FROM OPENXML (@intXMLDocHandle, ''/mikMessage/mikData[@type=''''SkuSupplier'''']'')
			  WITH
			  (
				 mikDataSkuSupplierAttrs_ID varchar(1000) ''@id''
				,mikDataSkuSupplierAttrs_Type varchar(1000) ''@type''
				,mikDataSkuSupplierAttrs_Action varchar(1000) ''@action''
				,mikDataSkuSupplier_item varchar(1000) ''item''
				,mikDataSkuSupplier_supplier varchar(1000) ''supplier''
				,mikDataSkuSupplier_primary_supp_ind varchar(1000) ''primary_supp_ind''
				,mikDataSkuSupplier_vpn varchar(1000) ''vpn''
				,mikDataSkuSupplier_pallet_name varchar(1000) ''pallet_name''
				,mikDataSkuSupplier_case_name varchar(1000) ''case_name''
				,mikDataSkuSupplier_inner_name varchar(1000) ''inner_name''
				,mikDataSkuSupplier_direct_ship_ind varchar(1000) ''direct_ship_ind''
				,mikDataSkuSupplier_origin_country_id varchar(1000) ''origin_country_id''
				,mikDataSkuSupplier_primary_country_ind varchar(1000) ''primary_country_ind''
				,mikDataSkuSupplier_unit_cost varchar(1000) ''unit_cost''
				,mikDataSkuSupplier_supp_pack_size varchar(1000) ''supp_pack_size''
				,mikDataSkuSupplier_inner_pack_size varchar(1000) ''inner_pack_size''
				,mikDataSkuSupplier_round_lvl varchar(1000) ''round_lvl''
				,mikDataSkuSupplier_packing_method varchar(1000) ''packing_method''
				,mikDataSkuSupplier_default_uop varchar(1000) ''default_uop''
				,mikDataSkuSupplier_ti varchar(1000) ''ti''
				,mikDataSkuSupplier_hi varchar(1000) ''hi''
				,mikDataSkuSupplier_cost_uom varchar(1000) ''cost_uom''
			  )
			) supplier ON 1 = 1

			--* Zone 1: Base Retail Zone
			LEFT OUTER JOIN (
			  SELECT TOP 1 *
			  FROM OPENXML (@intXMLDocHandle, ''/mikMessage/mikData[@type=''''SkuZonePrice'''' and zone_id = ''''1'''']'')
			  WITH
			  (
				 mikDataSkuZonePriceAttrs_ID varchar(1000) ''@id''
				,mikDataSkuZonePriceAttrs_Type varchar(1000) ''@type''
				,mikDataSkuZonePriceAttrs_Action varchar(1000) ''@action''
				,mikDataSkuZonePrice_item_zone_price_id varchar(1000) ''item_zone_price_id''
				,mikDataSkuZonePrice_item varchar(1000) ''item''
				,mikDataSkuZonePrice_zone_id varchar(1000) ''zone_id''
				,mikDataSkuZonePrice_standard_retail varchar(1000) ''standard_retail''
				,mikDataSkuZonePrice_standard_retail_currency varchar(1000) ''standard_retail_currency''
				,mikDataSkuZonePrice_selling_retail varchar(1000) ''selling_retail''
				,mikDataSkuZonePrice_selling_retail_currency varchar(1000) ''selling_retail_currency''
				,mikDataSkuZonePrice_multi_unit_retail_currency varchar(1000) ''multi_unit_retail_currency''
				,mikDataSkuZonePrice_zone_group_id varchar(1000) ''zone_group_id''
			  )
			) priceZone1 ON 1 = 1

			--* Zone 2: Central Retail Zone
			LEFT OUTER JOIN (
			  SELECT TOP 1 *
			  FROM OPENXML (@intXMLDocHandle, ''/mikMessage/mikData[@type=''''SkuZonePrice'''' and zone_id = ''''2'''']'')
			  WITH
			  (
				 mikDataSkuZonePriceAttrs_ID varchar(1000) ''@id''
				,mikDataSkuZonePriceAttrs_Type varchar(1000) ''@type''
				,mikDataSkuZonePriceAttrs_Action varchar(1000) ''@action''
				,mikDataSkuZonePrice_item_zone_price_id varchar(1000) ''item_zone_price_id''
				,mikDataSkuZonePrice_item varchar(1000) ''item''
				,mikDataSkuZonePrice_zone_id varchar(1000) ''zone_id''
				,mikDataSkuZonePrice_standard_retail varchar(1000) ''standard_retail''
				,mikDataSkuZonePrice_standard_retail_currency varchar(1000) ''standard_retail_currency''
				,mikDataSkuZonePrice_selling_retail varchar(1000) ''selling_retail''
				,mikDataSkuZonePrice_selling_retail_currency varchar(1000) ''selling_retail_currency''
				,mikDataSkuZonePrice_multi_unit_retail_currency varchar(1000) ''multi_unit_retail_currency''
				,mikDataSkuZonePrice_zone_group_id varchar(1000) ''zone_group_id''
			  )
			) priceZone2 ON 1 = 1

			--* Zone 3: Test Retail Zone
			LEFT OUTER JOIN (
			  SELECT TOP 1 *
			  FROM OPENXML (@intXMLDocHandle, ''/mikMessage/mikData[@type=''''SkuZonePrice'''' and zone_id = ''''3'''']'')
			  WITH
			  (
				 mikDataSkuZonePriceAttrs_ID varchar(1000) ''@id''
				,mikDataSkuZonePriceAttrs_Type varchar(1000) ''@type''
				,mikDataSkuZonePriceAttrs_Action varchar(1000) ''@action''
				,mikDataSkuZonePrice_item_zone_price_id varchar(1000) ''item_zone_price_id''
				,mikDataSkuZonePrice_item varchar(1000) ''item''
				,mikDataSkuZonePrice_zone_id varchar(1000) ''zone_id''
				,mikDataSkuZonePrice_standard_retail varchar(1000) ''standard_retail''
				,mikDataSkuZonePrice_standard_retail_currency varchar(1000) ''standard_retail_currency''
				,mikDataSkuZonePrice_selling_retail varchar(1000) ''selling_retail''
				,mikDataSkuZonePrice_selling_retail_currency varchar(1000) ''selling_retail_currency''
				,mikDataSkuZonePrice_multi_unit_retail_currency varchar(1000) ''multi_unit_retail_currency''
				,mikDataSkuZonePrice_zone_group_id varchar(1000) ''zone_group_id''
			  )
			) priceZone3 ON 1 = 1

			--* Zone 4: Alaska Retail Zone
			LEFT OUTER JOIN (
			  SELECT TOP 1 *
			  FROM OPENXML (@intXMLDocHandle, ''/mikMessage/mikData[@type=''''SkuZonePrice'''' and zone_id = ''''4'''']'')
			  WITH
			  (
				 mikDataSkuZonePriceAttrs_ID varchar(1000) ''@id''
				,mikDataSkuZonePriceAttrs_Type varchar(1000) ''@type''
				,mikDataSkuZonePriceAttrs_Action varchar(1000) ''@action''
				,mikDataSkuZonePrice_item_zone_price_id varchar(1000) ''item_zone_price_id''
				,mikDataSkuZonePrice_item varchar(1000) ''item''
				,mikDataSkuZonePrice_zone_id varchar(1000) ''zone_id''
				,mikDataSkuZonePrice_standard_retail varchar(1000) ''standard_retail''
				,mikDataSkuZonePrice_standard_retail_currency varchar(1000) ''standard_retail_currency''
				,mikDataSkuZonePrice_selling_retail varchar(1000) ''selling_retail''
				,mikDataSkuZonePrice_selling_retail_currency varchar(1000) ''selling_retail_currency''
				,mikDataSkuZonePrice_multi_unit_retail_currency varchar(1000) ''multi_unit_retail_currency''
				,mikDataSkuZonePrice_zone_group_id varchar(1000) ''zone_group_id''
			  )
			) priceZone4 ON 1 = 1

			--* Zone 5: Canada Retail Zone
			LEFT OUTER JOIN (
			  SELECT TOP 1 *
			  FROM OPENXML (@intXMLDocHandle, ''/mikMessage/mikData[@type=''''SkuZonePrice'''' and zone_id = ''''5'''']'')
			  WITH
			  (
				 mikDataSkuZonePriceAttrs_ID varchar(1000) ''@id''
				,mikDataSkuZonePriceAttrs_Type varchar(1000) ''@type''
				,mikDataSkuZonePriceAttrs_Action varchar(1000) ''@action''
				,mikDataSkuZonePrice_item_zone_price_id varchar(1000) ''item_zone_price_id''
				,mikDataSkuZonePrice_item varchar(1000) ''item''
				,mikDataSkuZonePrice_zone_id varchar(1000) ''zone_id''
				,mikDataSkuZonePrice_standard_retail varchar(1000) ''standard_retail''
				,mikDataSkuZonePrice_standard_retail_currency varchar(1000) ''standard_retail_currency''
				,mikDataSkuZonePrice_selling_retail varchar(1000) ''selling_retail''
				,mikDataSkuZonePrice_selling_retail_currency varchar(1000) ''selling_retail_currency''
				,mikDataSkuZonePrice_multi_unit_retail_currency varchar(1000) ''multi_unit_retail_currency''
				,mikDataSkuZonePrice_zone_group_id varchar(1000) ''zone_group_id''
			  )
			) priceZone5 ON 1 = 1

			--* Zone 6: 0-9 Retail Zone
			LEFT OUTER JOIN (
			  SELECT TOP 1 *
			  FROM OPENXML (@intXMLDocHandle, ''/mikMessage/mikData[@type=''''SkuZonePrice'''' and zone_id = ''''6'''']'')
			  WITH
			  (
				 mikDataSkuZonePriceAttrs_ID varchar(1000) ''@id''
				,mikDataSkuZonePriceAttrs_Type varchar(1000) ''@type''
				,mikDataSkuZonePriceAttrs_Action varchar(1000) ''@action''
				,mikDataSkuZonePrice_item_zone_price_id varchar(1000) ''item_zone_price_id''
				,mikDataSkuZonePrice_item varchar(1000) ''item''
				,mikDataSkuZonePrice_zone_id varchar(1000) ''zone_id''
				,mikDataSkuZonePrice_standard_retail varchar(1000) ''standard_retail''
				,mikDataSkuZonePrice_standard_retail_currency varchar(1000) ''standard_retail_currency''
				,mikDataSkuZonePrice_selling_retail varchar(1000) ''selling_retail''
				,mikDataSkuZonePrice_selling_retail_currency varchar(1000) ''selling_retail_currency''
				,mikDataSkuZonePrice_multi_unit_retail_currency varchar(1000) ''multi_unit_retail_currency''
				,mikDataSkuZonePrice_zone_group_id varchar(1000) ''zone_group_id''
			  )
			) priceZone6 ON 1 = 1

			--* Zone 7: California Retail Zone
			LEFT OUTER JOIN (
			  SELECT TOP 1 *
			  FROM OPENXML (@intXMLDocHandle, ''/mikMessage/mikData[@type=''''SkuZonePrice'''' and zone_id = ''''7'''']'')
			  WITH
			  (
				 mikDataSkuZonePriceAttrs_ID varchar(1000) ''@id''
				,mikDataSkuZonePriceAttrs_Type varchar(1000) ''@type''
				,mikDataSkuZonePriceAttrs_Action varchar(1000) ''@action''
				,mikDataSkuZonePrice_item_zone_price_id varchar(1000) ''item_zone_price_id''
				,mikDataSkuZonePrice_item varchar(1000) ''item''
				,mikDataSkuZonePrice_zone_id varchar(1000) ''zone_id''
				,mikDataSkuZonePrice_standard_retail varchar(1000) ''standard_retail''
				,mikDataSkuZonePrice_standard_retail_currency varchar(1000) ''standard_retail_currency''
				,mikDataSkuZonePrice_selling_retail varchar(1000) ''selling_retail''
				,mikDataSkuZonePrice_selling_retail_currency varchar(1000) ''selling_retail_currency''
				,mikDataSkuZonePrice_multi_unit_retail_currency varchar(1000) ''multi_unit_retail_currency''
				,mikDataSkuZonePrice_zone_group_id varchar(1000) ''zone_group_id''
			  )
			) priceZone7 ON 1 = 1

			--* Zone 8: VILLAGE CRFT Retail Zone
			LEFT OUTER JOIN (
			  SELECT TOP 1 *
			  FROM OPENXML (@intXMLDocHandle, ''/mikMessage/mikData[@type=''''SkuZonePrice'''' and zone_id = ''''8'''']'')
			  WITH
			  (
				 mikDataSkuZonePriceAttrs_ID varchar(1000) ''@id''
				,mikDataSkuZonePriceAttrs_Type varchar(1000) ''@type''
				,mikDataSkuZonePriceAttrs_Action varchar(1000) ''@action''
				,mikDataSkuZonePrice_item_zone_price_id varchar(1000) ''item_zone_price_id''
				,mikDataSkuZonePrice_item varchar(1000) ''item''
				,mikDataSkuZonePrice_zone_id varchar(1000) ''zone_id''
				,mikDataSkuZonePrice_standard_retail varchar(1000) ''standard_retail''
				,mikDataSkuZonePrice_standard_retail_currency varchar(1000) ''standard_retail_currency''
				,mikDataSkuZonePrice_selling_retail varchar(1000) ''selling_retail''
				,mikDataSkuZonePrice_selling_retail_currency varchar(1000) ''selling_retail_currency''
				,mikDataSkuZonePrice_multi_unit_retail_currency varchar(1000) ''multi_unit_retail_currency''
				,mikDataSkuZonePrice_zone_group_id varchar(1000) ''zone_group_id''
			  )
			) priceZone8 ON 1 = 1
			'

			-- Lookup this item to see if it exists in the specified batch
			--  If Domestic...
			IF ( @SPEDYBatchTypeID = 1 )
			BEGIN
			  SET @VERBSTATEMENTSTRING = '
			  UPDATE SPD_Items
				SET
				-- ! [add_change] = data.mikData_add_change
				-- ! [pack_item_indicator] = data.mikData_pi_ind
				 [michaels_sku] = data.mikData_item
				,[vendor_upc] = data.mikData_prmy_ref_item_no
				,[vendor_inner_gtin]= data.mikData_InnerGTIN
				,[vendor_case_gtin]= data.mikData_CaseGTIN
				-- ! ,[class_num] = data.mikData_class
				-- ! ,[sub_class_num] = data.mikData_subclass
				-- ? ,[vendor_style_num] = mikData_vendor_style_num
				-- ! ,[item_desc] = data.mikData_item_desc
				-- ? ,[hybrid_type] = mikData_hybrid_type
				-- ? ,[hybrid_source_dc] = mikData_hybrid_source_dc
				-- ! ,[hybrid_lead_time] = mikData_hybrid_lead_time
				-- ! ,[hybrid_conversion_date] = mikData_hybrid_conversion_date
				-- ! ,[eaches_master_case] = supplier.mikDataSkuSupplier_supp_pack_size
				-- ! ,[eaches_inner_pack] = supplier.mikDataSkuSupplier_inner_pack_size
				-- ! ,[pre_priced] = mikData_pre_priced
				-- ! ,[pre_priced_uda] = mikData_pre_priced_uda
				-- ! ,[us_cost] = data.mikData_unit_cost
				-- ! ,[canada_cost] = data.mikData_unit_cost
				-- ! ,[base_retail] = priceZone1.mikDataSkuZonePrice_standard_retail
				-- ! ,[central_retail] = priceZone2.mikDataSkuZonePrice_standard_retail
				-- ! ,[test_retail] = priceZone3.mikDataSkuZonePrice_standard_retail
				-- ! ,[alaska_retail] = priceZone4.mikDataSkuZonePrice_standard_retail
				-- ! ,[canada_retail] = priceZone5.mikDataSkuZonePrice_standard_retail
				-- ! ,[zero_nine_retail] = priceZone6.mikDataSkuZonePrice_standard_retail
				-- ! ,[california_retail] = priceZone7.mikDataSkuZonePrice_standard_retail
				-- ! ,[village_craft_retail] = priceZone8.mikDataSkuZonePrice_standard_retail
				-- ! ,[pog_setup_per_store] = mikData_pog_setup_per_store
				-- ! ,[pog_max_qty] = mikData_pog_max_qty
				-- ! ,[projected_unit_sales] = mikData_projected_unit_sales
				-- ? ,[inner_case_height] = mikData_inner_case_height
				-- ? ,[inner_case_width] = mikData_inner_case_width
				-- ? ,[inner_case_length] = mikData_inner_case_length
				-- ? ,[inner_case_weight] = mikData_inner_case_weight
				-- ? ,[inner_case_pack_cube] = mikData_inner_case_pack_cube
				-- ? ,[master_case_height] = mikData_master_case_height
				-- ? ,[master_case_width] = mikData_master_case_width
				-- ? ,[master_case_length] = mikData_master_case_length
				-- ? ,[master_case_weight] = mikData_master_case_weight
				-- ? ,[master_case_pack_cube] = mikData_master_case_pack_cube
				-- ! ,[country_of_origin] = data.mikData_prmy_supp_country
				-- ! ,[tax_uda] = mikData_tax_uda
				-- ! ,[tax_value_uda] = mikData_tax_value_uda
				-- ! ,[hazardous] = data.mikData_hazmat_ind
				-- ! ,[hazardous_flammable] = data.mikData_flammable_ind
				-- ! ,[hazardous_container_type] = mikData_hazardous_container_type
				-- ! ,[hazardous_container_size] = mikData_hazardous_container_size
				-- ! ,[hazardous_msds_uom] = mikData_hazardous_msds_uom
				-- ! ,[hazardous_manufacturer_name] = mikData_hazardous_manufacturer_name
				-- ! ,[hazardous_manufacturer_city] = mikData_hazardous_manufacturer_city
				-- ! ,[hazardous_manufacturer_state] = mikData_hazardous_manufacturer_state
				-- ! ,[hazardous_manufacturer_phone] = mikData_hazardous_manufacturer_phone
				-- ! ,[hazardous_manufacturer_country] = mikData_hazardous_manufacturer_country
				,Date_Last_Modified = getdate()
				,Update_User_ID = 0
			  '

			  SET @VERBSTATEMENTSTRING2 = '
			  UPDATE SPD_Item_Headers
				SET
				-- !  [us_vendor_num] = data.mikData_prmy_supplier
				-- ! ,[canadian_vendor_num] = data.mikData_prmy_supplier
				-- ! ,[department_num] = data.mikData_dept
				-- ! ,[stock_category] = data.mikData_stock_category
				-- ! ,[canada_stock_category] = data.mikData_stock_category
				-- ? ,[item_type] = mikdata_item_type
				-- ? ,[item_type_attribute] = mikdata_item_type_attribute
				-- ! ,[allow_store_order] = mikdata_allow_store_order
				-- ! ,[perpetual_inventory] = data.mikData_pi_ind
				-- ! ,[inventory_control] = data.mikData_inv_control
				-- ? ,[freight_terms] = mikdata_freight_terms
				-- ! ,[auto_replenish] = data.mikData_repl_ind
				-- ! ,[sku_group] = data.mikData_sku_group
				-- ! ,[store_supplier_zone_group] = data.mikData_store_sup_zone_group
				-- ! ,[whs_supplier_zone_group] = data.mikData_wh_sup_zone_group
				-- ! ,[rms_sellable] = data.mikData_sellable_ind
				-- ! ,[rms_orderable] = data.mikData_orderable_ind
				-- ! ,[rms_inventory] = data.mikData_inventory_ind
				 Date_Last_Modified = getdate()
				,Update_User_ID = 0
			  '
			END
	       
			--  If Import...
			IF ( @SPEDYBatchTypeID = 2 )
			BEGIN
			  SET @VERBSTATEMENTSTRING = '
			  UPDATE SPD_Import_Items
				SET
				-- !  [skugroup] = data.mikData_sku_group
				-- ! ,[dept] = data.mikData_dept
				-- ! ,[class] = data.mikData_class
				-- ! ,[subclass] = data.mikData_subclass
				 [michaelssku] = data.mikData_item
				,[primaryupc] = data.mikData_prmy_ref_item_no
				,[innergtin] = data.mikData_InnerGTIN
				,[casegtin] = data.mikData_CaseGTIN
				-- ! ,[additionalupc1] = mikData_additionalupc1
				-- ! ,[additionalupc2] = mikData_additionalupc2
				-- ! ,[additionalupc3] = mikData_additionalupc3
				-- ! ,[additionalupc4] = mikData_additionalupc4
				-- ! ,[additionalupc5] = mikData_additionalupc5
				-- ! ,[additionalupc6] = mikData_additionalupc6
				-- ! ,[additionalupc7] = mikData_additionalupc7
				-- ! ,[additionalupc8] = mikData_additionalupc8
				-- ! ,[packsku] = mikData_packsku
				-- ! ,[planogramname] = mikData_planogramname
				-- ! ,[vendornumber] = data.mikData_prmy_supplier
				-- ! ,[vendorrank] = mikData_vendorrank
				-- ! ,[itemtask] = data.mikData_add_change
				-- ! ,[description] = data.mikData_item_desc
				-- ! ,[paymentterms] = mikData_paymentterms
				-- ! ,[days] = mikData_days
				-- ! ,[vendorminorderamount] = mikData_vendorminorderamount
				-- ! ,[vendorname] = mikData_vendorname
				-- ! ,[vendoraddress1] = mikData_vendoraddress1
				-- ! ,[vendoraddress2] = mikData_vendoraddress2
				-- ! ,[vendoraddress3] = mikData_vendoraddress3
				-- ! ,[vendoraddress4] = mikData_vendoraddress4
				-- ! ,[vendorcontactname] = mikData_vendorcontactname
				-- ! ,[vendorcontactphone] = mikData_vendorcontactphone
				-- ! ,[vendorcontactemail] = mikData_vendorcontactemail
				-- ! ,[vendorcontactfax] = mikData_vendorcontactfax
				-- ! ,[manufacturename] = mikData_manufacturename
				-- ! ,[manufactureaddress1] = mikData_manufactureaddress1
				-- ! ,[manufactureaddress2] = mikData_manufactureaddress2
				-- ! ,[manufacturecontact] = mikData_manufacturecontact
				-- ! ,[manufacturephone] = mikData_manufacturephone
				-- ! ,[manufactureemail] = mikData_manufactureemail
				-- ! ,[manufacturefax] = mikData_manufacturefax
				-- ! ,[agentcontact] = mikData_agentcontact
				-- ! ,[agentphone] = mikData_agentphone
				-- ! ,[agentemail] = mikData_agentemail
				-- ! ,[agentfax] = mikData_agentfax
				-- ! ,[vendorstylenumber] = mikData_vendorstylenumber
				-- ! ,[harmonizedcodenumber] = mikData_harmonizedcodenumber
				-- ! ,[detailinvoicecustomsdesc] = mikData_detailinvoicecustomsdesc
				-- ! ,[componentmaterialbreakdown] = mikData_componentmaterialbreakdown
				-- ! ,[componentconstructionmethod] = mikData_componentconstructionmethod
				-- ! ,[individualitempackaging] = mikData_individualitempackaging
				-- ! ,[eachinsidemastercasebox] = mikData_eachinsidemastercasebox
				-- ! ,[eachinsideinnerpack] = mikData_eachinsideinnerpack
				-- ! ,[eachpiecenetweightlbsperounce] = mikData_eachpiecenetweightlbsperounce
				-- ! ,[reshippableinnercartonlength] = mikData_reshippableinnercartonlength
				-- ! ,[reshippableinnercartonwidth] = mikData_reshippableinnercartonwidth
				-- ! ,[reshippableinnercartonheight] = mikData_reshippableinnercartonheight
				-- ! ,[mastercartondimensionslength] = mikData_mastercartondimensionslength
				-- ! ,[mastercartondimensionswidth] = mikData_mastercartondimensionswidth
				-- ! ,[mastercartondimensionsheight] = mikData_mastercartondimensionsheight
				-- ! ,[cubicfeetpermastercarton] = mikData_cubicfeetpermastercarton
				-- ! ,[weightmastercarton] = mikData_weightmastercarton
				-- ! ,[cubicfeetperinnercarton] = mikData_cubicfeetperinnercarton
				-- ! ,[fobshippingpoint] = mikData_fobshippingpoint
				-- ! ,[dutypercent] = mikData_dutypercent
				-- ! ,[dutyamount] = mikData_dutyamount
				-- ! ,[additionaldutycomment] = mikData_additionaldutycomment
				-- ! ,[additionaldutyamount] = mikData_additionaldutyamount
				-- ! ,[oceanfreightamount] = mikData_oceanfreightamount
				-- ! ,[oceanfreightcomputedamount] = mikData_oceanfreightcomputedamount
				-- ! ,[agentcommissionpercent] = mikData_agentcommissionpercent
				-- ! ,[agentcommissionamount] = mikData_agentcommissionamount
				-- ! ,[otherimportcostspercent] = mikData_otherimportcostspercent
				-- ! ,[otherimportcostsamount] = mikData_otherimportcostsamount
				-- ! ,[packagingcostamount] = mikData_packagingcostamount
				-- ! ,[totalimportburden] = mikData_totalimportburden
				-- ! ,[warehouselandedcost] = mikData_warehouselandedcost
				-- ! ,[purchaseorderissuedto] = mikData_purchaseorderissuedto
				-- ! ,[shippingpoint] = mikData_shippingpoint
				-- ! ,[countryoforigin] = mikData_countryoforigin
				-- ! ,[vendorcomments] = mikData_vendorcomments
				-- ! ,[stockcategory] = mikData_stockcategory
				-- ! ,[freightterms] = mikData_freightterms
				-- ! ,[itemtype] = mikData_itemtype
				-- ! ,[packitemindicator] = mikData_packitemindicator
				-- ! ,[itemtypeattribute] = mikData_itemtypeattribute
				-- ! ,[allowstoreorder] = mikData_allowstoreorder
				-- ! ,[inventorycontrol] = mikData_inventorycontrol
				-- ! ,[autoreplenish] = mikData_autoreplenish
				-- ! ,[prepriced] = mikData_prepriced
				-- ! ,[taxuda] = mikData_taxuda
				-- ! ,[prepriceduda] = mikData_prepriceduda
				-- ! ,[taxvalueuda] = mikData_taxvalueuda
				-- ! ,[hybridtype] = mikData_hybridtype
				-- ! ,[sourcingdc] = mikData_sourcingdc
				-- ! ,[leadtime] = mikData_leadtime
				-- ! ,[conversiondate] = mikData_conversiondate
				-- ! ,[storesuppzonegrp] = mikData_storesuppzonegrp
				-- ! ,[whsesuppzonegrp] = mikData_whsesuppzonegrp
				-- ! ,[pogmaxqty] = mikData_pogmaxqty
				-- ! ,[pogsetupperstore] = mikData_pogsetupperstore
				-- ! ,[projsalesperstorepermonth] = mikData_projsalesperstorepermonth
				-- ! ,[outboundfreight] = mikData_outboundfreight
				-- ! ,[ninepercentwhsecharge] = mikData_ninepercentwhsecharge
				-- ! ,[totalstorelandedcost] = mikData_totalstorelandedcost
				-- ! ,[rdbase] = mikData_rdbase
				-- ! ,[rdcentral] = mikData_rdcentral
				-- ! ,[rdtest] = mikData_rdtest
				-- ! ,[rdalaska] = mikData_rdalaska
				-- ! ,[rdcanada] = mikData_rdcanada
				-- ! ,[rd0thru9] = mikData_rd0thru9
				-- ! ,[rdcalifornia] = mikData_rdcalifornia
				-- ! ,[rdvillagecraft] = mikData_rdvillagecraft
				-- ! ,[hazmatyes] = mikData_hazmatyes
				-- ! ,[hazmatno] = mikData_hazmatno
				-- ! ,[hazmatmfgcountry] = mikData_hazmatmfgcountry
				-- ! ,[hazmatmfgname] = mikData_hazmatmfgname
				-- ! ,[hazmatmfgflammable] = mikData_hazmatmfgflammable
				-- ! ,[hazmatmfgcity] = mikData_hazmatmfgcity
				-- ! ,[hazmatcontainertype] = mikData_hazmatcontainertype
				-- ! ,[hazmatmfgstate] = mikData_hazmatmfgstate
				-- ! ,[hazmatcontainersize] = mikData_hazmatcontainersize
				-- ! ,[hazmatmfgphone] = mikData_hazmatmfgphone
				-- ! ,[hazmatmsdsuom] = mikData_hazmatmsdsuom
				-- ! ,[tssa] = mikData_tssa
				-- ! ,[csa] = mikData_csa
				-- ! ,[ul] = mikData_ul
				-- ! ,[licenceagreement] = mikData_licenceagreement
				-- ! ,[fumigationcertificate] = mikData_fumigationcertificate
				-- ! ,[kilndriedcertificate] = mikData_kilndriedcertificate
				-- ! ,[chinacominspecnumandccibstickers] = mikData_chinacominspecnumandccibstickers
				-- ! ,[originalvisa] = mikData_originalvisa
				-- ! ,[textiledeclarationmidcode] = mikData_textiledeclarationmidcode
				-- ! ,[quotachargestatement] = mikData_quotachargestatement
				-- ! ,[msds] = mikData_msds
				-- ! ,[tsca] = mikData_tsca
				-- ! ,[dropballtestcert] = mikData_dropballtestcert
				-- ! ,[manmedicaldevicelisting] = mikData_manmedicaldevicelisting
				-- ! ,[manfdaregistration] = mikData_manfdaregistration
				-- ! ,[copyrightindemnification] = mikData_copyrightindemnification
				-- ! ,[fishwildlifecert] = mikData_fishwildlifecert
				-- ! ,[proposition65labelreq] = mikData_proposition65labelreq
				-- ! ,[cccr] = mikData_cccr
				-- ! ,[formaldehydecompliant] = mikData_formaldehydecompliant
				-- ! ,[is_valid] = mikData_is_valid
				-- ! ,[tax_wizard] = mikData_tax_wizard
				-- ! ,[rms_sellable] = data.mikData_sellable_ind
				-- ! ,[rms_orderable] = data.mikData_orderable_ind
				-- ! ,[rms_inventory] = data.mikData_inventory_ind
				,DateLastModified = getdate()
				,UpdateUserID = 0
			  '
			END
	        
			SET @WHERECLAUSE1 = '
			  WHERE ID = ''0' + CONVERT(varchar(20), @SPEDYItemID) + '''
			'

			SET @WHERECLAUSE2 = '
			  WHERE ID = ''0' + CONVERT(varchar(20), @SPEDYItemHeaderID) + '''
			'

			IF ( (NULLIF(@VERBSTATEMENTSTRING, '') + @SELECTSTATEMENTSTRING) IS NOT NULL )
			BEGIN
			  EXEC(@PREPARESTRING + @VERBSTATEMENTSTRING + @SELECTSTATEMENTSTRING + @WHERECLAUSE1 + @CLEANUPSTRING)

			  PRINT('Updated import with SKU')

			  IF ( (NULLIF(@VERBSTATEMENTSTRING2, '') + @SELECTSTATEMENTSTRING) IS NOT NULL )
			  BEGIN
				EXEC(@PREPARESTRING + @VERBSTATEMENTSTRING2 + @SELECTSTATEMENTSTRING + @WHERECLAUSE2 + @CLEANUPSTRING)
			  END

			  IF ( @SPEDYBatchTypeID = 1 )
			  BEGIN
				SELECT @NumParentItemsInBatchNeedingaSKU = COUNT(*)
				FROM SPD_Batch b
				INNER JOIN SPD_Item_Headers h ON h.Batch_ID = b.ID
				INNER JOIN SPD_Items i ON i.Item_Header_ID = h.ID
				WHERE b.ID = @SPEDYBatchID AND Michaels_SKU IS NULL
				-- FJL Feb 2010 Just check first 2 chars of PackItemIndicator
				  AND COALESCE(RTRIM(REPLACE(LEFT(i.[pack_item_indicator],2), '-', '')), '') IN ('D','DP','SB')

				SELECT @NumItemsInBatch = COUNT(*)
				FROM SPD_Batch b
				INNER JOIN SPD_Item_Headers h ON h.Batch_ID = b.ID
				INNER JOIN SPD_Items i ON i.Item_Header_ID = h.ID
				WHERE b.ID = @SPEDYBatchID 
				-- FJL Feb 2010 Just check first 2 chars of PackItemIndicator
				  AND COALESCE(RTRIM(REPLACE(LEFT(i.[pack_item_indicator],2), '-', '')), '') NOT IN ('D','DP','SB')

				SELECT @NumCompleteItemsInBatch = COUNT(*)
				FROM SPD_Batch b
				INNER JOIN SPD_Item_Headers h ON h.Batch_ID = b.ID
				INNER JOIN SPD_Items i ON i.Item_Header_ID = h.ID
				WHERE b.ID = @SPEDYBatchID AND Michaels_SKU IS NOT NULL
				  AND COALESCE(RTRIM(REPLACE(LEFT(i.[pack_item_indicator],2), '-', '')), '') NOT IN ('D','DP','SB')
	              
				IF (@SPEDYEnvVars_Test_Mode = 1) PRINT 'Completed ' + CONVERT(varchar(15), @NumCompleteItemsInBatch) + ' of ' + CONVERT(varchar(15), @NumItemsInBatch)
			  END
	          
			  IF ( @SPEDYBatchTypeID = 2 )
			  BEGIN
				SELECT @NumParentItemsInBatchNeedingaSKU = COUNT(*)
				FROM SPD_Batch b
				INNER JOIN SPD_Import_Items i ON i.Batch_ID = b.ID
				WHERE b.ID = @SPEDYBatchID AND MichaelsSKU IS NULL
				-- FJL Feb 2010 Just check first 2 chars of PackItemIndicator
				  AND COALESCE(RTRIM(REPLACE(LEFT(i.[packitemindicator],2), '-', '')), '') IN ('D','DP','SB')

				SELECT @NumItemsInBatch = COUNT(*)
				FROM SPD_Batch b
				INNER JOIN SPD_Import_Items i ON i.Batch_ID = b.ID
				WHERE b.ID = @SPEDYBatchID
				-- FJL Feb 2010 Just check first 2 chars of PackItemIndicator
				  AND COALESCE(RTRIM(REPLACE(LEFT(i.[packitemindicator],2), '-', '')), '') NOT IN ('D','DP','SB')

				SELECT @NumCompleteItemsInBatch = COUNT(*)
				FROM SPD_Batch b
				INNER JOIN SPD_Import_Items i ON i.Batch_ID = b.ID
				WHERE b.ID = @SPEDYBatchID AND MichaelsSKU IS NOT NULL
				  AND COALESCE(RTRIM(REPLACE(LEFT(i.[packitemindicator],2), '-', '')), '') NOT IN ('D','DP','SB')

				IF (@SPEDYEnvVars_Test_Mode = 1) PRINT 'Completed ' + CONVERT(varchar(15), @NumCompleteItemsInBatch) + ' of ' + CONVERT(varchar(15), @NumItemsInBatch)
			  END
	          
	          -- FJL Aug 2010 - Only log update message if Items have not been SKUed and History Record Completed message not saved
			  IF (
				COALESCE(
				  (
				  SELECT COUNT(*) 
				  FROM SPD_Batch_History 
				  WHERE SPD_Batch_ID = @SPEDYBatchID
					AND Workflow_Stage_ID = @STAGE_COMPLETED
				  ), 0) = 0 --Only log this update if the batch has not been marked Complete (to prevent duplicate log entries).
				AND (
				  SELECT isNull(NI_AllSKUItems_Received,0)
				  FROM SPD_Batch
				  WHERE ID = @SPEDYBatchID ) = 0
			  )
			  BEGIN
				-- Record log of update
				INSERT INTO SPD_Batch_History
				(
				  SPD_Batch_ID,
				  Workflow_Stage_ID,
				  [Action],
				  Date_Modified,
				  Modified_User,
				  Notes
				)
				VALUES
				(
				  @SPEDYBatchID,
				  @STAGE_WAITINGFORSKU,
				  'System Activity',
				  getdate(),
				  0,
				  'An update message was received for an item in this batch. ' + CONVERT(varchar(15), @NumCompleteItemsInBatch) 
				  + ' of the ' + CONVERT(varchar(15), @NumItemsInBatch) + ' items in this batch have received a sku.'
				)
				
				-- Flag the batch so these Update messages don't fill the batch history
				IF @NumCompleteItemsInBatch = @NumItemsInBatch
				BEGIN
					UPDATE SPD_Batch SET
						NI_AllSKUItems_Received = 1
						,date_modified = getdate()
						,modified_user = 0
					WHERE ID = @SPEDYBatchID
				END
			  END

				-- Because Item Messages can come in to update the Rel 2 Item Master that look like new item, do not log dup messages.
			/*	
			  IF (
				COALESCE(
				(
				  SELECT COUNT(*) 
				  FROM SPD_Batch_History 
				  WHERE SPD_Batch_ID = @SPEDYBatchID
					AND Workflow_Stage_ID = @STAGE_COMPLETED
				), 0) > 0 --If the batch has been marked Complete, raise an eyebrow in the logs.
			  )
			  BEGIN
				-- Record log of update
				INSERT INTO SPD_Batch_History
				(
				  SPD_Batch_ID,
				  Workflow_Stage_ID,
				  [Action],
				  Date_Modified,
				  Modified_User,
				  Notes
				)
				VALUES
				(
				  @SPEDYBatchID,
				  @STAGE_COMPLETED,
				  'System Activity',
				  getdate(),
				  0,
				  'An update message was received for an item in this batch even though this batch was already marked Complete.'
				)
			  END
			*/
			
			  -- Batch goes to @STAGE_COMPLETED if successful
			  IF ( 
				@NumCompleteItemsInBatch = @NumItemsInBatch 		-- All Items received a SKU
				AND @NumParentItemsInBatchNeedingaSKU = 0 			-- No Pack Item record needs a sku either
				AND COALESCE((										-- Batch has not already been logged as complete
					SELECT COUNT(*) 
					FROM SPD_Batch_History 
					WHERE SPD_Batch_ID = @SPEDYBatchID
					  AND Workflow_Stage_ID = @STAGE_COMPLETED
					), 0) = 0 --Only log completion if it hasn't been logged before (to prevent duplicate emails).
			  )
			  BEGIN
				EXEC usp_SPD_MQ_LogMessage @D=@MsgTimeStamp, @M='Logging Batch as complete...'
				-- Record log of update
				INSERT INTO SPD_Batch_History
				(
				  SPD_Batch_ID,
				  Workflow_Stage_ID,
				  [Action],
				  Date_Modified,
				  Modified_User,
				  Notes
				)
				VALUES
				(
				  @SPEDYBatchID,
				  @STAGE_WAITINGFORSKU,
				  'Complete',
				  getdate(),
				  0,
				  'All items have received a Positive Response from RMS.  Marking Batch as Complete.'
				)
				
				 --Update SPD_Batch_History_Stage_Durations table with End Date for "Waiting" stage
				Update SPD_Batch_History_Stage_Durations
				Set End_Date = getDate(), [Hours]=dbo.BDATEDIFF_BUSINESS_HOURS([Start_Date], getDate(), DEFAULT, DEFAULT)
				Where Batch_ID = @SPEDYBatchID And Stage_ID = @STAGE_WAITINGFORSKU and End_Date is null
      

				UPDATE SPD_Batch SET 
				  Workflow_Stage_ID = @STAGE_COMPLETED,
				  Is_Valid = 1,
				  Date_Modified = getdate(),
				  Modified_User = 0
				WHERE ID = @SPEDYBatchID
	          
				INSERT INTO SPD_Batch_History
				(
				  SPD_Batch_ID,
				  Workflow_Stage_ID,
				  [Action],
				  Date_Modified,
				  Modified_User,
				  Notes
				)
				VALUES
				(
				  @SPEDYBatchID,
				  @STAGE_COMPLETED,
				  'Complete',
				  getdate(),
				  0,
				  'Batch Complete.'
				)
				
				-- Set Flag on to Update the Item Master when this message has been process by the Item Maint routines
				SET @UpdateIMFromNI = 1
				Set @UpdateBID = @SPEDYBatchID
				
				EXEC usp_SPD_MQ_LogMessage @D=@MsgTimeStamp, @M='Sending New Item Completed Email Message'
				-- Send emails
				SET @MichaelsEmailRecipients = NULL
				SET @EmailRecipients = NULL
	                      
				SELECT @MichaelsEmailRecipients = COALESCE(@MichaelsEmailRecipients + '; ', '') + su.Email_Address
				FROM SPD_Batch_History bh
				INNER JOIN Security_User su ON su.ID = bh.modified_user
				WHERE IsNumeric(bh.modified_user) = 1 
				  AND NULLIF(LTRIM(RTRIM(su.Email_Address)), '') IS NOT NULL
				  AND SPD_Batch_ID = @SPEDYBatchID
				  AND CHARINDEX('michaels.com', LOWER(su.Email_Address)) > 0
				GROUP BY su.Email_Address
	            
				SELECT @EmailRecipients = COALESCE(@EmailRecipients + '; ', '') + su.Email_Address
				FROM SPD_Batch_History bh
				INNER JOIN Security_User su ON su.ID = bh.modified_user
				WHERE IsNumeric(bh.modified_user) = 1 
				  AND NULLIF(LTRIM(RTRIM(su.Email_Address)), '') IS NOT NULL
				  AND SPD_Batch_ID = @SPEDYBatchID
				  AND CHARINDEX('michaels.com', LOWER(su.Email_Address)) = 0
				GROUP BY su.Email_Address
	            
				SELECT @SPEDYBatchGUID = [GUID] FROM SPD_Batch WHERE ID = @SPEDYBatchID

				IF (@SPEDYEnvVars_Test_Mode = 1) SET @MichaelsEmailRecipients = @SPEDYEnvVars_Test_Mode_Email_Address
				IF (@SPEDYEnvVars_Test_Mode = 1) SET @EmailRecipients = @SPEDYEnvVars_Test_Mode_Email_Address

				-- FJL July 2010 - Get more info for the subject line per IS Req F47
					Declare @DeptNo varchar(5), @VendorNo varchar(20), @VendorName varchar(50)
					Select @DeptNo = convert(varchar(5), Fineline_Dept_ID)
						, @VendorNo = convert(varchar(20), Vendor_Number)
						, @VendorName = Vendor_Name
					From SPD_Batch
					Where ID = @SPEDYBatchID
				  --NAK 5/20/2013:  Construct Email subject, but don't include Department or Vendor if there isn't one associated with the batch (i.e. Trilingual Maintenance Translation Batches)
				  SET @EmailSubject = 'SPEDY New Item Complete. ' 
				  IF COALESCE(@DeptNo,'0') <> '0' AND COALESCE(@VendorNo, '0') <> '0' 
				  BEGIN
					SET @EmailSubject = @EmailSubject + 'D: ' + COALESCE(@DeptNo, '') + ' ' + COALESCE(@VendorNo, '') + '-' + COALESCE(@VendorName, '') + '.'
				  END
				  SET @EmailSubject = @EmailSubject + ' Log ID#: ' +  convert(varchar(20),@SPEDYBatchID)
				--SET @EmailSubject = 'SPEDY Batch ' + CONVERT(varchar(20), COALESCE(@SPEDYBatchID, '')) + ' is Complete.'
				--IF (@SPEDYEnvVars_Test_Mode = 1) SET @EmailSubject = '[' + @SPEDYEnvVars_Environment_Name + '] ' + @EmailSubject
	            
				-- *** Michaels Email
				SET @EmailBody = '<font face="Arial" size="2"><p>' + @EmailSubject 
					+ '  Congratulations!</p><p>Next Steps:<ul type="square" style="padding-top: 0; margin-top: 0;">'
					+ '<li><a href="' + @SPEDYEnvVars_SPD_Root_URL + '/batchexport.aspx?guid=' + @SPEDYBatchGUID + '">Download the completed batch to Excel</a></li>'
					+ '<li><a href="' + @SPEDYEnvVars_SPD_Root_URL + '">Login to SPEDY to review this batch.</a></li>'
					+ '</ul></p></font>'
				EXEC sp_SQLSMTPMail
					  @vcSender = @SPEDYEnvVars_SPD_Email_FromAddress,
					  @vcFrom = @SPEDYEnvVars_SPD_Email_FromAddress,
					  @vcTo = @MichaelsEmailRecipients,
					  @vcCC = @SPEDYEnvVars_SPD_Email_CCAddress,
					  @vcBCC = @SPEDYEnvVars_SPD_Email_BCCAddress,
					  @vcSubject = @EmailSubject,
					  @vcHTMLBody = @EmailBody,
					  @bAutoGenerateTextBody = 1,
					  @vcSMTPServer = @SPEDYEnvVars_SPD_SMTP_Server,
					  @cDSNOptions = '2',
					  @bAuthenticate = @SPEDYEnvVars_SPD_SMTP_Authentication_Required,
					  @vcSMTPAuth_UserName = @SPEDYEnvVars_SPD_SMTP_Authentication_User,
					  @vcSMTPAuth_UserPassword = @SPEDYEnvVars_SPD_SMTP_Authentication_Password

				IF (@SPEDYEnvVars_Test_Mode = 0)
				BEGIN
				  -- *** Vendor Email
				  SET @EmailBody = '<font face="Arial" size="2"><p>' + @EmailSubject 
				  + '  Congratulations!</p><p>Next Steps:<ul type="square" style="padding-top: 0; margin-top: 0;">'
				  + '<li><a href="' + @SPEDYEnvVars_SPD_Vendor_URL + '/batchexport.aspx?guid=' + @SPEDYBatchGUID + '">Download the completed batch to Excel</a></li>'
				  + '<li><a href="' + @SPEDYEnvVars_SPD_Vendor_URL + '">Login to SPEDY to review this batch.</a></li>'
				  + '</ul></p></font>'
				  EXEC sp_SQLSMTPMail
						@vcSender = @SPEDYEnvVars_SPD_Email_FromAddress,
						@vcFrom = @SPEDYEnvVars_SPD_Email_FromAddress,
						@vcTo = @EmailRecipients,
					@vcCC = @SPEDYEnvVars_SPD_Email_CCAddress,
					@vcBCC = @SPEDYEnvVars_SPD_Email_BCCAddress,
						@vcSubject = @EmailSubject,
						@vcHTMLBody = @EmailBody,
						@bAutoGenerateTextBody = 1,
						@vcSMTPServer = @SPEDYEnvVars_SPD_SMTP_Server,
						@cDSNOptions = '2',
						@bAuthenticate = @SPEDYEnvVars_SPD_SMTP_Authentication_Required,
						@vcSMTPAuth_UserName = @SPEDYEnvVars_SPD_SMTP_Authentication_User,
						@vcSMTPAuth_UserPassword = @SPEDYEnvVars_SPD_SMTP_Authentication_Password
				END

			  END --IF ( @NumCompleteItemsInBatch = @NumItemsInBatch)



			  -------------------------------------------------------------------------------------------------------------------
			  -- Batch with Pack skus (if it needs a sku) goes back to stage 10 when all other skus have been received.
			  -------------------------------------------------------------------------------------------------------------------
			  -- 1/27/2010 - NDF - CHANGED => now sends the parent(s) to RMS
			  -- 8/28/2010 - FJL - Changed : Only do this if the message has not been sent yet so that repeated messages are not sent
			  -------------------------------------------------------------------------------------------------------------------
			  IF ( 
				@NumCompleteItemsInBatch = @NumItemsInBatch 
				AND @NumParentItemsInBatchNeedingaSKU > 0 
				AND (	SELECT COUNT(*) 
						FROM SPD_Batch_History
						WHERE SPD_Batch_ID = @SPEDYBatchID
						  AND Workflow_Stage_ID = @STAGE_COMPLETED ) = 0
				AND (	Select isNull(NI_PackMsg_Sent,0)
						From SPD_Batch
						Where ID = @SPEDYBatchID ) = 0 
				)
			  BEGIN
				-- Resend the batch to generate the Pack Request message
				EXEC sp_SPD_Batch_PublishMQMessage_ByBatchID @SPEDYBatchID
			  END 

			  SET @SUCCESSFLAG = 1
			END
		END
		ELSE
		BEGIN
		  PRINT 'Batch reference number "' + COALESCE(@SPEDYRefString, '') + '" does not refer to a valid (non-completed / active) batch. No update attempted.'
		END	-- Process When @WorkflowID = 1
      END
      
      -- + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +
      -- PROCESS ITEM UPDATE MESSAGE
      -- + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +
      -- FJL Sept 2010 -- NO LONGER UPDATE THIS TABLE as its functionality has been moved to the SPD_Item_Master_SKU table maintained by Item Maint process
      
  --    IF (@XML_DataSegment_Action IN ('Update', 'Insert', 'Delete'))
  --    BEGIN
  --      set @msg = 'Processing New Item Item Master Message: ' + convert(varchar(20),@MessageID) + ' ( Record No. ' + convert(varchar(20),@MessageRecNo) + ' )'
		--EXEC usp_SPD_MQ_LogMessage @D=@MsgTimeStamp, @M=@msg
  --      IF (NULLIF(@SPEDYRefString, '') IS NULL)
  --      BEGIN
  --        -- this is an item update message only.
  --        UPDATE SPD_MQComm_Message
  --        SET Message_Type_ID = 9
  --        WHERE ID = @MessageID AND Message_Type_ID <> 2
  --      END

  --      IF (@XML_DataSegment_Action = 'Delete')
  --      BEGIN
  --        PRINT 'Item Delete Message'

  --        SET @VERBSTATEMENTSTRING = '
  --        DELETE SPD_Item_Master
  --        '

  --        SET @WHERECLAUSE1 = '
  --        WHERE 
  --          [ITEM] = data.mikData_item 
  --          OR [UPC] = COALESCE(data.mikData_prmy_ref_item_no, mikData_upc)
  --        '
  --      END
  --      ELSE
  --      BEGIN
  --        -- PRINT 'Item Update Message'

  --        SET @VERBSTATEMENTSTRING = '
  --        UPDATE SPD_Item_Master
  --        SET 
  --           [ITEM] = data.mikData_item
  --          ,[UPC] = COALESCE(data.mikData_prmy_ref_item_no, mikData_upc)
  --          ,[ITEM_DESCRIPTION] = COALESCE(data.mikData_item_desc, ''MISSING ITEM DESCRIPTION IN RMS XML MESSAGE ' + CONVERT(NVARCHAR(20), @MessageID) + ''')
  --          ,Date_Last_Modified = getdate()
  --        '

  --        SET @VERBSTATEMENTSTRING2 = '
  --        INSERT INTO SPD_Item_Master 
  --        (
  --           [ITEM]
  --          ,[UPC]
  --          ,[ITEM_DESCRIPTION]
  --        )
  --        SELECT 
  --           data.mikData_item
  --          ,COALESCE(data.mikData_prmy_ref_item_no, mikData_upc)
  --          ,COALESCE(data.mikData_item_desc, ''MISSING ITEM DESCRIPTION IN RMS XML MESSAGE ' + CONVERT(NVARCHAR(20), @MessageID) + ''')
  --        '

  --        SET @WHERECLAUSE1 = '
  --        WHERE [ITEM] = data.mikData_item AND [UPC] = COALESCE(data.mikData_prmy_ref_item_no, mikData_upc)
  --        '

  --        SET @WHERECLAUSE2 = '
  --        WHERE NOT EXISTS (SELECT [item] FROM SPD_Item_Master WHERE [ITEM] = data.mikData_item AND [UPC] = COALESCE(data.mikData_prmy_ref_item_no, mikData_upc))
  --        '
       
  --      END

  --      SET @SELECTSTATEMENTSTRING = '
  --      FROM OPENXML (@intXMLDocHandle, ''/mikMessage'')
  --      WITH
  --      (
	 --        mikHeader_Source varchar(1000) ''mikHeader/Source''
	 --       ,mikHeader_Contents varchar(1000) ''mikHeader/Contents''
	 --       ,mikHeader_ThreadID varchar(1000) ''mikHeader/ThreadID''
	 --       ,mikHeader_PublishTime varchar(1000) ''mikHeader/PublishTime''
  --      ) hdr
  --      INNER JOIN (
	 --       SELECT *
	 --       FROM OPENXML (@intXMLDocHandle, ''/mikMessage/mikData[@type=''''Sku'''' or @type=''''UPC'''']'')
	 --       WITH
	 --       (
	 --          mikDataAttrs_ID varchar(1000) ''@id''
	 --         ,mikDataAttrs_Type varchar(1000) ''@type''
	 --         ,mikDataAttrs_Action varchar(1000) ''@action''
	 --         ,mikData_item varchar(1000) ''item''
	 --         ,mikData_prmy_ref_item_no varchar(1000) ''prmy_ref_item_no''
	 --         ,mikData_upc varchar(1000) ''upc''
  --          ,mikData_item_desc varchar(1000) ''item_desc''
  --          ,mikData_short_desc varchar(1000) ''short_desc''
  --          ,mikData_desc_up varchar(1000) ''desc_up''
	 --       )
  --      ) data ON 1 = 1 -- NULLIF(data.mikData_item, '''') IS NOT NULL
  --      '

  --      IF ( (NULLIF(@VERBSTATEMENTSTRING, '') + @SELECTSTATEMENTSTRING) IS NOT NULL )
  --      BEGIN
  --        --PRINT @PREPARESTRING + @VERBSTATEMENTSTRING + @SELECTSTATEMENTSTRING + @WHERECLAUSE1 + @CLEANUPSTRING
  --        EXEC(@PREPARESTRING + @VERBSTATEMENTSTRING + @SELECTSTATEMENTSTRING + @WHERECLAUSE1 + @CLEANUPSTRING)
  --      END
        
  --      IF ( (NULLIF(@VERBSTATEMENTSTRING2, '') + @SELECTSTATEMENTSTRING) IS NOT NULL )
  --      BEGIN
  --        EXEC(@PREPARESTRING + @VERBSTATEMENTSTRING2 + @SELECTSTATEMENTSTRING + @WHERECLAUSE2 + @CLEANUPSTRING)
  --      END
/*
        SET @MichaelsEmailRecipients = @SPEDYEnvVars_SPD_Email_FromAddress
        IF (@SPEDYEnvVars_Test_Mode = 1) SET @MichaelsEmailRecipients = @SPEDYEnvVars_Test_Mode_Email_Address
        --SET @MichaelsEmailRecipients = 'ken.wallace@novalibra.com'

        SET @EmailSubject = 'SPEDY has received an Item Master update from RMS.'
        --IF (@SPEDYEnvVars_Test_Mode = 1) SET @EmailSubject = '[' + @SPEDYEnvVars_Environment_Name + '] ' + @EmailSubject
        
        -- *** Michaels Email
        SET @EmailBody = '<font face="Arial" size="2"><p>' + @EmailSubject + '  </p><p>This is an informational message only. No action is required.</p></font>'
        EXEC sp_SQLSMTPMail
          @vcSender = @SPEDYEnvVars_SPD_Email_FromAddress,
          @vcFrom = @SPEDYEnvVars_SPD_Email_FromAddress,
          @vcTo = @MichaelsEmailRecipients,
          @vcCC = @SPEDYEnvVars_SPD_Email_CCAddress,
          @vcBCC = @SPEDYEnvVars_SPD_Email_BCCAddress,
          @vcSubject = @EmailSubject,
          @vcHTMLBody = @EmailBody,
          @bAutoGenerateTextBody = 1,
          @vcSMTPServer = @SPEDYEnvVars_SPD_SMTP_Server,
          @cDSNOptions = '2',
          @bAuthenticate = @SPEDYEnvVars_SPD_SMTP_Authentication_Required,
          @vcSMTPAuth_UserName = @SPEDYEnvVars_SPD_SMTP_Authentication_User,
          @vcSMTPAuth_UserPassword = @SPEDYEnvVars_SPD_SMTP_Authentication_Password
*/
      --  SET @SUCCESSFLAG = 1
      --END
                 
    END -- IF ( @XML_HeaderSegment_Source = 'RIB.etItemsFromRMS' )

    -- ========================================================================
    -- MESSAGE TYPE: ITEM ERROR MESSAGE  -- These are only good for New Item 
    -- ========================================================================
    IF ( @XML_HeaderSegment_Source = 'RMS12_MQSEND' AND @XML_HeaderSegment_Contents = 'SPEDYItemError' )
    BEGIN      
  	  EXEC usp_SPD_MQ_LogMessage @D=@MsgTimeStamp, @M='Processing New Item Error Message'
      UPDATE SPD_MQComm_Message
      SET Message_Type_ID = 3
      WHERE ID = @MessageID

      -- Step 1. Get the identifier string for the referenced spedy transaction
      SELECT 
         @SPEDYRefString = mikData_spedy_item_id
        ,@XML_DataSegment_ID = mikDataAttrs_id
        ,@XML_DataSegment_Type = mikDataAttrs_type
        ,@XML_DataSegment_Action = mikDataAttrs_action
        ,@XML_DataSegment_PrimaryUPC = mikData_primary_upc
        ,@XML_DataSegment_ErrorMessage1 = mikData_error_message1
        ,@XML_DataSegment_ErrorMessage2 = mikData_error_message2
      FROM OPENXML (@intXMLDocHandle, '/mikMessage/mikData[@type=''SpedyItemError'']')
      WITH 
      (
         mikDataAttrs_id varchar(1000) '@id'
        ,mikDataAttrs_type varchar(1000) '@type'
        ,mikDataAttrs_action varchar(1000) '@action'
        ,mikData_spedy_item_id varchar(1000) 'spedy_item_id'
        ,mikData_primary_upc varchar(1000) 'primary_upc'
        ,mikData_error_message1 varchar(1000) 'error_message1'
        ,mikData_error_message2 varchar(1000) 'error_message2'
      )
      IF (@SPEDYEnvVars_Test_Mode = 1) PRINT '@SPEDYRefString: ' + @SPEDYRefString  

      -- Step 2. Split Batch from Item_ID
      SET @SPEDYBatchID = 0
      SET @SPEDYBatchTypeID = 0
      SET @SPEDYItemID = 0
      SET @WorkflowStageID = 0

      IF (LEN(@SPEDYRefString) > 0)
      BEGIN
        IF (CHARINDEX('.', @SPEDYRefString) > 0)
        BEGIN
          IF (ISNUMERIC(SUBSTRING(@SPEDYRefString, 0, CHARINDEX('.', @SPEDYRefString))) = 1)
          BEGIN
            SET @SPEDYBatchID = SUBSTRING(@SPEDYRefString, 0, CHARINDEX('.', @SPEDYRefString))
          END        
        END
      END

      IF (@SPEDYBatchID > 0)
      BEGIN
		SELECT @WorkflowID = WS.Workflow_ID
		FROM SPD_Batch B
			join SPD_Workflow_Stage ws on B.workflow_Stage_ID = ws.ID
		WHERE B.ID = @SPEDYBatchID
      END
      
      IF (@SPEDYBatchID > 0 and @WorkflowID = 1)
      BEGIN
        UPDATE SPD_MQComm_Message
        SET SPD_Batch_ID = @SPEDYBatchID
        WHERE ID = @MessageID

        -- Step 3. Lookup Batch and determine if Import or Domestic
        -- Domestic Batch = 1
        -- Import Batch = 2
        SELECT @SPEDYBatchTypeID = COALESCE(Batch_Type_ID, 0) FROM SPD_Batch WHERE ID = @SPEDYBatchID

        IF ( @SPEDYBatchTypeID > 0)
        BEGIN
          IF ( ISNUMERIC(SUBSTRING(@SPEDYRefString, CHARINDEX('.', @SPEDYRefString)+1, LEN(@SPEDYRefString) ) ) = 1)
          BEGIN
            SET @SPEDYItemID = SUBSTRING(@SPEDYRefString, CHARINDEX('.', @SPEDYRefString)+1, LEN(@SPEDYRefString) )
          END
        END
      END

	  -- Set Stages based on Workflow for the error
	  select @STAGE_COMPLETED = [id] from SPD_Workflow_Stage where Workflow_id = @WorkflowID and Stage_Type_id = 4
	  select @STAGE_WAITINGFORSKU = [id] from SPD_Workflow_Stage where Workflow_id = @WorkflowID and Stage_Type_id = 3
	  select @STAGE_DBC = [id] from SPD_Workflow_Stage where Workflow_id = @WorkflowID and Stage_Type_id = 6
      
      SELECT @WorkflowStageID = Workflow_Stage_ID FROM SPD_Batch WHERE ID = @SPEDYBatchID

      IF ( @SPEDYBatchTypeID NOT IN (1, 2) )
      BEGIN
        PRINT 'Batch reference number "' + COALESCE(@SPEDYRefString, '') + '" does not refer to a valid batch. No update attempted.'
      END
      ELSE
      BEGIN
        -- Step 5. Record log of update
        INSERT INTO SPD_Batch_History
        (
          SPD_Batch_ID,
          Workflow_Stage_ID,
          [Action],
          Date_Modified,
          Modified_User,
          Notes
        )
        VALUES
        (
          @SPEDYBatchID,
          @WorkflowStageID,
          'System Activity',
          getdate(),
          0,
          'Error response received from RMS.<br><b>Error Item:</b> ' + CONVERT(varchar(20), @SPEDYItemID) + '<br><b>Error Text:</b> ' + COALESCE(@XML_DataSegment_ErrorMessage1, '') + COALESCE(' ' + @XML_DataSegment_ErrorMessage2, '')
        )

        IF ( @WorkflowStageID <> @STAGE_COMPLETED)
        BEGIN
          INSERT INTO SPD_Batch_History
          (
            SPD_Batch_ID,
            Workflow_Stage_ID,
            [Action],
            Date_Modified,
            Modified_User,
            Notes
          )
          VALUES
          (
            @SPEDYBatchID,
            @STAGE_WAITINGFORSKU,
            'System Activity',
            getdate(),
            0,
            'Sending batch back to previous stage (DBC/QA) because of item addition error message received from RMS.'
          )

          UPDATE SPD_Batch SET 
            Workflow_Stage_ID = @STAGE_DBC,
            Date_Modified = getdate(),
            Modified_User = 0
          WHERE ID = @SPEDYBatchID
        END
      
        -- Step 6. Send email alerts
        SET @MichaelsEmailRecipients = NULL

        SELECT @MichaelsEmailRecipients = COALESCE(@MichaelsEmailRecipients + '; ', '') + su.Email_Address
        FROM SPD_Batch_History bh
        INNER JOIN Security_User su ON su.ID = bh.modified_user
        WHERE IsNumeric(bh.modified_user) = 1 
          AND bh.workflow_stage_id = @STAGE_DBC
          AND LOWER(bh.[action]) = 'approve'
          AND NULLIF(LTRIM(RTRIM(su.Email_Address)), '') IS NOT NULL
          AND SPD_Batch_ID = @SPEDYBatchID
          AND CHARINDEX('michaels.com', LOWER(su.Email_Address)) > 0
        GROUP BY su.Email_Address

        IF (@SPEDYEnvVars_Test_Mode = 1) SET @MichaelsEmailRecipients = @SPEDYEnvVars_Test_Mode_Email_Address

        SET @EmailSubject = 'SPEDY has received an RMS Error for New Item Batch ' + COALESCE(CONVERT(varchar(20),@SPEDYBatchID), '') + '.'
        --IF (@SPEDYEnvVars_Test_Mode = 1) SET @EmailSubject = '[' + @SPEDYEnvVars_Environment_Name + '] ' + @EmailSubject
        
        -- *** Michaels Email
        SET @EmailBody = '<font face="Arial" size="2"><p>' + @EmailSubject 
        + '&nbsp;&nbsp;Please view the provided error text to resolve this matter.</p><p><b>Error Batch:</b> ' + CONVERT(varchar(20), @SPEDYBatchID) + '</p>'
        + '<p><b>Error Item:</b> ' + CONVERT(varchar(20), @SPEDYItemID) + '<br /></p>'
        + '<p><b>Error Text:</b><br />&nbsp;&nbsp;&nbsp;' + COALESCE(@XML_DataSegment_ErrorMessage1, '') + COALESCE('<br />&nbsp;&nbsp;&nbsp;' + @XML_DataSegment_ErrorMessage2, '') + '</p>'
        + '<p><a href="' + @SPEDYEnvVars_SPD_Root_URL + '">Login to SPEDY</a> to review this batch and correct any errors.</p></font>'
        EXEC sp_SQLSMTPMail
	        @vcSender = @SPEDYEnvVars_SPD_Email_FromAddress,
	        @vcFrom = @SPEDYEnvVars_SPD_Email_FromAddress,
	        @vcTo = @MichaelsEmailRecipients,
          @vcCC = @SPEDYEnvVars_SPD_Email_CCAddress,
          @vcBCC = @SPEDYEnvVars_SPD_Email_BCCAddress,
	        @vcSubject = @EmailSubject,
	        @vcHTMLBody = @EmailBody,
	        @bAutoGenerateTextBody = 1,
	        @vcSMTPServer = @SPEDYEnvVars_SPD_SMTP_Server,
	        @cDSNOptions = '2',
	        @bAuthenticate = @SPEDYEnvVars_SPD_SMTP_Authentication_Required,
	        @vcSMTPAuth_UserName = @SPEDYEnvVars_SPD_SMTP_Authentication_User,
	        @vcSMTPAuth_UserPassword = @SPEDYEnvVars_SPD_SMTP_Authentication_Password

        SET @SUCCESSFLAG = 1
      END
    END

    -- =======================================================================================================
    -- MESSAGE TYPE: DEPARTMENT MESSAGE - Updates both Security_Privilege Table And SPD_Fineline_Dept table
    -- =======================================================================================================
    IF ( @XML_HeaderSegment_Source = 'RIB.etMerchHierFromRMS' AND @XML_HeaderSegment_Contents = 'Deps' )
    BEGIN
  	  EXEC usp_SPD_MQ_LogMessage @D=@MsgTimeStamp, @M='Processing Department Message'
      UPDATE SPD_MQComm_Message
      SET Message_Type_ID = 4
      WHERE ID = @MessageID
      
      UPDATE SPD_Fineline_Dept
        SET DEPT = x.mikData_dept, DEPT_NAME = x.mikData_dept_name,
        Date_Last_Modified = getdate()
      FROM OPENXML (@intXMLDocHandle, '/mikMessage/mikData[@type=''Deps'']')
      WITH 
      (
         mikDataAttrs_id varchar(1000) '@id'
        ,mikDataAttrs_type varchar(1000) '@type'
        ,mikDataAttrs_action varchar(1000) '@action'
        ,mikData_dept varchar(1000) 'dept'
        ,mikData_dept_name varchar(1000) 'dept_name'
      ) x
      WHERE DEPT = x.mikData_dept

      INSERT INTO SPD_Fineline_Dept
      (DEPT, DEPT_NAME)
      SELECT x.mikData_dept, x.mikData_dept_name
      FROM OPENXML (@intXMLDocHandle, '/mikMessage/mikData[@type=''Deps'']')
      WITH 
      (
         mikDataAttrs_id varchar(1000) '@id'
        ,mikDataAttrs_type varchar(1000) '@type'
        ,mikDataAttrs_action varchar(1000) '@action'
        ,mikData_dept varchar(1000) 'dept'
        ,mikData_dept_name varchar(1000) 'dept_name'
      ) x
      WHERE NOT EXISTS (SELECT DEPT FROM SPD_Fineline_Dept WHERE DEPT = x.mikData_dept)

	  -- Now do the Security_Privilege table based on the Fineline dept table
	  UPDATE sp 
		SET
			 [Privilege_Name]		= CONVERT(varchar(10), d.DEPT) + ' - ' + d.DEPT_NAME
			, [Privilege_Summary]	= 'Can View Department ' + CONVERT(varchar(10), d.DEPT) + ': ' + d.DEPT_NAME
			, [Date_Last_Modified] = getdate()
			
      FROM OPENXML (@intXMLDocHandle, '/mikMessage/mikData[@type=''Deps'']')
      WITH (
         mikDataAttrs_id varchar(1000) '@id'
        ,mikDataAttrs_type varchar(1000) '@type'
        ,mikDataAttrs_action varchar(1000) '@action'
        ,mikData_dept varchar(1000) 'dept'
        ,mikData_dept_name varchar(1000) 'dept_name'
      ) as X
		Join SPD_Fineline_Dept d	on convert(varchar(10),D.Dept) = X.mikData_dept			--SPD.DEPT.20
		Join Security_Privilege sp	on convert(int,D.Dept) = convert(int, SUBSTRING(Constant,10,len(Constant)-9))	
		Where sp.scope_id = 1002


		--FROM Security_Privilege sp
		--	Join SPD_Fineline_Dept d on convert(int,D.Dept) = convert(int, SUBSTRING(Constant,10,len(Constant)-9))			--SPD.DEPT.20
		--Where sp.scope_id = 1002

	  -- and Inserts	
      INSERT INTO Security_Privilege
                 ([Scope_ID]
                 ,[Privilege_Name]
                 ,[Privilege_ShortName]
                 ,[Privilege_Summary]
                 ,[Constant]
                 ,[SortOrder]
                 ,[Date_Created]
                 )
      SELECT
                 1002
                 ,CONVERT(varchar(10), d.DEPT) + ' - ' + d.DEPT_NAME
                 ,'DEPT' + RIGHT('000' + CONVERT(varchar(10), d.DEPT), 3)
                 ,'Can View Department ' + CONVERT(varchar(10), d.DEPT) + ': ' + d.DEPT_NAME
                 ,'SPD.DEPT.' + CONVERT(varchar(10), d.DEPT)
                 ,RIGHT('00000' + CONVERT(varchar(10), d.DEPT), 5)
                 , getdate()
      FROM SPD_Fineline_Dept d
      WHERE NOT EXISTS (SELECT [Constant] FROM Security_Privilege WHERE [Constant] = 'SPD.DEPT.' + CONVERT(varchar(10), d.DEPT))

      SET @MichaelsEmailRecipients = @SPEDYEnvVars_SPD_Email_FromAddress
      IF (@SPEDYEnvVars_Test_Mode = 1) SET @MichaelsEmailRecipients = @SPEDYEnvVars_Test_Mode_Email_Address

      SET @EmailSubject = 'SPEDY has received a Fineline Department update from RMS.'
      --IF (@SPEDYEnvVars_Test_Mode = 1) SET @EmailSubject = '[' + @SPEDYEnvVars_Environment_Name + '] ' + @EmailSubject
      
      -- *** Michaels Email
      SET @EmailBody = '<font face="Arial" size="2"><p>' + @EmailSubject + '  </p><p>This is an informational message only. No action is required.</p></font>'
      EXEC sp_SQLSMTPMail
        @vcSender = @SPEDYEnvVars_SPD_Email_FromAddress,
        @vcFrom = @SPEDYEnvVars_SPD_Email_FromAddress,
        @vcTo = @MichaelsEmailRecipients,
        @vcCC = @SPEDYEnvVars_SPD_Email_CCAddress,
        @vcBCC = @SPEDYEnvVars_SPD_Email_BCCAddress,
        @vcSubject = @EmailSubject,
        @vcHTMLBody = @EmailBody,
        @bAutoGenerateTextBody = 1,
        @vcSMTPServer = @SPEDYEnvVars_SPD_SMTP_Server,
        @cDSNOptions = '2',
        @bAuthenticate = @SPEDYEnvVars_SPD_SMTP_Authentication_Required,
        @vcSMTPAuth_UserName = @SPEDYEnvVars_SPD_SMTP_Authentication_User,
        @vcSMTPAuth_UserPassword = @SPEDYEnvVars_SPD_SMTP_Authentication_Password

      SET @SUCCESSFLAG = 1
    END

    -- ========================================================================
    -- MESSAGE TYPE: CLASS MESSAGE
    -- ========================================================================
    IF ( @XML_HeaderSegment_Source = 'RIB.etMerchHierFromRMS' AND @XML_HeaderSegment_Contents = 'Class' )
    BEGIN
  	  EXEC usp_SPD_MQ_LogMessage @D=@MsgTimeStamp, @M='Processing Class Message'
      UPDATE SPD_MQComm_Message
      SET Message_Type_ID = 5
      WHERE ID = @MessageID
      
      UPDATE SPD_Fineline_Class
        SET DEPT = x.mikData_dept, 
        CLASS = x.mikData_class, 
        CLASS_NAME = x.mikData_class_name,
        Date_Last_Modified = getdate()
      FROM OPENXML (@intXMLDocHandle, '/mikMessage/mikData[@type=''Class'']')
      WITH 
      (
         mikDataAttrs_id varchar(1000) '@id'
        ,mikDataAttrs_type varchar(1000) '@type'
        ,mikDataAttrs_action varchar(1000) '@action'
        ,mikData_dept varchar(1000) 'dept'
        ,mikData_class varchar(1000) 'class'
        ,mikData_class_name varchar(1000) 'class_name'
      ) x
      WHERE DEPT = x.mikData_dept AND CLASS = x.mikData_class

      INSERT INTO SPD_Fineline_Class
      (
        DEPT, 
        CLASS,
        CLASS_NAME
      )
      SELECT 
        x.mikData_dept, 
        x.mikData_class,
        x.mikData_class_name
      FROM OPENXML (@intXMLDocHandle, '/mikMessage/mikData[@type=''Class'']')
      WITH 
      (
         mikDataAttrs_id varchar(1000) '@id'
        ,mikDataAttrs_type varchar(1000) '@type'
        ,mikDataAttrs_action varchar(1000) '@action'
        ,mikData_dept varchar(1000) 'dept'
        ,mikData_class varchar(1000) 'class'
        ,mikData_class_name varchar(1000) 'class_name'
      ) x
      WHERE NOT EXISTS (SELECT * FROM SPD_Fineline_Class WHERE DEPT = x.mikData_dept AND CLASS = x.mikData_class)

      SET @MichaelsEmailRecipients = @SPEDYEnvVars_SPD_Email_FromAddress
      IF (@SPEDYEnvVars_Test_Mode = 1) SET @MichaelsEmailRecipients = @SPEDYEnvVars_Test_Mode_Email_Address

      SET @EmailSubject = 'SPEDY has received a Fineline Class update from RMS.'
      --IF (@SPEDYEnvVars_Test_Mode = 1) SET @EmailSubject = '[' + @SPEDYEnvVars_Environment_Name + '] ' + @EmailSubject
      
      -- *** Michaels Email
      SET @EmailBody = '<font face="Arial" size="2"><p>' + @EmailSubject + '  </p><p>This is an informational message only. No action is required.</p></font>'
      EXEC sp_SQLSMTPMail
        @vcSender = @SPEDYEnvVars_SPD_Email_FromAddress,
        @vcFrom = @SPEDYEnvVars_SPD_Email_FromAddress,
        @vcTo = @MichaelsEmailRecipients,
        @vcCC = @SPEDYEnvVars_SPD_Email_CCAddress,
        @vcBCC = @SPEDYEnvVars_SPD_Email_BCCAddress,
        @vcSubject = @EmailSubject,
        @vcHTMLBody = @EmailBody,
        @bAutoGenerateTextBody = 1,
        @vcSMTPServer = @SPEDYEnvVars_SPD_SMTP_Server,
        @cDSNOptions = '2',
        @bAuthenticate = @SPEDYEnvVars_SPD_SMTP_Authentication_Required,
        @vcSMTPAuth_UserName = @SPEDYEnvVars_SPD_SMTP_Authentication_User,
        @vcSMTPAuth_UserPassword = @SPEDYEnvVars_SPD_SMTP_Authentication_Password

      SET @SUCCESSFLAG = 1
    END

    -- ========================================================================
    -- MESSAGE TYPE: SUBCLASS MESSAGE
    -- ========================================================================
    IF ( @XML_HeaderSegment_Source = 'RIB.etMerchHierFromRMS' AND @XML_HeaderSegment_Contents = 'Subclass' )
    BEGIN
  	  EXEC usp_SPD_MQ_LogMessage @D=@MsgTimeStamp, @M='Processing SubClass Message'
      UPDATE SPD_MQComm_Message
      SET Message_Type_ID = 6
      WHERE ID = @MessageID
      
      UPDATE SPD_Fineline_SubClass
        SET DEPT = x.mikData_dept, 
        CLASS = mikData_class, 
        SUBCLASS = mikData_subclass, 
        SUB_NAME = x.mikData_sub_name,
        Date_Last_Modified = getdate()
      FROM OPENXML (@intXMLDocHandle, '/mikMessage/mikData[@type=''Subclass'']')
      WITH 
      (
         mikDataAttrs_id varchar(1000) '@id'
        ,mikDataAttrs_type varchar(1000) '@type'
        ,mikDataAttrs_action varchar(1000) '@action'
        ,mikData_dept varchar(1000) 'dept'
        ,mikData_class varchar(1000) 'class'
        ,mikData_subclass varchar(1000) 'subclass'
        ,mikData_sub_name varchar(1000) 'sub_name'
      ) x
      WHERE DEPT = x.mikData_dept AND CLASS = x.mikData_class AND SUBCLASS = x.mikData_subclass

      INSERT INTO SPD_Fineline_SubClass
      (
        DEPT, 
        CLASS,
        SUBCLASS,
        SUB_NAME
      )
      SELECT 
        x.mikData_dept, 
        x.mikData_class,
        x.mikData_subclass,
        x.mikData_subclass_name
      FROM OPENXML (@intXMLDocHandle, '/mikMessage/mikData[@type=''Subclass'']')
      WITH 
      (
         mikDataAttrs_id varchar(1000) '@id'
        ,mikDataAttrs_type varchar(1000) '@type'
        ,mikDataAttrs_action varchar(1000) '@action'
        ,mikData_dept varchar(1000) 'dept'
        ,mikData_class varchar(1000) 'class'
        ,mikData_subclass varchar(1000) 'subclass'
        ,mikData_subclass_name varchar(1000) 'subclass_name'
      ) x
      WHERE NOT EXISTS (SELECT * FROM SPD_Fineline_SubClass WHERE DEPT = x.mikData_dept AND CLASS = x.mikData_class AND SUBCLASS = x.mikData_subclass)

      SET @MichaelsEmailRecipients = @SPEDYEnvVars_SPD_Email_FromAddress
      IF (@SPEDYEnvVars_Test_Mode = 1) SET @MichaelsEmailRecipients = @SPEDYEnvVars_Test_Mode_Email_Address

      SET @EmailSubject = 'SPEDY has received a Fineline Subclass update from RMS.'
      --IF (@SPEDYEnvVars_Test_Mode = 1) SET @EmailSubject = '[' + @SPEDYEnvVars_Environment_Name + '] ' + @EmailSubject
      
      -- *** Michaels Email
      SET @EmailBody = '<font face="Arial" size="2"><p>' + @EmailSubject + '  </p><p>This is an informational message only. No action is required.</p></font>'
      EXEC sp_SQLSMTPMail
        @vcSender = @SPEDYEnvVars_SPD_Email_FromAddress,
        @vcFrom = @SPEDYEnvVars_SPD_Email_FromAddress,
        @vcTo = @MichaelsEmailRecipients,
        @vcCC = @SPEDYEnvVars_SPD_Email_CCAddress,
        @vcBCC = @SPEDYEnvVars_SPD_Email_BCCAddress,
        @vcSubject = @EmailSubject,
        @vcHTMLBody = @EmailBody,
        @bAutoGenerateTextBody = 1,
        @vcSMTPServer = @SPEDYEnvVars_SPD_SMTP_Server,
        @cDSNOptions = '2',
        @bAuthenticate = @SPEDYEnvVars_SPD_SMTP_Authentication_Required,
        @vcSMTPAuth_UserName = @SPEDYEnvVars_SPD_SMTP_Authentication_User,
        @vcSMTPAuth_UserPassword = @SPEDYEnvVars_SPD_SMTP_Authentication_Password

      SET @SUCCESSFLAG = 1
    END

    -- ========================================================================
    -- MESSAGE TYPE: USERS UPDATE MESSAGE
    -- ========================================================================
    IF ( @XML_HeaderSegment_Source = 'RMS12_MQSEND' AND @XML_HeaderSegment_Contents = 'Users' )
    BEGIN
  	  EXEC usp_SPD_MQ_LogMessage @D=@MsgTimeStamp, @M='Processing User Update Message'
      UPDATE SPD_MQComm_Message
      SET Message_Type_ID = 7
      WHERE ID = @MessageID
      
      UPDATE Security_User
        SET Email_Address = COALESCE(NULLIF(x.mikData_user_email, ''), x.mikData_user_login + '@michaels.com'),
        Date_Last_Modified = getdate()
      FROM OPENXML (@intXMLDocHandle, '/mikMessage/mikData[@type=''Users'']')
      WITH 
      (
         mikDataAttrs_id varchar(1000) '@id'
        ,mikDataAttrs_type varchar(1000) '@type'
        ,mikDataAttrs_action varchar(1000) '@action'
        ,mikData_user_login varchar(1000) 'user_id' -- user_id in the message is the loginid
        ,mikData_user_name varchar(1000) 'user_name' -- this is the full name
        ,mikData_user_email varchar(1000) 'user_email' -- user email addy
      ) x
      WHERE UserName = x.mikData_user_login AND NULLIF(x.mikData_user_email, '') IS NOT NULL

      INSERT INTO Security_User
      (
        UserName,
        [Password],
        Email_Address
      )
      SELECT x.mikData_user_login, 'c13v3r_pwd', 
        COALESCE(NULLIF(x.mikData_user_email, ''), x.mikData_user_login + '@michaels.com')
      FROM OPENXML (@intXMLDocHandle, '/mikMessage/mikData[@type=''Users'']')
      WITH 
      (
         mikDataAttrs_id varchar(1000) '@id'
        ,mikDataAttrs_type varchar(1000) '@type'
        ,mikDataAttrs_action varchar(1000) '@action'
        ,mikData_user_login varchar(1000) 'user_id' -- user_id in the message is the loginid
        ,mikData_user_name varchar(1000) 'user_name' -- this is the full name
        ,mikData_user_email varchar(1000) 'user_email' -- user email addy
      ) x
      WHERE NOT EXISTS (SELECT * FROM Security_User WHERE UserName = x.mikData_user_login)
      AND NULLIF(mikData_user_login, '') IS NOT NULL

      SET @MichaelsEmailRecipients = @SPEDYEnvVars_SPD_Email_FromAddress
      IF (@SPEDYEnvVars_Test_Mode = 1) SET @MichaelsEmailRecipients = @SPEDYEnvVars_Test_Mode_Email_Address

      SET @EmailSubject = 'SPEDY has received a User update from RMS.'
      --IF (@SPEDYEnvVars_Test_Mode = 1) SET @EmailSubject = '[' + @SPEDYEnvVars_Environment_Name + '] ' + @EmailSubject
      
      -- *** Michaels Email
      SET @EmailBody = '<font face="Arial" size="2"><p>' + @EmailSubject + '  </p><p>You may need to <a href="' + @SPEDYEnvVars_SPD_Admin_URL + '">login to the SPEDY admin tools</a> to modify user permissions.</p></font>'
      EXEC sp_SQLSMTPMail
        @vcSender = @SPEDYEnvVars_SPD_Email_FromAddress,
        @vcFrom = @SPEDYEnvVars_SPD_Email_FromAddress,
        @vcTo = @MichaelsEmailRecipients,
        @vcCC = @SPEDYEnvVars_SPD_Email_CCAddress,
        @vcBCC = @SPEDYEnvVars_SPD_Email_BCCAddress,
        @vcSubject = @EmailSubject,
        @vcHTMLBody = @EmailBody,
        @bAutoGenerateTextBody = 1,
        @vcSMTPServer = @SPEDYEnvVars_SPD_SMTP_Server,
        @cDSNOptions = '2',
        @bAuthenticate = @SPEDYEnvVars_SPD_SMTP_Authentication_Required,
        @vcSMTPAuth_UserName = @SPEDYEnvVars_SPD_SMTP_Authentication_User,
        @vcSMTPAuth_UserPassword = @SPEDYEnvVars_SPD_SMTP_Authentication_Password

      SET @SUCCESSFLAG = 1
    END

    -- ========================================================================
    -- MESSAGE TYPE: SUPPLIER UPDATE MESSAGE
    -- ========================================================================
    IF ( @XML_HeaderSegment_Source = 'ORFN_MQSEND' AND @XML_HeaderSegment_Contents = 'Supplier' )
    BEGIN
  	  EXEC usp_SPD_MQ_LogMessage @D=@MsgTimeStamp, @M='Processing Supplier (Vendor) Update Message'

      UPDATE SPD_MQComm_Message
      SET Message_Type_ID = 8
      WHERE ID = @MessageID
      
      UPDATE SPD_Vendor
        SET Vendor_Number = x.mikData_supplier_nbr,
        Vendor_Name = x.mikData_supplier_name,
        Vendor_Type = x.mikData_vendor_type,
        --PaymentTerms = x.mikData_payment_terms_cd,
        --NAK 7/5/2011: Take this out until Michaels fixes this to work in inbound messages
        --EDIFlag = case when x.mikData_msi_po_edi_flag = 'Y' then 1 else 0 end,
        FreightTerms = x.mikData_freight_terms,
        CurrencyCode = CASE WHEN x.mikData_currency_cd = 'CAN' THEN 'CAD' ELSE x.mikData_currency_cd END,
        Date_Last_Modified = getdate()
      FROM OPENXML (@intXMLDocHandle, '/mikMessage/mikData[@type=''Supplier'']')
      WITH 
      (
         mikDataAttrs_id varchar(1000) '@id'
        ,mikDataAttrs_type varchar(1000) '@type'
        ,mikDataAttrs_action varchar(1000) '@action'
        ,mikData_supplier_nbr varchar(1000) 'supplier_nbr'
        ,mikData_supplier_name varchar(1000) 'supplier_name' 
        ,mikData_vendor_type varchar(1000) 'vendor_type'
        ,mikData_payment_terms_cd varchar(1000) 'payment_terms_cd'
        ,mikData_msi_po_edi_flag varchar(1000) 'msi_po_edi_flag'
        ,mikData_freight_terms varchar(1000) 'freight_terms'
        ,mikData_currency_cd varchar(1000) 'currency_cd'
      ) x
      WHERE Vendor_Number = x.mikData_supplier_nbr
     
     
      INSERT INTO SPD_Vendor
      (
        Vendor_Number, Vendor_Name, Vendor_Type, 
        --PaymentTerms, 'NAK: Update the payment terms after the insert using node where address_type=04 
        EDIFlag,
        FreightTerms, CurrencyCode, Date_Last_Modified
      )
      SELECT DISTINCT 
		x.mikData_supplier_nbr, x.mikData_supplier_name, x.mikData_vendor_type,
		--x.mikData_payment_terms_cd, 
		case when x.mikData_msi_po_edi_flag = 'Y' then 1 else 0 end,
        x.mikData_freight_terms, CASE WHEN x.mikData_currency_cd = 'CAN' THEN 'CAD' else x.mikData_currency_cd END, getdate()
      FROM OPENXML (@intXMLDocHandle, '/mikMessage/mikData[@type=''Supplier'']')
      WITH 
      (
         mikDataAttrs_id varchar(1000) '@id'
        ,mikDataAttrs_type varchar(1000) '@type'
        ,mikDataAttrs_action varchar(1000) '@action'
        ,mikData_supplier_nbr varchar(1000) 'supplier_nbr'
        ,mikData_supplier_name varchar(1000) 'supplier_name'
        ,mikData_vendor_type varchar(1000) 'vendor_type'
        ,mikData_payment_terms_cd varchar(1000) 'payment_terms_cd'
        ,mikData_msi_po_edi_flag varchar(1000) 'msi_po_edi_flag'
        ,mikData_freight_terms varchar(1000) 'freight_terms'
        ,mikData_currency_cd varchar(1000) 'currency_cd'
      ) x
      WHERE NOT EXISTS (SELECT * FROM SPD_Vendor WHERE Vendor_Number = x.mikData_supplier_nbr)

		--NAK 7/5/2011:  Rule defined by Michaels
      --UPDATE Vendor Payment Terms using the node where address_type = 04
      UPDATE SPD_Vendor
      SET 
        PaymentTerms = x.mikData_payment_terms_cd,
        Date_Last_Modified = getdate()
      FROM OPENXML (@intXMLDocHandle, '/mikMessage/mikData[@type=''Supplier'']')
      WITH 
      (
         mikDataAttrs_id varchar(1000) '@id'
        ,mikDataAttrs_type varchar(1000) '@type'
        ,mikDataAttrs_action varchar(1000) '@action'
        ,mikData_supplier_nbr varchar(1000) 'supplier_nbr'
        ,mikData_supplier_name varchar(1000) 'supplier_name' 
        ,mikData_vendor_type varchar(1000) 'vendor_type'
        ,mikData_payment_terms_cd varchar(1000) 'payment_terms_cd'
        ,mikData_msi_po_edi_flag varchar(1000) 'msi_po_edi_flag'
        ,mikData_freight_terms varchar(1000) 'freight_terms'
        ,mikData_currency_cd varchar(1000) 'currency_cd'
        ,mikData_address_type varchar(1000) 'address_type'
      ) x
      WHERE Vendor_Number = x.mikData_supplier_nbr
		AND x.mikData_address_type = '04'

      SET @MichaelsEmailRecipients = @SPEDYEnvVars_SPD_Email_FromAddress
      IF (@SPEDYEnvVars_Test_Mode = 1) SET @MichaelsEmailRecipients = @SPEDYEnvVars_Test_Mode_Email_Address

      SET @EmailSubject = 'SPEDY has received a Supplier update from RMS.'
      IF (@SPEDYEnvVars_Test_Mode = 1) SET @EmailSubject = '[' + @SPEDYEnvVars_Environment_Name + '] ' + @EmailSubject
      
	  IF (@SPEDYEnvVars_Test_Mode = 1) PRINT 'Sending Email ' + @EmailSubject
      -- *** Michaels Email
      SET @EmailBody = '<font face="Arial" size="2"><p>' + @EmailSubject + '  </p><p>This is an informational message only. No action is required.</p></font>'
      EXEC sp_SQLSMTPMail
        @vcSender = @SPEDYEnvVars_SPD_Email_FromAddress,
        @vcFrom = @SPEDYEnvVars_SPD_Email_FromAddress,
        @vcTo = @MichaelsEmailRecipients,
        @vcCC = @SPEDYEnvVars_SPD_Email_CCAddress,
        @vcBCC = @SPEDYEnvVars_SPD_Email_BCCAddress,
        @vcSubject = @EmailSubject,
        @vcHTMLBody = @EmailBody,
        @bAutoGenerateTextBody = 1,
        @vcSMTPServer = @SPEDYEnvVars_SPD_SMTP_Server,
        @cDSNOptions = '2',
        @bAuthenticate = @SPEDYEnvVars_SPD_SMTP_Authentication_Required,
        @vcSMTPAuth_UserName = @SPEDYEnvVars_SPD_SMTP_Authentication_User,
        @vcSMTPAuth_UserPassword = @SPEDYEnvVars_SPD_SMTP_Authentication_Password

      SET @SUCCESSFLAG = 1
    END
    
    -- ========================================================================
    -- MESSAGE TYPE: SUPPLIER EDI UPDATE MESSAGE
    -- ========================================================================
    
    IF ( @XML_HeaderSegment_Source = 'RMS12_MQSEND' AND @XML_HeaderSegment_Contents = 'SupsEDI' )
    BEGIN
  	  EXEC usp_SPD_MQ_LogMessage @D=@MsgTimeStamp, @M='Processing Supplier (Vendor) EDI Update Message'

      UPDATE SPD_MQComm_Message
      SET Message_Type_ID = 8
      WHERE ID = @MessageID
      
      UPDATE SPD_Vendor 
        set EDIFlag = case when x.mikData_msi_po_edi_flag = 'Y' then 1 else 0 end,
        Date_Last_Modified = getdate()
      FROM OPENXML (@intXMLDocHandle, '/mikMessage/mikData[@type=''SupsEDI'']')
      WITH 
      (
         mikDataAttrs_id varchar(1000) '@id'
        ,mikDataAttrs_type varchar(1000) '@type'
        ,mikDataAttrs_action varchar(1000) '@action'
        ,mikData_supplier_nbr varchar(1000) 'supplier'
        ,mikData_msi_po_edi_flag varchar(1000) 'edi_po_ind'
      ) x
      WHERE Vendor_Number = convert(bigint, replace(x.mikData_supplier_nbr, '.0', ''))
      
      SET @MichaelsEmailRecipients = @SPEDYEnvVars_SPD_Email_FromAddress
      IF (@SPEDYEnvVars_Test_Mode = 1) SET @MichaelsEmailRecipients = @SPEDYEnvVars_Test_Mode_Email_Address

      SET @EmailSubject = 'SPEDY has received a Supplier EDI update from RMS.'
      IF (@SPEDYEnvVars_Test_Mode = 1) SET @EmailSubject = '[' + @SPEDYEnvVars_Environment_Name + '] ' + @EmailSubject
      
	  IF (@SPEDYEnvVars_Test_Mode = 1) PRINT 'Sending Email ' + @EmailSubject
      -- *** Michaels Email
      SET @EmailBody = '<font face="Arial" size="2"><p>' + @EmailSubject + '  </p><p>This is an informational message only. No action is required.</p></font>'
      EXEC sp_SQLSMTPMail
        @vcSender = @SPEDYEnvVars_SPD_Email_FromAddress,
        @vcFrom = @SPEDYEnvVars_SPD_Email_FromAddress,
        @vcTo = @MichaelsEmailRecipients,
        @vcCC = @SPEDYEnvVars_SPD_Email_CCAddress,
        @vcBCC = @SPEDYEnvVars_SPD_Email_BCCAddress,
        @vcSubject = @EmailSubject,
        @vcHTMLBody = @EmailBody,
        @bAutoGenerateTextBody = 1,
        @vcSMTPServer = @SPEDYEnvVars_SPD_SMTP_Server,
        @cDSNOptions = '2',
        @bAuthenticate = @SPEDYEnvVars_SPD_SMTP_Authentication_Required,
        @vcSMTPAuth_UserName = @SPEDYEnvVars_SPD_SMTP_Authentication_User,
        @vcSMTPAuth_UserPassword = @SPEDYEnvVars_SPD_SMTP_Authentication_Password

      SET @SUCCESSFLAG = 1
    END
    
    
    -- ========================================================================
	-- Now Pass the Message into the Item Maint Process
    -- ========================================================================
    DECLARE @IMStatus bit
    Set @msg = 'Calling Item Maint Process to check message ID: ' + convert(varchar(20),@MessageID) + ' ( Record No. ' + convert(varchar(20),@MessageRecNo) + ' )'
	Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Calling Item Maint Process to check message ID: ')
	EXEC usp_SPD_MQ_LogMessage @D=@MsgTimeStamp, @M=@msg
	EXEC @IMStatus = usp_SPD_ItemMaint_ProcessIncomingMessage @MessageID = @MessageID, @strXMLDoc = @strXMLDoc, @Debug=1, @LTS = @MsgTimeStamp
	IF @SUCCESSFLAG = 0
		SET @SUCCESSFLAG = @IMStatus

    -- ============================================================================================================
	-- Now that message has been processed by Item Maint, see if Update Item Master from New Item needs to be run
    -- ============================================================================================================
    IF @UpdateIMFromNI = 1
    BEGIN
		EXEC usp_SPD_MQ_LogMessage @D=@MsgTimeStamp, @M='New Item Complete: Updating Item Master with New Item SPEDY Only Data'
		EXEC usp_SPD_MQComm_UpdateItemMaster @BatchID = @UpdateBID, @LTS = @MsgTimeStamp, @debug = 1		    
    END

--***************************************************************************************************************************
-- PURCHASE ORDER MESSAGES
--***************************************************************************************************************************
	
	DECLARE @POSuccess int

	-- ========================================================================
    -- MESSAGE TYPE: 50 - Seasonal Purchase Order Message
    -- ========================================================================
    IF ( @XML_HeaderSegment_Source = 'RMS6_MQSEND' AND @XML_HeaderSegment_Contents = 'SeasonalPO' )
    BEGIN      
  	  
		--Log Event
		Set @msg = 'Calling PO_Proccess_Purchase_Order_Message to process message ID: ' + convert(varchar(20),@MessageID)  	  
		Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Calling PO_Proccess_Purchase_Order_Message to process message ID: ')
		EXEC usp_SPD_MQ_LogMessage @D=@MsgTimeStamp, @M=@msg

		--Update Message Type
		UPDATE SPD_MQComm_Message
		SET Message_Type_ID = 50
		WHERE ID = @MessageID

		--Process Message
		EXEC @POSuccess = PO_Proccess_Purchase_Order_Message @Message_ID = @MessageID, @Current_Date_Time = @MsgTimeStamp

		SET @SUCCESSFLAG = @POSuccess
	
	END

	-- ========================================================================
    -- MESSAGE TYPE: 51 - Ship Point Message
    -- ========================================================================
    IF ( @XML_HeaderSegment_Source = 'RMS12_MQSEND' AND @XML_HeaderSegment_Contents = 'ShipPoint' )
    BEGIN      
  	  
		--Log Event
		Set @msg = 'Calling PO_Proccess_Ship_Point_Message to process message ID: ' + convert(varchar(20),@MessageID)  	  
		Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Calling PO_Proccess_Ship_Point_Message to process message ID: ')
		EXEC usp_SPD_MQ_LogMessage @D=@MsgTimeStamp, @M=@msg

		--Update Message Type
		UPDATE SPD_MQComm_Message
		SET Message_Type_ID = 51
		WHERE ID = @MessageID

		--Process Message
		EXEC @POSuccess = PO_Proccess_Ship_Point_Message @Message_ID = @MessageID, @Current_Date_Time = @MsgTimeStamp

		SET @SUCCESSFLAG = @POSuccess
		
	END
	
	-- ========================================================================
    -- MESSAGE TYPE: 52 - Payment Terms Message
    -- ========================================================================
    IF ( @XML_HeaderSegment_Source = 'RMS12_MQSEND' AND @XML_HeaderSegment_Contents = 'PaymentTerms' )
    BEGIN      
  	  
		--Log Event
		Set @msg = 'Calling PO_Proccess_Payment_Terms_Message to process message ID: ' + convert(varchar(20),@MessageID)  	  
		Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Calling PO_Proccess_Payment_Terms_Message to process message ID: ')
		EXEC usp_SPD_MQ_LogMessage @D=@MsgTimeStamp, @M=@msg

		--Update Message Type
		UPDATE SPD_MQComm_Message
		SET Message_Type_ID = 52
		WHERE ID = @MessageID

		--Process Message
		EXEC @POSuccess = PO_Proccess_Payment_Terms_Message @Message_ID = @MessageID, @Current_Date_Time = @MsgTimeStamp

		SET @SUCCESSFLAG = @POSuccess
		
	END
	
	-- ========================================================================
    -- MESSAGE TYPE: 53 - Allocation Event Message
    -- ========================================================================
    IF ( @XML_HeaderSegment_Source = 'RMS12_MQSEND' AND @XML_HeaderSegment_Contents = 'AllocationEvent' )
    BEGIN      

		--Log Event
		Set @msg = 'Calling PO_Proccess_Allocation_Event_Message to process message ID: ' + convert(varchar(20),@MessageID)  	  
		Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Calling PO_Proccess_Allocation_Event_Message to process message ID: ')
		EXEC usp_SPD_MQ_LogMessage @D=@MsgTimeStamp, @M=@msg

		--Update Message Type
		UPDATE SPD_MQComm_Message
		SET Message_Type_ID = 53
		WHERE ID = @MessageID

		--Process Message
		EXEC @POSuccess = PO_Proccess_Allocation_Event_Message @Message_ID = @MessageID, @Current_Date_Time = @MsgTimeStamp

		SET @SUCCESSFLAG = @POSuccess

	END
	
	-- ========================================================================
    -- MESSAGE TYPE: 56 - Purchase Order Confirm Message
    -- ========================================================================
    IF ( @XML_HeaderSegment_Source = 'RMS12_MQSEND' AND @XML_HeaderSegment_Contents = 'SPEDYOrderConfirm' )
    BEGIN      

		--Log Event
		Set @msg = 'Calling PO_Proccess_Purchase_Order_Confirm_Message to process message ID: ' + convert(varchar(20),@MessageID)  	  
		Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Calling PO_Proccess_Purchase_Order_Confirm_Message to process message ID: ')
		EXEC usp_SPD_MQ_LogMessage @D=@MsgTimeStamp, @M=@msg

		--Update Message Type
		UPDATE SPD_MQComm_Message
		SET Message_Type_ID = 56
		WHERE ID = @MessageID

		--Process Message
		EXEC @POSuccess = PO_Proccess_Purchase_Order_Confirm_Message @Message_ID = @MessageID, @Current_Date_Time = @MsgTimeStamp

		SET @SUCCESSFLAG = @POSuccess

	END

	-- ========================================================================
    -- MESSAGE TYPE: 57 - Purchase Order Error Message
    -- ========================================================================
    IF ( @XML_HeaderSegment_Source = 'RMS12_MQSEND' AND @XML_HeaderSegment_Contents = 'SPEDYOrderError' )
    BEGIN      

		--Log Event
		Set @msg = 'Calling PO_Proccess_Purchase_Order_Error_Message to process message ID: ' + convert(varchar(20),@MessageID)  	  
		Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Calling PO_Proccess_Purchase_Order_Error_Message to process message ID: ')
		EXEC usp_SPD_MQ_LogMessage @D=@MsgTimeStamp, @M=@msg

		--Update Message Type
		UPDATE SPD_MQComm_Message
		SET Message_Type_ID = 57
		WHERE ID = @MessageID

		--Process Message
		EXEC @POSuccess = PO_Proccess_Purchase_Order_Error_Message @Message_ID = @MessageID, @Current_Date_Time = @MsgTimeStamp

		SET @SUCCESSFLAG = @POSuccess

	END
	
	
	-- ========================================================================
    -- MESSAGE TYPE: 58 - Purchase Order Receipt Message
    -- ========================================================================
    IF ( @XML_HeaderSegment_Source = 'RMS12_MQSEND' AND @XML_HeaderSegment_Contents = 'OrderReceipt' )
    BEGIN      

		--Log Event
		Set @msg = 'Calling PO_Proccess_Purchase_Order_Receipt_Message to process message ID: ' + convert(varchar(20),@MessageID)  	  
		Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Calling PO_Proccess_Purchase_Order_Receipt_Message to process message ID: ')
		EXEC usp_SPD_MQ_LogMessage @D=@MsgTimeStamp, @M=@msg

		--Update Message Type
		UPDATE SPD_MQComm_Message
		SET Message_Type_ID = 58
		WHERE ID = @MessageID

		--Process Message
		EXEC @POSuccess = PO_Proccess_Purchase_Order_Receipt_Message @Message_ID = @MessageID, @Current_Date_Time = @MsgTimeStamp

		SET @SUCCESSFLAG = @POSuccess

	END
	
	-- ========================================================================
    -- MESSAGE TYPE: 59 - Purchase Order Revision Message
    -- ========================================================================
    IF ( @XML_HeaderSegment_Source = 'OrderRevFromRMS12' AND @XML_HeaderSegment_Contents = 'OrderRevision' )
    BEGIN      

		--Log Event
		Set @msg = 'Calling PO_Proccess_Purchase_Order_Revision_Message to process message ID: ' + convert(varchar(20),@MessageID)  	  
		Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Calling PO_Proccess_Purchase_Order_Revision_Message to process message ID: ')
		EXEC usp_SPD_MQ_LogMessage @D=@MsgTimeStamp, @M=@msg

		--Update Message Type
		UPDATE SPD_MQComm_Message
		SET Message_Type_ID = 59
		WHERE ID = @MessageID

		--Process Message
		EXEC @POSuccess = PO_Proccess_Purchase_Order_Revision_Message @Message_ID = @MessageID, @Current_Date_Time = @MsgTimeStamp

		SET @SUCCESSFLAG = @POSuccess

	END

--***************************************************************************************************************************
-- END OF PURCHASE ORDER MESSAGES
--***************************************************************************************************************************
      
    -- ========================================================================
    -- OTHER UNUSED MESSAGES
    -- ========================================================================
    IF ( (@SUCCESSFLAG <> 1) AND ((SELECT Message_Type_ID FROM SPD_MQComm_Message WHERE ID = @MessageID) = -1) )
    BEGIN
      UPDATE SPD_MQComm_Message
      SET Message_Type_ID = 0
      WHERE ID = @MessageID

      SET @SUCCESSFLAG = 1
    END

    EXEC sp_xml_removedocument @intXMLDocHandle    

    -- ========================================================================
    -- SET STATUS TO COMPLETE
    -- ========================================================================
    IF ( @SUCCESSFLAG = 2 )
	BEGIN
		--DO NOT SET STATUS CHANGE AS WE WANT THIS TO BE PROCESSED THE NEXT TIME AROUND
		PRINT 'Message ' + CONVERT(varchar(20), @MessageID) + ' is being delayed.'
	END	
	ELSE IF ( @SUCCESSFLAG = 1 ) 
	BEGIN
	  INSERT INTO SPD_MQComm_Message_Status (Message_ID, Status_ID) VALUES (@MessageID, 3)
	  PRINT 'Message ' + CONVERT(varchar(20), @MessageID) + ' processed.'
	END
	ELSE
	BEGIN
	  INSERT INTO SPD_MQComm_Message_Status (Message_ID, Status_ID) VALUES (@MessageID, 0)
	  PRINT 'Message ' + CONVERT(varchar(20), @MessageID) + ' could not be processed.'
	END

    FETCH NEXT FROM myXMLMessages INTO @MessageID, @strXMLDoc, @MessageRecNo
  END	-- OUTER LOOP
  CLOSE myXMLMessages
  DEALLOCATE myXMLMessages

  IF @MessageCount > 0
	EXEC usp_SPD_MQ_LogMessage @D=@MsgTimeStamp, @M='P R O C E S S     E N D S'

  SET NOCOUNT OFF

GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- Oct 2010 - FJL updated to use a function to just check the first 2 chars of the Pack Item to make it more generic
-- =============================================
ALTER PROCEDURE [dbo].[sp_spd2_Batch_Exception_Component_Changes]
	@batchID bigint
AS
BEGIN
	SET NOCOUNT ON;

	declare @added varchar(max)
	declare @removed varchar(max)
	declare @lenAdd int
	declare @lenRemove int
	declare @changed int
	
	-- default return values
	set @lenAdd = 0
	set @lenRemove = 0
	set @changed = 0
	
	-- make sure the batch is D or DP type
	IF EXISTS (
		select * from spd_batch where dbo.udf_SPD_PackItemLeft2(pack_type) in ('D', 'DP','SB') -- OLD pack_type in ('D','D-PDQ','D-PIAB','DP','DP-PDQ','DP-PIAB') 
			and [ID] = @batchID )
	BEGIN
		-- get lists of skus removed or added to the pack
		select @added = SKUsAddedToPack, @removed = SKUSDeletedFromPack
		FROM dbo.udf_SPD_ItemMaint_GetPackChanges(@batchID)
		
		set @lenAdd = len(@added)
		set @lenRemove = len(@removed)
		
		-- count all QtyInPack changes (Component Qty) where the 
		select @changed = count(*)
		from spd_item_maint_items i
			inner join spd_batch b on i.batch_id = b.id
			inner join spd_item_master_changes c on i.id = c.item_maint_items_id
		where dbo.udf_SPD_PackItemLeft2(b.pack_type) in ('D', 'DP','SB')	--	OLD b.pack_type in ('D','D-PDQ','D-PIAB','DP','DP-PDQ','DP-PIAB')
			and c.field_name = 'QtyInPack'
			and i.batch_id = @batchID
		
	END
	
	select @lenAdd as AddLen, @lenRemove as RemovedLen, @changed as ChangeCount

END

GO


-- =============================================
-- Author:		Littlefield, Jeff
-- Create date: August 2010
-- Description:	Find Pack SKU info for a Batch
-- =============================================
ALTER PROCEDURE [dbo].[usp_SPD_Batch_GetNIPackInfo]
	@BatchID bigint
	, @BatchType int
AS
BEGIN
	SET NOCOUNT ON;
	IF @BatchType = 1	-- Search Domestic Land
	BEGIN
		Select 
			Replace(Left(I.Pack_Item_Indicator,2),'-','')	as PackIndicator
			, Count(*)										as NumRecs
			, H.Stock_Category								as StockCategory
			, H.Item_Type_Attribute							as ItemTypeAttr
		FROM SPD_Item_Headers H
			Join SPD_Items I	ON H.ID = I.Item_Header_ID
		WHERE H.Batch_ID =	@BatchID
			and Replace(Left(I.Pack_Item_Indicator,2),'-','') in ('D','DP','SB')
		Group By Replace(Left(I.Pack_Item_Indicator,2),'-',''), H.Stock_Category, H.Item_Type_Attribute
	END

	IF @BatchType = 2	-- Search Domestic Land
	BEGIN
		Select 
			Replace(Left([PackItemIndicator],2),'-','') as PackIndicator
			, Count(*)									as NumRecs
			, StockCategory								as StockCategory
			, ItemTypeAttribute							as ItemTypeAttr
		FROM SPD_Import_Items 
		WHERE Batch_ID =	@BatchID
			and Replace(Left([PackItemIndicator],2),'-','') in ('D','DP','SB')
		Group By Replace(Left([PackItemIndicator],2),'-',''), StockCategory, ItemTypeAttribute
	END
	
END

GO



ALTER PROCEDURE [dbo].[usp_SPD_ItemMaint_DeleteRecord] 
	@ID int
	, @batchID bigint
	, @UserID bigint = -1
	, @DeleteAll tinyint = 0
	
AS

declare @aID int, @aFN varchar(50), @aCOO varchar(50), @aUPC varchar(20), @aED varchar(50), @aCtr int, @aFV varchar(max)
declare @pii varchar(20)

select @pii = COALESCE(RTRIM(REPLACE(LEFT(COALESCE(c.[Field_Value], i.[PackItemIndicator], ''),2), '-', '')), '') from vwItemMaintItemDetail i 
    left outer join SPD_Item_Master_Changes c ON i.[ID] = c.[Item_Maint_Items_ID] and c.[Field_Name] = 'PackItemIndicator' and c.[Counter] = 0 
    where i.[ID] = @ID and i.[BatchID] = @batchID
    
IF ( (@pii != 'D' AND @pii != 'DP' AND @pii != 'SB') OR @DeleteAll = 1 )
begin

  declare row cursor for 
  SELECT 
		  [Item_Maint_Items_ID]
		  , [Field_Name]
		  , [Country_Of_Origin]
		  , [UPC]
		  , [Effective_Date]
		  , [Counter]
		  , [Field_Value]
	  FROM SPD_Item_Master_Changes
	  WHERE Item_Maint_Items_ID = @ID
		  and Item_Maint_Items_ID in (select ID from SPD_Item_Maint_Items where ID = @ID and Batch_ID = @batchID)
  		
  Open row
  FETCH NEXT FROM row 
	  INTO @aID, @aFN, @aCOO, @aUPC, @aED, @aCtr, @aFV;

  -- Delete Change Recs one at a time for audit purposes
  WHILE @@FETCH_STATUS = 0
  BEGIN
	  -- Delete the rec
	  DELETE FROM SPD_Item_Master_Changes
	  WHERE [Item_Maint_Items_ID] = @aID
	    and [Field_Name] = @aFN
	    and [Country_Of_Origin] = @aCOO
	    and [UPC] = @aUPC
	    and [Effective_Date] = @aED
	    and [Counter] = @aCtr
	  IF @@Rowcount > 0
	  BEGIN
	  -- Audit the Delete Manually since Trigger does not know who did it
		  INSERT SPD_AuditLog ( 
			  TableName, FieldName, OldValue, NewValue, ActionCode, ActionDate, UserLogin
			  , KeyValue1, KeyValue2, KeyValue3, KeyValue4, KeyValue5, KeyValue6
			  )
		  VALUES (
			  'SPD_Item_Master_Changes'
			  , 'Field_Value'
			  , convert(nvarchar(2000),@aFV)
			  , '*NA*'
			  , 'D'
			  , getdate()
			  , @UserID
			  , Convert(varchar(255),@aID)
			  , Convert(varchar(255),@aFN)
			  , Convert(varchar(255),@aCOO)
			  , Convert(varchar(255),@aUPC)
			  , Convert(varchar(255),@aED)
			  , Convert(varchar(255),@aCtr)
			  )
	  END
  	
	  FETCH NEXT FROM row 
	  INTO @aID, @aFN, @aCOO, @aUPC, @aED, @aCtr, @aFV;
  END
  CLOSE row;
  DEALLOCATE row;


	  ---- SPD_Item_Master_Changes .Item_Maint_Items_ID
	  --delete from SPD_Item_Master_Changes 
	  --where Item_Maint_Items_ID = @ID
	  --  and Item_Maint_Items_ID in (select ID from SPD_Item_Maint_Items where ID = @ID and Batch_ID = @batchID)

    -- SPD_Item_Maint_Items .ID .Batch_ID
  Declare @aBN bigint, @aSKU varchar(25), @aVendorNo bigint
  SELECT 
	  @aID = [ID]
	  , @aBN = Batch_ID
	  , @aSKU = Michaels_SKU
	  , @aVendorNo = Vendor_Number
  FROM SPD_Item_Maint_Items
  WHERE ID = @ID and Batch_ID = @batchID

  If @aID is Not NULL
  BEGIN
	  DELETE FROM SPD_Item_Maint_Items
	  WHERE ID = @ID and Batch_ID = @batchID
  	
	  INSERT SPD_AuditLog ( 
		  TableName, FieldName, OldValue, NewValue, ActionCode, ActionDate, UserLogin
		  , KeyValue1
		  )
	  VALUES (
		  'SPD_Item_Maint_Items'
		  , 'Batch_ID'
		  , convert(nvarchar(2000),@aBN)
		  , '*NA*'
		  , 'D'
		  , getdate()
		  , @UserID
		  , Convert(varchar(255),@aID)
		  )
    
  	  INSERT SPD_AuditLog ( 
		  TableName, FieldName, OldValue, NewValue, ActionCode, ActionDate, UserLogin
		  , KeyValue1
		  )
	  VALUES (
		  'SPD_Item_Maint_Items'
		  , 'Michaels_SKU'
		  , convert(nvarchar(2000),@aSKU)
		  , '*NA*'
		  , 'D'
		  , getdate()
		  , @UserID
		  , Convert(varchar(255),@aID)
		  )
  		
  	  INSERT SPD_AuditLog ( 
		  TableName, FieldName, OldValue, NewValue, ActionCode, ActionDate, UserLogin
		  , KeyValue1
		  )
	  VALUES (
		  'SPD_Item_Maint_Items'
		  , 'Vendor_Number'
		  , convert(nvarchar(2000),@aVendorNo)
		  , '*NA*'
		  , 'D'
		  , getdate()
		  , @UserID
		  , Convert(varchar(255),@aID)
		  )
  END

end
	
  
GO

/*
-- =============================================
-- Author:		Littlefield, Jeff
-- Create date: June 2010
-- Description:	Return List of DP / D parents for Child SKU that don't match passed in PackSKU
-- Change Log
	FJL July 29, 2010 Add the PackSKU parm and only return the records that don't match on the PackSKU

TEST CODE
usp_SPD_ItemMaint_GetParentSKUs @ChildSKU = '10006150'
-- =============================================
*/
ALTER PROCEDURE [dbo].[usp_SPD_ItemMaint_GetParentSKUs]
	@ChildSKU varchar(25)
	, @PackSKU varchar(25) = ''
AS
BEGIN
	SET NOCOUNT ON;

declare @D_SKU varchar(max)
declare @DP_SKU varchar(max)

SELECT @D_SKU = '', @DP_SKU= ''

SELECT 
	@D_SKU = @D_SKU + 
		Case WHEN SKU.[Item_Type] in ('D','SB')		THEN SKU.Michaels_SKU + ', '
			ELSE '' END
	, @DP_SKU = @DP_SKU +
		Case WHEN SKU.[Item_Type] =  'DP'	THEN SKU.Michaels_SKU + ', '
			ELSE '' END
FROM SPD_Item_Master_PackItems PKI
	Join SPD_Item_Master_SKU SKU	on PKI.Pack_SKU = SKU.Michaels_SKU
WHERE Child_SKU = @ChildSKU 
	and PKI.Pack_SKU <> @PackSKU
    
IF len(@D_SKU) > 0
	SET @D_SKU = left(@D_SKU,len(@D_SKU)-2)

IF len(@DP_SKU) > 0
	SET @DP_SKU = left(@DP_SKU,len(@DP_SKU)-2)

SELECT  @D_SKU	as D_SKUs
	, @DP_SKU	as DP_SKUs
END

GO


/*
------------------------------------------------------------------------------------------------------------------------------------------------
Author:			Littlefield, Jeff
Create date:	August 2010
Description:	Process Incoming RMS Message for Item Maintenance.  This routine evaluates the passed in message for a variety of Inserts and 
				Updates to the Item Master Tables.  In addition, It checks if the message is a Item Maintenenace Batch Confirmation message and
				updates the log table that keeps track of messages sent / confirmed.  Once all messages have been confirmed the Batch Completion 
				Process is run.
				All Messages are selected into Temp tables for ease of testing and processing

Calls Procs:	[usp_SPD_ItemMaint_CompleteOrErrorBatch]	-- To process a completed batch or log an error
				[usp_SPD_ItemMaint_ProcessCostChange]		-- To update the costs based on future cost records and send ImportBurden if nec.
				[usp_SPD_MQ_LogMessage]						-- Log Status messages to Message Log table: [SPD_MQComm_Message_Log]
Change Log:
	FJL - 09/21/2010 Add Logic to handle UCP Deletes
	FJL - 09/29/2010 Added logic to handle time stamps on Batch Confirm and Error messages
	FJL - 11/04/2010 Added logic to update the Vendor Table with Agent info on Insert and Update
	NAK - 07/01/2011 Added logic to set the Displayer_Cost when inserting data into the SPD_Item_Master_SKU table (for New Items)
	wet - 04/19/2017 Added logic to send message if master qty or dimension change results in import burden change
	MWM - 11/09/2017 Added Each (EA) type Dimensions
	MWM - 9/17/2024 remove gtin functionality
------------------------------------------------------------------------------------------------------------------------------------------------
*/
ALTER PROCEDURE [dbo].[usp_SPD_ItemMaint_ProcessIncomingMessage] 
	@strXMLDoc XML
	, @MessageID bigint
	, @Debug int = 1
	, @LTS datetime = null
AS
BEGIN

if @LTS is NULL
	SET @LTS = getdate()

Declare @cMessageID varchar(20)
Set @cMessageID = convert(varchar(20),@MessageID)

DECLARE @XML_HeaderSegment_Source varchar(1000)
DECLARE @XML_HeaderSegment_Contents varchar(1000)
DECLARE @XML_HeaderSegment_ThreadID varchar(1000)
DECLARE @XML_HeaderSegment_PublishTime varchar(1000)
DECLARE @XML_DataSegment_ID varchar(1000)
DECLARE @XML_DataSegment_Type varchar(1000)
DECLARE @XML_DataSegment_Action varchar(1000)
DECLARE @XML_DataSegment_LastID varchar(1000)

DECLARE @SUCCESSFLAG bit
DECLARE @MsgType int
DECLARE @SUCCESSMSG varchar(max)
Declare @MsgID varchar(100), @SKU varchar(100), @PrimaryInd varchar(10)
Declare @ErrorMsg1 varchar(1000), @ErrorMsg2 varchar(1000)
DECLARE @BatchID bigint, @CompletedMsg int , @SentMsg int, @ErrorMsg int, @tempVar varchar(1000), @TotalMsg int
declare @msgs varchar(max)
declare @temp varchar(100)
declare @DomDate datetime, @ImportDate datetime
declare @mySKU varchar(10), @myVendorNumber bigint, @Desc varchar(3000), @myAction varchar(30)	--, @MinDate datetime
Declare @VendorNo bigint, @COO varchar(50), @NewTotalCost decimal(18,6), @CountryOfOrigin varchar(10)
declare @t1 table  (ElementID int, Element varchar(max) )
declare @r0 varchar(1000), @r1 varchar(1000), @r2 varchar(1000), @r3 varchar(1000), @r4 varchar(1000), @r5 varchar(1000)
declare @msg varchar(2000)
Declare @retCode int, @dotPos int
Declare @procUserID int
Declare @ProcessTimeStamp varchar(100)
Declare @MaxProcessTimeStamp varchar(100)
DECLARE @STAGE_COMPLETED int
DECLARE @STAGE_WAITINGFORSKU int
DECLARE @STAGE_DBC int
declare @OldEachesMasterCase int = 0
declare @NewEachesMasterCase int = 0
declare @OldMasterLength decimal(18,6) = 0
declare @OldMasterWidth decimal(18,6) = 0
declare @OldMasterHeight decimal(18,6) = 0
declare @NewMasterLength decimal(18,6) = 0
declare @NewMasterWidth decimal(18,6) = 0
declare @NewMasterHeight decimal(18,6) = 0
declare @VendorType int
declare @DutyPct decimal(18,6)
declare @OceanFrt decimal(18,6)
declare @OldDim varchar(100)
declare @NewDim varchar(100)
declare @Lmsg varchar(1000)
declare @PriInd varchar(20)

SET NOCOUNT ON

DECLARE  @intXMLDocHandle int
DECLARE  @SPEDYRefString varchar(100)
DECLARE  @SPEDYBatchID bigint
SET @SPEDYRefString = NULL
SET @SPEDYBatchID = NULL
-- Prepare the XML Doc

-- Flag for if message was processed or not
SET @SUCCESSFLAG = 0
SET @retCode = 0

Set @procUserID = -3	-- Flag in Item master that this record was changed / inserted by the Message process

--Set Stages based on Workflow for the error
select @STAGE_COMPLETED = [id] from SPD_Workflow_Stage where Workflow_id = 2 and Stage_Type_id = 4
select @STAGE_WAITINGFORSKU = [id] from SPD_Workflow_Stage where Workflow_id = 2 and Stage_Type_id = 3
select @STAGE_DBC = [id] from SPD_Workflow_Stage where Workflow_id = 2 and Stage_Type_id = 6

EXEC sp_xml_preparedocument @intXMLDocHandle OUTPUT, @strXMLDoc

SELECT
  @XML_HeaderSegment_Source = mikHeader_Source,
  @XML_HeaderSegment_Contents = mikHeader_Contents,
  @XML_HeaderSegment_ThreadID = mikHeader_ThreadID,
  @XML_HeaderSegment_PublishTime = mikHeader_PublishTime
FROM OPENXML (@intXMLDocHandle, '/mikMessage')
WITH
(
   mikHeader_Source varchar(1000) 'mikHeader/Source'
  ,mikHeader_Contents varchar(1000) 'mikHeader/Contents'
  ,mikHeader_ThreadID varchar(1000) 'mikHeader/ThreadID'
  ,mikHeader_PublishTime varchar(1000) 'mikHeader/PublishTime'
)

--SELECT @XML_HeaderSegment_Source as XML_HeaderSegment_Source
--, @XML_HeaderSegment_Contents as XML_HeaderSegment_Contents
--, @MessageID as messageID

-- Check for Message Types that we are interested in
IF @XML_HeaderSegment_Source = 'RIB.etItemsFromRMS'
BEGIN
	IF @Debug=1  Print 'Processing etItemsFromRMS for Item Maint. MessageID: ' + convert(varchar(20),@MessageID)
	-- *************************************************************
	-- Get any SKU Info.  Should be only one SKU per message based on Michaels Documentation
	-- *************************************************************
	SELECT
	  * into #SKU
	FROM OPENXML (@intXMLDocHandle, '/mikMessage')
	WITH
	(
	   mikHeader_Source varchar(1000) 'mikHeader/Source'
	  ,mikHeader_Contents varchar(1000) 'mikHeader/Contents'
	  ,mikHeader_ThreadID varchar(1000) 'mikHeader/ThreadID'
	  ,mikHeader_PublishTime varchar(1000) 'mikHeader/PublishTime'
	) hdr
	INNER JOIN (
	  SELECT top 1 *
	  FROM OPENXML (@intXMLDocHandle, '/mikMessage/mikData[@type="Sku"]')
	  WITH
	  (	 mikDataAttrs_ID varchar(1000) '@id'
		,mikDataAttrs_Type varchar(1000) '@type'
		,mikData_Action varchar(1000) '@action'
		,michaels_sku varchar(1000) 'item'
		,pack_ind varchar(1000) 'pack_ind'
		,simple_pack_ind varchar(1000) 'simple_pack_ind'
		,dept varchar(1000) 'dept'
		,class varchar(1000) 'class'
		,subclass varchar(1000) 'subclass'
		,item_status varchar(1000) 'overall_item_status'
		,item_desc varchar(1000) 'item_desc'
		,item_type_attr varchar(1000) 'item_type_attr'
		,hyb_type varchar(1000) 'hyb_type'
		,hyb_source_DC varchar(1000) 'source_wh'
		,stock_category varchar(1000) 'stock_category'
		,store_orderable_ind varchar(1000) 'store_orderable_ind'
		,inv_control varchar(1000) 'inv_control'
		,repl_ind varchar(1000) 'repl_ind'
		,store_sup_zone_group varchar(1000) 'store_sup_zone_group'
		,wh_sup_zone_group varchar(1000) 'wh_sup_zone_group'
		,pack_item_type varchar(1000) 'pack_item_type'
		,sellable_ind varchar(1000) 'sellable_ind'
		,hazmat_ind varchar(1000) 'hazmat_ind'
		,flammable_ind varchar(1000) 'flammable_ind'
		,haz_container_type varchar(1000) 'container_type'
		,haz_container_size varchar(1000) 'package_size'
		,haz_msds_uom varchar(1000) 'package_uom'
		,clearance_ind varchar(1000) 'clearance_ind'
		,discountable_ind varchar(1000) 'discountable_ind'
		,sku_group	varchar(1000) 'sku_group'
		,create_datetime varchar(1000) 'create_datetime'
		,last_update_datetime varchar(1000) 'last_update_datetime'
		,last_update_id varchar(1000) 'last_update_id'
		,conversion_date varchar(1000) 'hyb_cnv_date'
		,stocking_strategy_code varchar(1000) 'mik_strategy_code'
	  )
	) data ON data.michaels_sku IS NOT NULL	and data.mikData_Action in ('Insert', 'Update')
	
	--NAK 11/8/2011: Adding code to get BatchID from message
	SELECT @SPEDYRefString = mikData_spedy_item_id
	FROM OPENXML (@intXMLDocHandle, '/mikMessage/mikData[@type="Sku"]')
    WITH 
    (
         mikDataAttrs_id varchar(1000) '@id'
        ,mikDataAttrs_type varchar(1000) '@type'
        ,mikDataAttrs_action varchar(1000) '@action'
        ,mikData_spedy_item_id varchar(1000) 'spedy_item_id'
    ) data
  
	IF (LEN(@SPEDYRefString) > 0)
	BEGIN
		IF (CHARINDEX('.', @SPEDYRefString) > 0)
		BEGIN
			IF (ISNUMERIC(SUBSTRING(@SPEDYRefString, 0, CHARINDEX('.', @SPEDYRefString))) = 1)
			BEGIN
				SET @SPEDYBatchID = SUBSTRING(@SPEDYRefString, 0, CHARINDEX('.', @SPEDYRefString))
			END        
		END
	END
	
	IF (select count(*) from #SKU) > 0
	BEGIN
		IF @Debug=1  Print 'Processing etItemsFromRMS for Item Maint - SKU'
		set @msg = 'Processing Item Maint - SKU...' + (Select top 1 convert(varchar(20),michaels_sku) from #SKU) + ' (Message: ' + @cMessageID + ')'
		Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing Item Maint - SKU...')
		EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg

		BEGIN TRY
			UPDATE SPD_Item_Master_SKU
			  Set 
			   [Item_Status] = S.item_status
			  ,[Department_Num] = S.dept
			  ,[Class_Num] = S.class
			  ,[Sub_Class_Num] = S.subclass
			  ,[Hybrid_Type] = S.hyb_type
			  ,[Hybrid_Source_DC] = S.hyb_source_DC
			  ,[Hybrid_Conversion_Date] = CAST(S.Conversion_Date as datetime)		  
			  ,[Stock_Category] = S.stock_category
			  ,[Item_Type] = CASE
						WHEN S.pack_item_type = 'P'	THEN SKU.[Item_Type]		--'D'	-- Let New Item handle this update
						WHEN S.pack_item_type = 'D'	THEN SKU.[Item_Type]		--'DP'	-- Let New Item Handle this update
						WHEN S.pack_item_type = 'S' 
							and Exists (Select Child_SKU from SPD_Item_Master_PackItems where Child_SKU = S.michaels_sku) THEN 'C'
						ELSE ' '
						END
			  ,[Allow_Store_Order] = S.store_orderable_ind
			  ,[Inventory_Control] = case S.inv_control when 'R' then 'Y' when 'B' then 'N' else NULL end
			  ,[Auto_Replenish] = S.repl_ind
			  ,[Store_Supplier_Zone_Group] = S.store_sup_zone_group
			  ,[WHS_Supplier_Zone_Group] = S.wh_sup_zone_group
			  ,[Pack_Item_Indicator] = S.pack_ind
			  ,[Item_Desc] = S.item_desc
			  ,[Item_Type_Attribute] = S.item_type_attr
			  ,[Clearance_Indicator] = S.clearance_ind
--removed 2020-07-15, RMS is incorrectly sending blank values
--			  ,[Hazardous] = S.hazmat_ind
--			  ,[Hazardous_Flammable] = S.flammable_ind
--			  ,[Hazardous_Container_Type] = Coalesce(( Select top 1 List_Value FROM List_Values WHERE List_Value_Group_ID = 8 and S.haz_container_type = RMS_Field_Value ), '')
--			  ,[Hazardous_Container_Size] = S.haz_container_size
--			  ,[Hazardous_MSDS_UOM] = Coalesce(( Select top 1 List_Value FROM List_Values WHERE List_Value_Group_ID = 9 and S.haz_msds_uom = RMS_Field_Value ), '')	--S.haz_msds_uom
			  ,[Simple_Pack_Indicator] = S.simple_pack_ind
			  ,[Discountable] = S.discountable_ind
			  ,[SKU_Group] = Coalesce(( Select top 1 List_Value FROM List_Values WHERE List_Value_Group_ID = 15 and S.sku_group = RMS_Field_Value ), '')
			  ,[Update_User_ID] = @procUserID
			  ,[Date_Last_Modified] = getdate()
			  ,STOCKING_STRATEGY_CODE = case when S.stocking_strategy_code = '' then NULL else S.stocking_strategy_code end
			FROM SPD_Item_Master_SKU SKU
				join #SKU S on SKU.michaels_sku = S.michaels_sku

			--NAK 7/1/2011: Added the Displayer_Cost
			INSERT SPD_Item_Master_SKU (
			   [Michaels_SKU]
			  ,[Item_Status]
			  ,[Department_Num]
			  ,[Class_Num]
			  ,[Sub_Class_Num]
			  ,[Hybrid_Type]
			  ,[Hybrid_Source_DC]
			  ,[Hybrid_Conversion_Date]
			  ,[Stock_Category]
			  ,[Item_Type]
			  ,[Allow_Store_Order]
			  ,[Inventory_Control]
			  ,[Auto_Replenish]
			  ,[Store_Supplier_Zone_Group]
			  ,[WHS_Supplier_Zone_Group]
			  ,[Pack_Item_Indicator]
			  ,[Displayer_Cost]
			  ,[Item_Desc]
			  ,[Item_Type_Attribute]
			  ,[Clearance_Indicator]
			  ,[Hazardous]
			  ,[Hazardous_Flammable]
			  ,[Hazardous_Container_Type]
			  ,[Hazardous_Container_Size]
			  ,[Hazardous_MSDS_UOM]
			  ,[Simple_Pack_Indicator]
			  ,[Discountable]
			  ,[SKU_Group]
			  ,[Created_User_ID]
			  ,[Date_Created]
			  ,STOCKING_STRATEGY_CODE )
			SELECT
			   [Michaels_SKU] = S.michaels_sku
			  ,[Item_Status] = S.item_status
			  ,[Department_Num] = S.dept
			  ,[Class_Num] = S.class
			  ,[Sub_Class_Num] = S.subclass
			  ,[Hybrid_Type] = S.hyb_type
			  ,[Hybrid_Source_DC] = S.hyb_source_DC
			  ,[Hybrid_Conversion_Date] = CAST(S.Conversion_Date as datetime)
			  ,[Stock_Category] = S.stock_category
			  ,[Item_Type] = CASE
						WHEN S.pack_item_type = 'P'	THEN CASE WHEN S.sellable_ind = 'Y' THEN 'SB' ELSE 'D' END
						WHEN S.pack_item_type = 'D'	THEN 'DP'
						WHEN S.pack_item_type = 'S' 
							and Exists (Select Child_SKU from SPD_Item_Master_PackItems where Child_SKU = S.michaels_sku) THEN 'C'
						ELSE ' '
						END
			  ,[Allow_Store_Order] = S.store_orderable_ind
			  ,[Inventory_Control] = case S.inv_control when 'R' then 'Y' when 'B' then 'N' else NULL end
			  ,[Auto_Replenish] = S.repl_ind
			  ,[Store_Supplier_Zone_Group] = S.store_sup_zone_group
			  ,[WHS_Supplier_Zone_Group] = S.wh_sup_zone_group
			  ,[Pack_Item_Indicator] = S.pack_ind
			  ,[Displayer_Cost] = CASE WHEN IsNull(D.Pack_Item_Indicator, '') = 'C' THEN IsNull(ii.Displayer_Cost,0) ELSE IsNull(COALESCE(ii.Displayer_Cost, D.Add_Unit_Cost),0) END	--Domestic Child items cannot have a Displayer Cost
			  ,[Item_Desc] = S.item_desc
			  ,[Item_Type_Attribute] = S.item_type_attr
			  ,[Clearance_Indicator] = S.clearance_ind
			  ,[Hazardous] = S.hazmat_ind
			  ,[Hazardous_Flammable] = S.flammable_ind
			  ,[Hazardous_Container_Type] = Coalesce(( Select top 1 List_Value FROM List_Values WHERE List_Value_Group_ID = 8 and S.haz_container_type = RMS_Field_Value ), '')
			  ,[Hazardous_Container_Size] = S.haz_container_size
			  ,[Hazardous_MSDS_UOM] = Coalesce(( Select top 1 List_Value FROM List_Values WHERE List_Value_Group_ID = 9 and S.haz_msds_uom = RMS_Field_Value ), '')	--S.haz_msds_uom
			  ,[Simple_Pack_Indicator] = S.simple_pack_ind
			  ,[Discountable] = S.discountable_ind
			  ,[SKU_Group] = Coalesce(( Select top 1 List_Value FROM List_Values WHERE List_Value_Group_ID = 15 and S.sku_group = RMS_Field_Value ), '')
			  ,[Created_User_ID] = @procUserID
			  ,[Date_Created] = getdate()
			  ,case when S.stocking_strategy_code = '' then NULL else S.stocking_strategy_code end
			FROM #SKU S
				Left Join SPD_Item_Master_SKU SKU on S.Michaels_SKU = SKU.Michaels_SKU
				LEFT JOIN SPD_Import_Items as II on II.MichaelsSKU = S.Michaels_SKU AND II.Batch_ID = @SPEDYBatchID
				Left Join (Select Michaels_SKU, Pack_Item_Indicator, Add_Unit_Cost From SPD_Items as i Inner Join SPD_Item_Headers as h on i.Item_Header_ID = h.ID AND h.Batch_ID = @SPEDYBatchID) as D on D.Michaels_SKU = S.Michaels_SKU
			WHERE SKU.Michaels_SKU is NULL


			SET @MsgType = 20
		END TRY

		BEGIN CATCH
			set @msg = 'Processing Item Maint - SKU... Error Occurred in Insert/Update' + ' (Message: ' + @cMessageID + ') ' + ERROR_MESSAGE()
			Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing Item Maint - SKU... Error Occurred in Insert/Update' + ERROR_MESSAGE(), 'null ERROR_MESSAGE when trying to: ' + 'Processing Item Maint - SKU... Error Occurred in Insert/Update')
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
		END CATCH
		
			-- Cut 1 here		

	END	-- Records exist
	Drop table #SKU
	
	-- *************************************************************
	-- Look for ZKUZonePrice Records for Retails 
	-- *************************************************************
	-- Note: these are new Item messages only.  Updates on Retails (both clearance and regular) come in on RMS6 messages too. See further down for those.
	SELECT
		SKU.Michaels_SKU
	  , zone_id
	  , standard_retail
	   into #Retails
	FROM OPENXML (@intXMLDocHandle, '/mikMessage')
	WITH
	(
	   mikHeader_Source varchar(1000) 'mikHeader/Source'
	  ,mikHeader_Contents varchar(1000) 'mikHeader/Contents'
	  ,mikHeader_ThreadID varchar(1000) 'mikHeader/ThreadID'
	  ,mikHeader_PublishTime varchar(1000) 'mikHeader/PublishTime'
	) hdr
	INNER JOIN (
	 SELECT *
	  FROM OPENXML (@intXMLDocHandle, '/mikMessage/mikData[@type="Sku"]')
	  WITH (
		Michaels_SKU varchar(1000) 'item' 
		,mikSKU_Action varchar(1000) '@action'
		)
	  ) SKU on SKU.Michaels_SKU IS NOT NULL	and SKU.mikSKU_Action in ('Insert', 'Update')
	INNER JOIN (
	  SELECT *
	  FROM OPENXML (@intXMLDocHandle, '/mikMessage/mikData[@type="SkuZonePrice"]')
	  WITH (
		mikData_item varchar(1000) 'item'
		,mikRetail_Action varchar(1000) '@action'
		,zone_id varchar(1000) 'zone_id'
		,standard_retail varchar(1000) 'standard_retail'
		)
	 ) Retail ON Retail.mikData_item = SKU.Michaels_SKU	and Retail.mikRetail_Action in ('Insert', 'Update')
	
	/*	Below is a Cross reference on Retail Names and Zones
		Base 1 Retail	 (Zone 1): 
		Base 2 Retail	 (Zone 2):
		Test Retail		 (Zone 3):  
		Alaska Retail	 (Zone 4):
		Canada Retail	 (Zone 5):
		High 2 Retail	 (Zone 6):
		High 3 Retail	 (Zone 7):
		Small Mkt Retail (Zone 8):
		High 1 Retail	 (Zone 9):
		Base 3 Retail	 (Zone 10):
		Low 1 Retail	 (Zone 11): 
		Low 2 Retail	 (Zone 12): 
		Manhattan Retail (Zone 13): 	
	*/

	IF (select count(*) from #Retails) > 0
	BEGIN
		IF @Debug=1  Print 'Processing etItemsFromRMS for Item Maint - Retails'
		set @msg = 'Processing Item Maint - Retails...' + ' (Message: ' + @cMessageID + ')'
		Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing Item Maint - Retails...')
		EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg

		BEGIN TRY
			IF EXISTS ( select Michaels_sku from SPD_Item_Master_SKU where Michaels_sku = (Select top 1 michaels_sku from #Retails) )
			BEGIN
				UPDATE SPD_Item_Master_SKU
				  Set 
				   [Base1_Retail] = coalesce((Select standard_retail from #Retails where zone_id = 1),[Base1_Retail])
				  ,[Base2_Retail] = coalesce((Select standard_retail from #Retails where zone_id = 2),[Base2_Retail])
				  ,[Base3_Retail] = coalesce((Select standard_retail from #Retails where zone_id = 10),[Base3_Retail])
				  ,[Test_Retail] = coalesce((Select standard_retail from #Retails where zone_id = 3),[Test_Retail])
				  ,[Alaska_Retail] = coalesce((Select standard_retail from #Retails where zone_id = 4),[Alaska_Retail])
				  ,[Canada_Retail] = coalesce((Select standard_retail from #Retails where zone_id = 5),[Canada_Retail])
				  ,[High1_Retail] = coalesce((Select standard_retail from #Retails where zone_id = 9),[High1_Retail])
				  ,[High2_Retail] = coalesce((Select standard_retail from #Retails where zone_id = 6),[High2_Retail])
				  ,[High3_Retail] = coalesce((Select standard_retail from #Retails where zone_id = 7),[High3_Retail])
				  ,[Small_Market_Retail] = coalesce((Select standard_retail from #Retails where zone_id = 8),[Small_Market_Retail])
				  ,[Low1_Retail] = coalesce((Select standard_retail from #Retails where zone_id = 11),[Low1_Retail])
				  ,[Low2_Retail] = coalesce((Select standard_retail from #Retails where zone_id = 12),[Low2_Retail])
				  ,[Manhattan_Retail] = coalesce((Select standard_retail from #Retails where zone_id = 13),[Manhattan_Retail])
				  ,[Quebec_Retail] = coalesce((Select standard_retail from #Retails where zone_id = 14),[Quebec_Retail])
				  ,[PuertoRico_Retail] = coalesce((Select standard_retail from #Retails where zone_id = 15),[PuertoRico_Retail])
				  ,[Update_User_ID] = @procUserID
				  ,[Date_Last_Modified] = getdate()
				  
				WHERE Michaels_SKU = (select top 1 Michaels_SKU from #Retails)
			END		-- No else because the SKU should have been created from a SKU record
			SET @MsgType = 21
		END TRY
		
		BEGIN CATCH
			set @msg = 'Processing Item Maint - Retails... Error Occurred on Update' + ' (Message: ' + @cMessageID + ') ' + ERROR_MESSAGE()
			Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing Item Maint - Retails... Error Occurred on Update' + ERROR_MESSAGE(), 'null ERROR_MESSAGE when trying to: ' + 'Processing Item Maint - Retails... Error Occurred on Update')
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
		END CATCH
	END
	Drop table #Retails
	
	-- ***************************************************************************************************************************************
	-- Now look for SkuSupplier -- NOTE: Cost Change tests are now done with a stored proc to resend Import Burden message if necessary
	-- ***************************************************************************************************************************************
	--
	-- NOTE: IF a cost change comes in then we need to find the future cost record and subtract the displayer cost if found
	SELECT
		Michaels_SKU
	  , mikData_Action 
	  , Vendor_Number
	  , VPN
	  , Primary_Vendor_Ind
	  , Country_of_Origin
	  , Primary_Country_Ind
	  , Unit_Cost
	  , Eaches_Master_Case
	  , Eaches_Inner_Pack
	   into #Vendor
	FROM OPENXML (@intXMLDocHandle, '/mikMessage')
	WITH (
	   mikHeader_Source varchar(1000) 'mikHeader/Source'
	  ,mikHeader_Contents varchar(1000) 'mikHeader/Contents'
	  ,mikHeader_ThreadID varchar(1000) 'mikHeader/ThreadID'
	  ,mikHeader_PublishTime varchar(1000) 'mikHeader/PublishTime'
	) hdr
	INNER JOIN (
	 SELECT *
	  FROM OPENXML (@intXMLDocHandle, '/mikMessage/mikData[@type="SkuSupplier"]')
	  WITH (
		Michaels_SKU varchar(1000) 'item'
	  , mikData_Action varchar(1000) '@action'
	  , Vendor_Number varchar(1000) 'supplier'
	  , VPN varchar(1000) 'vpn'
	  , Primary_Vendor_Ind varchar(1000) 'primary_supp_ind'
	  , Country_of_Origin varchar(1000) 'origin_country_id'
	  , Primary_Country_Ind varchar(1000) 'primary_country_ind'
	  , Unit_Cost varchar(1000) 'unit_cost'
	  , Eaches_Master_Case varchar(1000) 'supp_pack_size'
	  , Eaches_Inner_Pack varchar(1000) 'inner_pack_size'
		 )
	  ) Vendor on Vendor.Michaels_SKU IS NOT NULL and Vendor.Vendor_Number is NOT NULL and Vendor.mikData_Action in ('Insert', 'Update')
	
	IF (select count(*) from #Vendor) > 0
	BEGIN
		IF @Debug=1  Print 'Processing etItemsFromRMS for Item Maint - Supplier'
		set @msg = 'Processing Item Maint - Supplier...' + ' (Message: ' + @cMessageID + ')'
		Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing Item Maint - Supplier...')
		EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
		BEGIN TRY
		-- Multiple Vendors can be sent in. Do Update / Insert combo
		
			IF @Debug=1  Print '...Update'
			UPDATE SPD_Item_Master_Vendor
				Set       
				[Primary_Indicator] = CASE WHEN Vm.Primary_Vendor_Ind = 'Y' THEN 1 ELSE 0 END
				, [Vendor_Style_Num] = Vm.VPN
				, [Vendor_Or_Agent] = CASE	WHEN NullIf(A.Agent,'') is NULL	THEN 'V'
										ELSE 'A' END
				, [Agent_Type] = NullIf(A.Agent,'')
				, [Other_Import_Costs_Percent] = CASE	WHEN VL.[Vendor_Number] is not NULL then 0.02	-- Default value for Other Import Costs Percent
													ELSE NULL END
				, [Update_User_ID] = @procUserID
				, Date_Last_Modified = getdate()
			FROM SPD_Item_Master_Vendor V
				Join #Vendor Vm								ON V.Vendor_Number = Vm.Vendor_Number and V.Michaels_sku = Vm.Michaels_sku 
				Left join SPD_Item_Master_Vendor_Agent A	ON V.Vendor_Number = A.Vendor_Number
				Left Join SPD_Vendor VL						ON V.Vendor_number = VL.Vendor_Number and VL.Vendor_type = 300	-- An import Vendor
		
			IF @Debug=1  Print '...Insert'
			INSERT SPD_Item_Master_Vendor (
			  [Michaels_SKU]
			  , [Vendor_Number]
			  , [Primary_Indicator]
			  , [Vendor_Style_Num]
			  , [Vendor_Or_Agent]
			  , [Agent_Type]
			  , [Other_Import_Costs_Percent]
			  , [SKU_ID]
			  , [Created_User_ID]
			  , [Date_Created]			  				
			)
			SELECT 
				Vm.Michaels_SKU
				, Vm.Vendor_Number
				, CASE	WHEN Vm.Primary_Vendor_Ind = 'Y' THEN 1 ELSE 0 END
				, Vm.VPN
				, CASE	WHEN NullIf(A.Agent,'') is NULL	THEN 'V'
						ELSE 'A' END
				, NullIf(A.Agent,'')
				, CASE	WHEN VL.[Vendor_Number] is not NULL then 0.02	-- Default value for Other Import Costs Percent
						ELSE NULL	END
				, ( Select ID From SPD_Item_Master_SKU Where Michaels_SKU = Vm.Michaels_SKU )
				, @procUserID
				, getdate()
			FROM #Vendor Vm
				Left Join SPD_Item_Master_Vendor V			ON Vm.Michaels_SKU = V.Michaels_SKU
																and Vm.Vendor_Number = V.Vendor_Number
				Left Join SPD_Item_Master_Vendor_Agent A	ON Vm.Vendor_Number = A.Vendor_Number
				Left Join SPD_Vendor VL						ON Vm.Vendor_number = VL.Vendor_Number and VL.Vendor_type = 300	-- An import Vendor
			WHERE V.Vendor_Number is NULL
			
			--NAK 8/24/2011
			--TODO: Update Image_ID field?  Should we also update other fields on this PO?  Need to figure out what exactly is updating, and from where... (New Item?  Other maintenance item?)
			
			-- Now Update / Insert the country table portion of the data
			
			-- Keep old and new eaches_master_case values for later compare
			select @NewEachesMasterCase = IsNull(eaches_master_case, 0)
			from #vendor

			select @OldEachesMasterCase = IsNull(C.eaches_master_case, 0)
			      ,@SKU = C.Michaels_SKU
				  ,@VendorNo = C.Vendor_Number
			FROM SPD_Item_Master_Vendor_Countries C 
				join #Vendor Vm ON C.Vendor_Number = Vm.Vendor_Number 
						and C.Michaels_sku = Vm.Michaels_sku 
						and C.Country_Of_Origin = Vm.Country_of_Origin

			-- Update specific country info
			IF @Debug=1  Print '...Country Table Update'
			UPDATE SPD_Item_Master_Vendor_Countries
				Set
				Primary_Indicator = CASE 
					WHEN Vm.Primary_Country_Ind = 'Y' THEN 1 
					WHEN Vm.Primary_Country_Ind = 'N' THEN 0
					ELSE C.Primary_Indicator END
				,Eaches_Master_Case = cast(round(Vm.Eaches_Master_Case,0,1) as int)
				,Eaches_Inner_Pack =  cast(round(Vm.Eaches_Inner_Pack,0,1) as int)
				,[Update_User_ID] = @procUserID
				,[Date_Last_Modified] = getdate()
			FROM SPD_Item_Master_Vendor_Countries C 
				join #Vendor Vm ON C.Vendor_Number = Vm.Vendor_Number 
						and C.Michaels_sku = Vm.Michaels_sku 
						and C.Country_Of_Origin = Vm.Country_of_Origin

			-- Insert any records not found
			IF @Debug=1  Print '...Country Table Insert'
			INSERT SPD_Item_Master_Vendor_Countries (
				[Michaels_SKU]
				,[Vendor_Number]
				,[Country_Of_Origin]
				,[Primary_Indicator]
				,[Eaches_Master_Case]
				,[Eaches_Inner_Pack]
				,[Created_User_ID]
				,[Date_Created] 
				)
			SELECT
				Vm.Michaels_SKU
				, Vm.Vendor_Number
				, Vm.Country_of_Origin
				, CASE WHEN Vm.Primary_Country_Ind = 'Y' THEN 1 ELSE 0 END
				, cast(round(Vm.Eaches_Master_Case,0,1) as int)
				, cast(round(Vm.Eaches_Inner_Pack,0,1) as int)
				, @procUserID
				, getdate()
			FROM #Vendor Vm
				Left Join SPD_Item_Master_Vendor_Countries C On Vm.[Michaels_SKU] = C.[Michaels_SKU]
					and Vm.Vendor_Number = C.Vendor_Number
					and Vm.Country_of_Origin = C.Country_of_Origin
			WHERE C.Country_of_Origin is NULL

			--Use a cursor to set other countries as non-primary
			BEGIN TRY
				DECLARE NonPrimaryCountry CURSOR FOR
					SELECT DISTINCT 
						Michaels_SKU,
						Vendor_Number,
						Country_Of_Origin,
						Primary_Country_Ind
					From #Vendor
					
				OPEN NonPrimaryCountry 
				FETCH NEXT FROM NonPrimaryCountry INTO @SKU, @VendorNo, @CountryOfOrigin, @PrimaryInd
				WHILE @@FETCH_STATUS = 0
				BEGIN
					IF (@PrimaryInd = 'Y')
					BEGIN
						UPDATE SPD_Item_Master_Vendor_Countries
						Set Primary_Indicator = 0
						WHERE Michaels_SKU = @SKU AND Vendor_Number = @VendorNo AND Country_Of_Origin <> @CountryOfOrigin
					END

					FETCH NEXT FROM NonPrimaryCountry INTO @SKU, @VendorNo, @CountryOfOrigin, @PrimaryInd
				END
				CLOSE NonPrimaryCountry
				DEALLOCATE NonPrimaryCountry
			END TRY
			BEGIN CATCH
				set @msg = 'Processing Item Maint - Supplier... Error Occurred in ProcessCostChange - SKU:'  + coalesce(@SKU,'???') 
					+ ' Vendor: ' + coalesce(convert(varchar(20),@VendorNo),'???')
					+ ' ' + ERROR_MESSAGE()
				Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing Item Maint - Supplier... Error Occurred in ProcessCostChange - SKU' + ERROR_MESSAGE(), 'null ERROR_MESSAGE when trying to: ' + 'Processing Item Maint - Supplier... Error Occurred in ProcessCostChange - SKU')
				EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
				EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			END CATCH


			BEGIN TRY
			-- Use a cursor to process each record received for Cost changes
				Declare ProcCostChange Cursor FOR
					SELECT Distinct		-- ignore different countries
						Michaels_SKU
					  , Vendor_Number
					  , Unit_Cost
			--		  , Country_of_Origin
					FROM #Vendor

				OPEN ProcCostChange
				FETCH NEXT FROM ProcCostChange INTO @SKU, @VendorNo, @NewTotalCost --, @CountryOfOrigin
				WHILE @@FETCH_STATUS = 0
				BEGIN
					EXEC usp_SPD_ItemMaint_ProcessCostChange 
						@SKU = @SKU
						, @VendorNo = @VendorNo
						, @NewTotalCost = @NewTotalCost
						, @MessageID = @MessageID
						, @LTS = @LTS
						--, @CountryOfOrigin = @CountryOfOrigin
					FETCH NEXT FROM ProcCostChange INTO @SKU, @VendorNo, @NewTotalCost
				END	
				CLOSE ProcCostChange
				DEALLOCATE ProcCostChange
			END TRY
			BEGIN CATCH
				set @msg = 'Processing Item Maint - Supplier... Error Occurred in ProcessCostChange - SKU2:'  + coalesce(@SKU,'???') 
					+ ' Vendor: ' + coalesce(convert(varchar(20),@VendorNo),'???')
					+ ' ' + ERROR_MESSAGE()
				Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing Item Maint - Supplier... Error Occurred in ProcessCostChange - SKU2: ' + ERROR_MESSAGE(), 'null ERROR_MESSAGE when trying to: ' + 'Processing Item Maint - Supplier... Error Occurred in ProcessCostChange - SKU2')
				EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
				EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			END CATCH
			
			SET @MsgType = 22
		END TRY
		
		BEGIN CATCH
			set @msg = 'Processing Item Maint - Supplier... Error Occurred in Update/Insert'  + ' (Message: ' + @cMessageID + ')' + ' ' + ERROR_MESSAGE()
			Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing Item Maint - Supplier... Error Occurred in Update/Insert:' + ERROR_MESSAGE(), 'null ERROR_MESSAGE when trying to: ' + 'Processing Item Maint - Supplier... Error Occurred in Update/Insert:')
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
		END CATCH
		-- CUT 2 goes here if nec
	END -- Vendor Info
	Drop table #Vendor

	-- *************************************************************
	-- Now look for SkuSupplier -- DELETE
	-- *************************************************************
	SELECT
		Michaels_SKU
	  , Vendor_Number
	  , Country_of_Origin
	   into #VendorDel
	FROM OPENXML (@intXMLDocHandle, '/mikMessage')
	WITH (
	   mikHeader_Source varchar(1000) 'mikHeader/Source'
	  ,mikHeader_Contents varchar(1000) 'mikHeader/Contents'
	  ,mikHeader_ThreadID varchar(1000) 'mikHeader/ThreadID'
	  ,mikHeader_PublishTime varchar(1000) 'mikHeader/PublishTime'
	) hdr
	INNER JOIN (
	 SELECT *
	  FROM OPENXML (@intXMLDocHandle, '/mikMessage/mikData[@type="SkuSupplier"]')
	  WITH (
		Michaels_SKU varchar(1000) 'item'
		  , mikData_Action varchar(1000) '@action'
		  , Vendor_Number varchar(1000) 'supplier'
		  , Country_of_Origin varchar(1000) 'origin_country_id'
  	    )
	  ) Vendor on Vendor.Michaels_SKU IS NOT NULL and Vendor.Vendor_Number is NOT NULL and Vendor.mikData_Action = 'Delete' and Vendor.Country_of_Origin = 'none'
	
	IF (select count(*) from #VendorDel) > 0
	BEGIN
		set @msg = 'Processing Item Maint - Supplier -- DELETE...' + ' (Message: ' + @cMessageID + ')'
		Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing Item Maint - Supplier -- DELETE...')
		IF @Debug=1  Print @msg
		EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
		BEGIN TRY
		
			Begin Tran
		-- Delete all Costs, Countries, Vendor UPCs, and Vendor
			DELETE FC
			FROM SPD_Item_Master_Vendor_Country_Cost FC
				Join #VendorDel mVD ON FC.Michaels_SKU = mVD.Michaels_SKU
									and FC.Vendor_Number = mVD.Vendor_Number
			DELETE COUNTRY
			FROM SPD_Item_Master_Vendor_Countries COUNTRY
				Join #VendorDel mVD ON COUNTRY.Michaels_SKU = mVD.Michaels_SKU
									and COUNTRY.Vendor_Number = mVD.Vendor_Number
			DELETE UPC
			FROM SPD_Item_Master_Vendor_UPCs UPC
				Join #VendorDel mVD ON UPC.Michaels_SKU = mVD.Michaels_SKU
									and UPC.Vendor_Number = mVD.Vendor_Number
			DELETE VENDOR
			FROM SPD_Item_Master_Vendor VENDOR
				Join #VendorDel mVD ON VENDOR.Michaels_SKU = mVD.Michaels_SKU
									and VENDOR.Vendor_Number = mVD.Vendor_Number
			SET @MsgType = 22
			Commit Tran
		END TRY
		BEGIN CATCH
			Rollback Tran
			set @msg = 'Processing Item Maint - Supplier -- DELETE... Error occurred on Delete' + ' (Message: ' + @cMessageID + ')' + ' ' +  ERROR_MESSAGE()
			Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing Item Maint - Supplier... DELETE... Error occurred on Delete:' + ERROR_MESSAGE(), 'null ERROR_MESSAGE when trying to: ' + 'Processing Item Maint - Supplier... DELETE... Error occurred on Delete:')
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
		END CATCH
		
	END -- Vendor Info
	Drop table #VendorDel

	-- *************************************************************
	-- Process Item Dimension Info - Note that Dimension info is not sent when a New Item Batch goes to completion.
	-- *************************************************************

	SELECT
		DIM.Michaels_SKU
	  , DIM.Vendor_Number
	  , DIM.Country_of_Origin
	  , DIM.DimType
	  , DIM.DimLength
	  , DIM.DimWidth
	  , DIM.DimHeight
	  , DIM.DimWeight
	   into #DIM
	FROM OPENXML (@intXMLDocHandle, '/mikMessage')
	WITH (
	   mikHeader_Source varchar(1000) 'mikHeader/Source'
	  ,mikHeader_Contents varchar(1000) 'mikHeader/Contents'
	  ,mikHeader_ThreadID varchar(1000) 'mikHeader/ThreadID'
	  ,mikHeader_PublishTime varchar(1000) 'mikHeader/PublishTime'
	) hdr
	INNER JOIN (	
	  SELECT *
	  FROM OPENXML (@intXMLDocHandle, '/mikMessage/mikData[@type="ItemDimension"]')
		WITH (
		  mikData_Action varchar(1000) '@action'
		, Michaels_SKU varchar(1000) 'item'
		, Vendor_Number varchar(1000) 'supplier'
		, Country_of_Origin varchar(1000) 'origin_country_id'
		, DimType varchar(1000) 'dim_object'
		, DimLength varchar(1000) 'length'
		, DimWidth varchar(1000) 'width'
		, DimHeight varchar(1000) 'height'
		, DimWeight varchar(1000) 'weight'
		)
	  ) DIM ON 	DIM.Michaels_SKU is not NULL and DIM.Vendor_Number is not NULL and DIM.Country_of_Origin is not NULL and DIM.mikData_Action in ('Insert', 'Update')
	
	Declare @EachCount int, @InnerCount int, @MasterCount int
	Select @EachCount = COUNT(*) from #DIM Where DimType = 'EA'
	Select @InnerCount = count(*) FROM #DIM Where DimType = 'IN'
	Select @MasterCount = count(*) FROM #DIM Where DimType = 'CA'

	IF @EachCount > 0
	BEGIN
		set @msg = 'Processing etItemsFromRMS for Item Maint - Each Dim ' + ' (Message: ' + @cMessageID + ')'
		Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing etItemsFromRMS for Item Maint - Each Dim')
		IF @Debug=1  Print @msg
		EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
		BEGIN TRY
			UPDATE SPD_Item_Master_Vendor_Countries
				Set
				[Each_Case_Height] = isNull(NullIF(D.DimHeight,''),0)
				, [Each_Case_Width] = isNull(NullIF(D.DimWidth,''),0)
				, [Each_Case_Length] = isnull(NullIF(D.DimLength,''),0)
				, [Each_Case_Weight] = isnull(NullIF(D.DimWeight,''),0)
				, [Each_LWH_UOM] = 'IN'
				, [Each_Weight_UOM] = 'LB'
				, [Update_User_ID] = @procUserID
				, [Date_Last_Modified] = getdate()
			FROM SPD_Item_Master_Vendor_Countries C
				Join #DIM D	ON C.Michaels_sku = D.Michaels_sku
					and C.Vendor_Number = D.Vendor_Number
					and C.Country_Of_Origin = D.Country_of_Origin
			WHERE D.DimType = 'EA'
			
			INSERT SPD_Item_Master_Vendor_Countries (
				[Michaels_SKU]
				, [Vendor_Number]
				, [Country_Of_Origin]
				, Primary_Indicator
				, [Each_Case_Height]
				, [Each_Case_Width]
				, [Each_Case_Length]
				, [Each_Case_Weight]
				, [Each_LWH_UOM]
				, [Each_Weight_UOM]
				, [Created_User_ID]
				, [Date_Created]			  				
			)
			SELECT
				D.Michaels_SKU
				, D.Vendor_Number
				, D.Country_of_Origin
				, case when exists(select 'x' from SPD_Item_Master_Vendor_Countries imvc where imvc.Michaels_SKU = D.Michaels_SKU and imvc.Vendor_Number = D.Vendor_Number and imvc.primary_indicator = 1) then 0 else 1 end
				, isnull(NullIF(D.DimHeight,''),0)
				, isnull(NullIF(D.DimWidth,''),0)
				, isnull(NullIF(D.DimLength,''),0)
				, isnull(NullIF(D.DimWeight,''),0)
				, 'IN'
				, 'LB'
				, @procUserID
				, getdate()
			FROM #DIM D
				Left Join SPD_Item_Master_Vendor_Countries C On D.[Michaels_SKU] = C.[Michaels_SKU]
					and D.Vendor_Number = C.Vendor_Number
					and D.Country_of_Origin = C.Country_of_Origin
			WHERE D.DimType = 'EA'
				and C.Country_of_Origin is NULL
		
			SET @MsgType = 23
		END TRY
		BEGIN CATCH
			set @msg = 'Processing Item Maint - Each Dim... Error Occurred on Insert / Update' + ' (Message: ' + @cMessageID + ')' + ' ' + ERROR_MESSAGE()
			Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing Item Maint - Each Dim... Error Occurred on Insert / Update:' + ERROR_MESSAGE(), 'null ERROR_MESSAGE when trying to: ' + 'Processing Item Maint - Each Dim... Error Occurred on Insert / Update:')
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
		END CATCH
	END
	
	IF @InnerCount > 0
	BEGIN
		set @msg = 'Processing etItemsFromRMS for Item Maint - Inner Dim ' + ' (Message: ' + @cMessageID + ')'
		Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing etItemsFromRMS for Item Maint - Inner Dim')
		IF @Debug=1  Print @msg
		EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
		BEGIN TRY
			UPDATE SPD_Item_Master_Vendor_Countries
				Set
				[Inner_Case_Height] = isNull(NullIF(D.DimHeight,''),0)
				, [Inner_Case_Width] = isNull(NullIF(D.DimWidth,''),0)
				, [Inner_Case_Length] = isnull(NullIF(D.DimLength,''),0)
				, [Inner_Case_Weight] = isnull(NullIF(D.DimWeight,''),0)
				, [Inner_LWH_UOM] = 'IN'
				, [Inner_Weight_UOM] = 'LB'
				, [Update_User_ID] = @procUserID
				, [Date_Last_Modified] = getdate()
			FROM SPD_Item_Master_Vendor_Countries C
				Join #DIM D	ON C.Michaels_sku = D.Michaels_sku
					and C.Vendor_Number = D.Vendor_Number
					and C.Country_Of_Origin = D.Country_of_Origin
			WHERE D.DimType = 'IN'
			
			INSERT SPD_Item_Master_Vendor_Countries (
				[Michaels_SKU]
				, [Vendor_Number]
				, [Country_Of_Origin]
				, Primary_Indicator
				, [Inner_Case_Height]
				, [Inner_Case_Width]
				, [Inner_Case_Length]
				, [Inner_Case_Weight]
				, [Inner_LWH_UOM]
				, [Inner_Weight_UOM]
				, [Created_User_ID]
				, [Date_Created]			  				
			)
			SELECT
				D.Michaels_SKU
				, D.Vendor_Number
				, D.Country_of_Origin
				, case when exists(select 'x' from SPD_Item_Master_Vendor_Countries imvc where imvc.Michaels_SKU = D.Michaels_SKU and imvc.Vendor_Number = D.Vendor_Number and imvc.primary_indicator = 1) then 0 else 1 end
				, isnull(NullIF(D.DimHeight,''),0)
				, isnull(NullIF(D.DimWidth,''),0)
				, isnull(NullIF(D.DimLength,''),0)
				, isnull(NullIF(D.DimWeight,''),0)
				, 'IN'
				, 'LB'
				, @procUserID
				, getdate()
			FROM #DIM D
				Left Join SPD_Item_Master_Vendor_Countries C On D.[Michaels_SKU] = C.[Michaels_SKU]
					and D.Vendor_Number = C.Vendor_Number
					and D.Country_of_Origin = C.Country_of_Origin
			WHERE D.DimType = 'IN'
				and C.Country_of_Origin is NULL
		
			SET @MsgType = 23
		END TRY
		BEGIN CATCH
			set @msg = 'Processing Item Maint - Inner Dim... Error Occurred on Insert / Update' + ' (Message: ' + @cMessageID + ')' + ' ' + ERROR_MESSAGE()
			Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing Item Maint - Inner Dim... Error Occurred on Insert / Update:' + ERROR_MESSAGE(), 'null ERROR_MESSAGE when trying to: ' + 'Processing Item Maint - Inner Dim... Error Occurred on Insert / Update:')
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
		END CATCH
	END

	IF @MasterCount > 0
	BEGIN
	-- save old and new values for later compare
	select @NewMasterLength =  isnull(NullIF(D.DimLength,''),0)
	      ,@NewMasterWidth = isnull(NullIF(D.DimWidth,''),0)
		  ,@NewMasterHeight = isnull(NullIF(D.DimHeight,''),0)
	from #DIM D
	where  D.Dimtype = 'CA'
	
	select @OldMasterLength = NULLIF(Master_Case_Length, 0)
	      ,@OldMasterWidth = NULLIF(Master_Case_Width, 0)
		  ,@OldMasterHeight = NULLIF(Master_Case_Height, 0)
		  ,@SKU = C.Michaels_SKU
		  ,@VendorNo = C.Vendor_Number
	FROM SPD_Item_Master_Vendor_Countries C
				Join #DIM D	ON C.Michaels_sku = D.Michaels_sku
					and C.Vendor_Number = D.Vendor_Number
					and C.Country_Of_Origin = D.Country_of_Origin
	WHERE D.DimType = 'CA'


		set @msg = 'Processing etItemsFromRMS for Item Maint - Master Dim' + ' (Message: ' + @cMessageID + ')'
		Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing etItemsFromRMS for Item Maint - Master Dim')
		IF @Debug=1  Print @msg
		EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
		BEGIN TRY
			UPDATE SPD_Item_Master_Vendor_Countries
				Set
				[Master_Case_Height] = isnull(NullIF(D.DimHeight,''),0)
				, [Master_Case_Width] = isnull(NullIF(D.DimWidth,''),0)
				, [Master_Case_Length] = isnull(NullIF(D.DimLength,''),0)
				, [Master_Case_Weight] = isnull(NullIF(D.DimWeight,''),0)
				, [Master_LWH_UOM] = 'IN'
				, [Master_Weight_UOM] = 'LB'
				, [Update_User_ID] = @procUserID
				, [Date_Last_Modified] = getdate()
			FROM SPD_Item_Master_Vendor_Countries C
				Join #DIM D	ON C.Michaels_sku = D.Michaels_sku
					and C.Vendor_Number = D.Vendor_Number
					and C.Country_Of_Origin = D.Country_of_Origin
			WHERE D.DimType = 'CA'
			
			INSERT SPD_Item_Master_Vendor_Countries (
				[Michaels_SKU]
				, [Vendor_Number]
				, [Country_Of_Origin]
				, Primary_Indicator
				, [Master_Case_Height]
				, [Master_Case_Width]
				, [Master_Case_Length]
				, [Master_Case_Weight]
				, [Master_LWH_UOM]
				, [Master_Weight_UOM]
				, [Created_User_ID]
				, [Date_Created]			  				
			)
			SELECT
				D.Michaels_SKU
				, D.Vendor_Number
				, D.Country_of_Origin
				, case when exists(select 'x' from SPD_Item_Master_Vendor_Countries imvc where imvc.Michaels_SKU = D.Michaels_SKU and imvc.Vendor_Number = D.Vendor_Number and imvc.primary_indicator = 1) then 0 else 1 end
				, isnull(NullIF(D.DimHeight,''),0)
				, isnull(NullIF(D.DimWidth,''),0)
				, isnull(NullIF(D.DimLength,''),0)
				, isnull(NullIF(D.DimWeight,''),0)
				, 'IN'
				, 'LB'
				, @procUserID
				, getdate()
			FROM #DIM D
				Left Join SPD_Item_Master_Vendor_Countries C On D.[Michaels_SKU] = C.[Michaels_SKU]
					and D.Vendor_Number = C.Vendor_Number
					and D.Country_of_Origin = C.Country_of_Origin
			WHERE D.DimType = 'CA'
				and C.Country_of_Origin is NULL

			SET @MsgType = 23
		END TRY
		BEGIN CATCH
			set @msg = 'Processing Item Maint - Master Dim... Error On Update / Delete' + ' (Message: ' + @cMessageID + ')' + ' ' + ERROR_MESSAGE()
			Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing Item Maint - Master Dim... Error Occurred on Insert / Update:' + ERROR_MESSAGE(), 'null ERROR_MESSAGE when trying to: ' + 'Processing Item Maint - Master Dim... Error Occurred on Insert / Update:')
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
		END CATCH
		
	END
	Drop Table #DIM  
	
	-- *************************************************************
	-- Process UPC / Vendor info 0 to many UPC records
	-- *************************************************************
	-- First Get all Vendor / UPC records and do the Inserts
	SELECT Distinct
		UPC.Michaels_SKU
	  , UPCVendor.Vendor_Number
	  , UPC.UPC
	  , UPC.UPC_Type
	  , UPC.Primary_Ind
	   into #UPC
	FROM OPENXML (@intXMLDocHandle, '/mikMessage')
	WITH
	(
	   mikHeader_Source varchar(1000) 'mikHeader/Source'
	  ,mikHeader_Contents varchar(1000) 'mikHeader/Contents'
	  ,mikHeader_ThreadID varchar(1000) 'mikHeader/ThreadID'
	  ,mikHeader_PublishTime varchar(1000) 'mikHeader/PublishTime'
	) hdr
	INNER JOIN (	
	  SELECT *
	  FROM OPENXML (@intXMLDocHandle, '/mikMessage/mikData[@type="UPC"]')
		WITH (
		mikData_Action varchar(1000) '@action'
		,UPC varchar(1000) 'upc'
		,Michaels_SKU varchar(1000) 'item'
		,Primary_Ind varchar(1000) 'primary_ref_item_ind'
		,UPC_Type varchar(1000) 'item_number_type'
		)
	  ) UPC ON 	UPC.Michaels_SKU is not NULL and UPC.mikData_Action in ('Insert', 'Update')
	INNER JOIN (	
	  SELECT *
	  FROM OPENXML (@intXMLDocHandle, '/mikMessage/mikData[@type="UPCSupplier"]')
		WITH
		(
		mikData_Action varchar(1000) '@action'
		,UPC varchar(1000) 'upc'
		,Vendor_Number varchar(1000) 'supplier'
		,UPC_Country_Of_Origin varchar(1000) 'origin_country_id'
		,Michaels_SKU varchar(1000) 'item'
		)
	  ) UPCVendor ON UPCVendor.Michaels_SKU = UPC.Michaels_SKU 
			and UPCVendor.UPC = UPC.UPC
			and UPCVendor.mikData_Action in ('Insert', 'Update')
	
	IF (select count(*) from #UPC) > 0
	BEGIN	-- Can be more than one UPC record so Do Combo Update / Insert
		set @msg = 'Processing etItemsFromRMS for Item Maint - UPC / Vendor' + ' (Message: ' + @cMessageID + ')'
		Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing etItemsFromRMS for Item Maint - UPC / Vendor')
		IF @Debug=1  Print @msg
		EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg

		BEGIN TRY
			UPDATE #UPC		-- Make sure all the UPCs are 14 char
				Set UPC = dbo.udf_PadUPC(UPC,14)
			
			-- Commentted out. See below for the Update process
			--UPDATE SPD_Item_Master_Vendor_UPCs
			--	Set       
			--	[Primary_Indicator] = CASE	WHEN Um.Primary_Ind = 'Y' THEN 1 
			--								WHEN Um.Primary_Ind = 'N' THEN 0 
			--								ELSE UPC.[Primary_Indicator] END
			--	,[Update_User_ID] = @procUserID
			--	,[Date_Last_Modified] = getdate()
			--	,Is_Active = 1
			--FROM SPD_Item_Master_Vendor_UPCs UPC
			--	join #UPC Um ON  UPC.[Michaels_SKU] = Um.Michaels_SKU
			--		and UPC.[Vendor_Number] = Um.Vendor_Number
			--		and UPC.[UPC] = Um.UPC

			INSERT SPD_Item_Master_Vendor_UPCs (
				[Michaels_SKU]
			  ,[Vendor_Number]
			  ,[UPC]
			  ,[Primary_Indicator]
			  ,[Created_User_ID]
			  ,[Date_Created]
			  ,Is_Active
			   )
			SELECT 
				Um.Michaels_SKU
			  , Um.Vendor_Number
			  , dbo.udf_PadUPC(Um.UPC,14)
			  , CASE	WHEN Um.Primary_Ind = 'Y' THEN 1 
						WHEN Um.Primary_Ind = 'N' THEN 0 
						ELSE UPC.[Primary_Indicator] END
			  , @procUserID
			  , getdate()
			  , 1
			FROM #UPC Um
				left join SPD_Item_Master_Vendor_UPCs UPC ON Um.Michaels_SKU = UPC.Michaels_SKU
					and Um.Vendor_Number = UPC.Vendor_Number
					and Um.UPC = UPC.UPC
			WHERE UPC.UPC is NULL
			--SET @MsgType = 24
		END TRY

		BEGIN CATCH
			set @msg = 'Processing Item Maint - UPC / Vendor... Error on Insert / Update' + ' (Message: ' + @cMessageID + ')' + ' ' + ERROR_MESSAGE()
			Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing Item Maint - UPC / Vendor... Error Occurred on Insert / Update:' + ERROR_MESSAGE(), 'null ERROR_MESSAGE when trying to: ' + 'Processing Item Maint - UPC / Vendor... Error Occurred on Insert / Update:')
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
		END CATCH
	END	-- UPC Vendor Process
	Drop Table #UPC
		
	-- *************************************************************
	-- Process UPC info 1 to many UPC records - Update
	-- *************************************************************
	-- Now get just the UPC record and set the Primary Indicator for all SKU / UPC records (across all vendors)
	SELECT
		UPC.Michaels_SKU
	  , UPC.UPC
	  , UPC.UPC_Type
	  , UPC.Primary_Ind
	   into #UPC2
	FROM OPENXML (@intXMLDocHandle, '/mikMessage')
	WITH
	(
	   mikHeader_Source varchar(1000) 'mikHeader/Source'
	  ,mikHeader_Contents varchar(1000) 'mikHeader/Contents'
	  ,mikHeader_ThreadID varchar(1000) 'mikHeader/ThreadID'
	  ,mikHeader_PublishTime varchar(1000) 'mikHeader/PublishTime'
	) hdr
	INNER JOIN (	
	  SELECT *
	  FROM OPENXML (@intXMLDocHandle, '/mikMessage/mikData[@type="UPC"]')
		WITH (
		mikData_Action varchar(1000) '@action'
		,UPC varchar(1000) 'upc'
		,Michaels_SKU varchar(1000) 'item'
		,Primary_Ind varchar(1000) 'primary_ref_item_ind'
		,UPC_Type varchar(1000) 'item_number_type'
		)
	  ) UPC ON 	UPC.Michaels_SKU is not NULL and UPC.mikData_Action in ('Insert', 'Update')		

	IF (select count(*) from #UPC2) > 0
	BEGIN	
		set @msg = 'Processing etItemsFromRMS for Item Maint - UPC Update' + ' (Message: ' + @cMessageID + ')'
		Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing etItemsFromRMS for Item Maint - UPC Update')
		IF @Debug=1  Print @msg
		EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg

		BEGIN TRY
			UPDATE #UPC2		-- Make sure all the UPCs are 14 char
				Set UPC = dbo.udf_PadUPC(UPC,14)
			
			UPDATE SPD_Item_Master_Vendor_UPCs
				Set       
				[Primary_Indicator] = CASE	WHEN Um.Primary_Ind = 'Y' THEN 1 
											WHEN Um.Primary_Ind = 'N' THEN 0 
											ELSE UPC.[Primary_Indicator] END
				,[Update_User_ID] = @procUserID
				,[Date_Last_Modified] = getdate()
				,Is_Active = 1
			FROM SPD_Item_Master_Vendor_UPCs UPC
				join #UPC2 Um ON  UPC.[Michaels_SKU] = Um.Michaels_SKU
					and UPC.[UPC] = Um.UPC

			SET @MsgType = 24  -- Set the Message Type here since there will always be a UPC if there was a UPC / UPC supplier message
		END TRY
		
		BEGIN CATCH
			set @msg = 'Processing Item Maint - UPC... Error on Update' + ' (Message: ' + @cMessageID + ')' + ' ' + ERROR_MESSAGE()
			Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing Item Maint - UPC... Error on Update:' + ERROR_MESSAGE(), 'null ERROR_MESSAGE when trying to: ' + 'Processing Item Maint - UPC... Error on Update:')
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
		END CATCH
	END -- UPC process
	Drop Table #UPC2

	-- *************************************************************
	-- Process UPC info -- Delete Command
	-- *************************************************************
	SELECT
	  UPC.UPC
	   into #UPCDelete
	FROM OPENXML (@intXMLDocHandle, '/mikMessage')
	WITH
	(
	   mikHeader_Source varchar(1000) 'mikHeader/Source'
	  ,mikHeader_Contents varchar(1000) 'mikHeader/Contents'
	  ,mikHeader_ThreadID varchar(1000) 'mikHeader/ThreadID'
	  ,mikHeader_PublishTime varchar(1000) 'mikHeader/PublishTime'
	) hdr
	INNER JOIN (	
	  SELECT *
	  FROM OPENXML (@intXMLDocHandle, '/mikMessage/mikData[@type="UPC"]')
		WITH (
		mikData_Action varchar(1000) '@action'
		,UPC varchar(1000) 'upc'
		)
	  ) UPC ON 	UPC.UPC is not NULL and UPC.mikData_Action = 'Delete'

	IF (select count(*) from #UPCDelete) > 0
	BEGIN	-- Can be more than one UPC record
		set @msg = 'Processing etItemsFromRMS for Item Maint - UPC Delete' + ' (Message: ' + @cMessageID + ')'
		Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing etItemsFromRMS for Item Maint - UPC Delete')
		IF @Debug=1  Print @msg
		EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg

		BEGIN TRY
			DELETE FROM SPD_Item_Master_Vendor_UPCs
			WHERE UPC in ( Select UPC From #UPCDelete )
		END TRY
		
		BEGIN CATCH
			set @msg = 'Processing Item Maint - UPC... Error on Delete' + ' (Message: ' + @cMessageID + ')' + ' ' + ERROR_MESSAGE()
			Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing Item Maint - UPC... Error on Delete:' + ERROR_MESSAGE(), 'null ERROR_MESSAGE when trying to: ' + 'Processing Item Maint - UPC... Error on Delete:')
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
		END CATCH
	END	-- UPC Delete process
	Drop Table #UPCDelete
	  
	-- *************************************************************
	-- Process UDA Info - Note RMS Does not send this info when its a New Item.
	-- *************************************************************
	SELECT
		UDA.Michaels_SKU
	  , UDA.uda_id
	  , UDA.uda_value
	   into #UDA
	   FROM OPENXML (@intXMLDocHandle, '/mikMessage')
	WITH (
	   mikHeader_Source varchar(1000) 'mikHeader/Source'
	  ,mikHeader_Contents varchar(1000) 'mikHeader/Contents'
	  ,mikHeader_ThreadID varchar(1000) 'mikHeader/ThreadID'
	  ,mikHeader_PublishTime varchar(1000) 'mikHeader/PublishTime'
	) hdr
	INNER JOIN (	
	  SELECT *
	  FROM OPENXML (@intXMLDocHandle, '/mikMessage/mikData[@type="UDAItem"]')
		WITH (
		mikData_Action varchar(1000) '@action'
		,Michaels_SKU varchar(1000) 'item'
		,uda_id varchar(1000) 'uda_id'
		,uda_value varchar(1000) 'uda_value'
		)
	  ) UDA ON 	UDA.Michaels_SKU is not NULL and UDA.mikData_Action in ('Insert', 'Update')		
	
	IF (select count(*) from #UDA) > 0
	BEGIN
		set @msg = 'Processing etItemsFromRMS for Item Maint - UDA'+ ' (Message: ' + @cMessageID + ')'
		Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing etItemsFromRMS for Item Maint - UDA')
		IF @Debug=1  Print @msg
		EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg

		BEGIN TRY
			UPDATE SPD_Item_Master_UDA	-- First do Updates on matching records
				Set UDA_Value = Um.uda_value
			FROM SPD_Item_Master_UDA UDA 
				join #UDA Um ON  UDA.[Michaels_SKU] = Um.Michaels_SKU
					and UDA.UDA_ID = Um.uda_id
			
			INSERT SPD_Item_Master_UDA (	-- Then Insert any non matching records
				[Michaels_SKU]
			  ,[UDA_ID]
			  ,[UDA_Value] )
			SELECT 
				Um.Michaels_SKU
			  , Um.uda_id
			  , Um.uda_value
			FROM #UDA Um
			  left join SPD_Item_Master_UDA UDA on Um.Michaels_SKU = UDA.Michaels_SKU
				and Um.uda_id = UDA.uda_id
			WHERE UDA.[UDA_Value] is NULL

			SET @MsgType = 25
		END TRY
		BEGIN CATCH
			set @msg = 'Processing Item Maint - UDA... Error on Insert/Update'+ ' (Message: ' + @cMessageID + ')' + ' '  + ERROR_MESSAGE()
			Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing Item Maint - UDA... Error on Insert/Update:' + ERROR_MESSAGE(), 'null ERROR_MESSAGE when trying to: ' + 'Processing Item Maint - UDA... Error on Insert/Update:')
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
		END CATCH
	END
	Drop Table #UDA


	-- *************************************************************
	-- Process UDA Info	-- DELETE
	-- *************************************************************
	SELECT
		UDA.Michaels_SKU
	  , UDA.uda_id
	  , UDA.uda_value
	   into #UDADelete
	   FROM OPENXML (@intXMLDocHandle, '/mikMessage')
	WITH (
	   mikHeader_Source varchar(1000) 'mikHeader/Source'
	  ,mikHeader_Contents varchar(1000) 'mikHeader/Contents'
	  ,mikHeader_ThreadID varchar(1000) 'mikHeader/ThreadID'
	  ,mikHeader_PublishTime varchar(1000) 'mikHeader/PublishTime'
	) hdr
	INNER JOIN (	
	  SELECT *
	  FROM OPENXML (@intXMLDocHandle, '/mikMessage/mikData[@type="UDAItem"]')
		WITH (
		mikData_Action varchar(1000) '@action'
		,Michaels_SKU varchar(1000) 'item'
		,uda_id varchar(1000) 'uda_id'
		,uda_value varchar(1000) 'uda_value'
		)
	  ) UDA ON 	UDA.Michaels_SKU is not NULL and UDA.mikData_Action in ('Delete')
	  
	IF (select count(*) from #UDADelete) > 0 
	BEGIN
		set @msg = 'Processing etItemsFromRMS for Item Maint - UDA Delete' + ' (Message: ' + @cMessageID + ')'
		Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing etItemsFromRMS for Item Maint - UDA Delete')
		IF @Debug=1  Print @msg
		EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
	
		BEGIN TRY
			DELETE UDA
			FROM dbo.SPD_Item_Master_UDA UDA
				join #UDADelete Um ON UDA.Michaels_SKU = Um.Michaels_SKU
									and UDA.UDA_ID = Um.uda_id
									and UDA.UDA_Value = Um.uda_value
			SET @MsgType = 25
		END TRY
		BEGIN CATCH
			set @msg = 'Processing Item Maint - UDA Delete... Error on Delete' + ' (Message: ' + @cMessageID + ')' + ' '  + ERROR_MESSAGE()
			Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing Item Maint - UDA... Error on Delete:' + ERROR_MESSAGE(), 'null ERROR_MESSAGE when trying to: ' + 'Processing Item Maint - UDA... Error on Delete:')
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
		END CATCH
	END
	Drop table #UDADelete


	IF 1 = 2 -- NO GTINS AT THIS TIME MWM: 9/17/2024
	BEGIN

		-- *************************************************************
		-- Process GTIN14 
		-- *************************************************************
		-- First Get Primary Inner and Case GTIN14 records and do the Inserts
		SELECT Distinct
			PrimaryGTIN.Michaels_SKU
		  , PrimaryGTIN.innergtin
		  , PrimaryGTIN.casegtin
		   into #primaryGTIN
		FROM OPENXML (@intXMLDocHandle, '/mikMessage')
		WITH
		(
		   mikHeader_Source varchar(1000) 'mikHeader/Source'
		  ,mikHeader_Contents varchar(1000) 'mikHeader/Contents'
		  ,mikHeader_ThreadID varchar(1000) 'mikHeader/ThreadID'
		  ,mikHeader_PublishTime varchar(1000) 'mikHeader/PublishTime'
		) hdr
		INNER JOIN (	
		  SELECT *
		  FROM OPENXML (@intXMLDocHandle, '/mikMessage/mikData[@type="Sku"]')
			WITH
			(
			mikData_Action varchar(1000) '@action'
			,innergtin varchar(1000) 'innergtin'
			,casegtin varchar(1000) 'casegtin'
			,Michaels_SKU varchar(1000) 'item'
			)
		  ) PrimaryGTIN on PrimaryGTIN.Michaels_SKU is not null and PrimaryGTIN.mikData_Action in ('Insert', 'Update')
	
		IF (select count(*) from #primaryGTIN) > 0
		BEGIN	-- Primary Inner/Case GTIN14
			set @msg = 'Processing etItemsFromRMS for Item Maint - Primary Inner/case GTIN' + ' (Message: ' + @cMessageID + ')'
			Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing etItemsFromRMS for Primary Inner/case GTIN')
			IF @Debug=1  Print @msg
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg

			BEGIN TRY
		
				delete from SPD_Item_Master_GTINs where Michaels_SKU in  (Select Michaels_SKU from #primaryGTIN) and Is_Active =1

				INSERT SPD_Item_Master_GTINs (
					[Michaels_SKU]
				  ,[InnerGTIN]
				  ,[CaseGTIN]
				  ,[Is_Active]
				  ,[Created_User_Id]
				  ,[Date_created]
				  ,Date_Last_modified
				   )
				SELECT 
					Um.Michaels_SKU
				  , Um.InnerGTIN
				  , Um.CaseGTIN
				  , 1
				  , @procUserID
				  , getdate()
				  , getdate()
				FROM #primaryGTIN Um
					left join SPD_Item_Master_GTINs GTIN ON Um.Michaels_SKU = GTIN.Michaels_SKU
						and Um.InnerGTIN = GTIN.InnerGTIN or Um.CASEGTIN = GTIN.CASEGTIN   
				WHERE GTIN.InnerGTIN is NULL or GTIN.InnerGTIN is null
				--SET @MsgType = 24
			END TRY

			BEGIN CATCH
				set @msg = 'Processing Item Maint - Primary Inner/case GTIN... Error on Insert / Update' + ' (Message: ' + @cMessageID + ')' + ' ' + ERROR_MESSAGE()
				Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing Item Maint - Primary Inner/case GTIN... Error Occurred on Insert / Update:' + ERROR_MESSAGE(), 'null ERROR_MESSAGE when trying to: ' + 'Processing Item Maint - Primary Inner/case GTIN... Error Occurred on Insert / Update:')
				EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
				EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			END CATCH
		END	-- #primaryGTIN Process
		Drop Table #primaryGTIN
		
		-- *************************************************************
		-- Process Case GTIN info - Insert -  Inner/Case GTINs
		-- *************************************************************
		-- Now get just the Case GTIN record and insert into the table if it is not available

		SELECT Distinct
			CGTIN.Michaels_SKU Michaels_SKU
		  , coalesce(CGTIN.CGTIN14,'1') CASEGTIN
		 , CGTIN.primary_ind Case_primary_ind
		 , CGTIN.upc Case_upc
		  into #casegtin
		FROM OPENXML (@intXMLDocHandle, '/mikMessage')
		WITH
		(
		   mikHeader_Source varchar(1000) 'mikHeader/Source'
		  ,mikHeader_Contents varchar(1000) 'mikHeader/Contents'
		  ,mikHeader_ThreadID varchar(1000) 'mikHeader/ThreadID'
		  ,mikHeader_PublishTime varchar(1000) 'mikHeader/PublishTime'
		) hdr
		INNER JOIN (	
		  SELECT distinct  *
		  FROM OPENXML (@intXMLDocHandle, '/mikMessage/mikData[@type="GTIN14"]')
			WITH (
			mikData_Action varchar(1000) '@action'
			,CGTIN14 varchar(1000) 'gtin14'
			,Michaels_SKU varchar(1000) 'item'
			,pack_size_type varchar(1000) 'pack_size_type'
			,upc varchar(1000) 'upc'
			,primary_ind varchar(1) 'primary_ind'
			)
		  ) CGTIN ON CGTIN.Michaels_SKU is not NULL and CGTIN.mikData_Action in ('Insert', 'Update') and CGTIN.pack_size_type = 'C'


		  SELECT Distinct
			IGTIN.Michaels_SKU Michaels_SKU
		  , IGTIN.IGTIN14 INNERGTIN
		 , IGTIN.primary_ind Inner_primary_ind
		 , IGTIN.upc Inner_upc
		  into #innergtin
		FROM OPENXML (@intXMLDocHandle, '/mikMessage')
		WITH
		(
		   mikHeader_Source varchar(1000) 'mikHeader/Source'
		  ,mikHeader_Contents varchar(1000) 'mikHeader/Contents'
		  ,mikHeader_ThreadID varchar(1000) 'mikHeader/ThreadID'
		  ,mikHeader_PublishTime varchar(1000) 'mikHeader/PublishTime'
		) hdr
		INNER JOIN (	
		  SELECT distinct  *
		  FROM OPENXML (@intXMLDocHandle, '/mikMessage/mikData[@type="GTIN14"]')
			WITH (
			mikData_Action varchar(1000) '@action'
			,IGTIN14 varchar(1000) 'gtin14'
			,Michaels_SKU varchar(1000) 'item'
			,pack_size_type varchar(1000) 'pack_size_type'
			,upc varchar(1000) 'upc'
			,primary_ind varchar(1) 'primary_ind'
			)
		  ) IGTIN ON IGTIN.Michaels_SKU is not NULL and IGTIN.mikData_Action in ('Insert', 'Update') and IGTIN.pack_size_type = 'I'

		IF (select count(*) from #casegtin) > 0
		BEGIN	
			set @msg = 'Processing etItemsFromRMS for Item Maint - Inner/Case GTIN update' + ' (Message: ' + @cMessageID + ')'
			Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing etItemsFromRMS for Item Maint -Inner/Case GTIN update')
			IF @Debug=1  Print @msg
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg

			BEGIN TRY

				delete from SPD_Item_Master_GTINs where Michaels_SKU in  (Select Michaels_SKU from #caseGTIN) 
				
					INSERT SPD_Item_Master_GTINs (
							[Michaels_SKU]
						  ,[InnerGTIN]
						  ,[CaseGTIN]
						  ,[Is_Active]
						  ,[Created_User_Id]
						  ,[Date_created]
						  ,Date_Last_modified
						   )
					select 
						TGTIN.michaels_sku
						,TGTIN.INNERGTIN
						,TGTIN.CASEGTIN
						,TGTIN.is_active
						,TGTIN.procUserID
						,TGTIN.Date_created
						,TGTIN.Date_last_modified
					from 
					(select 
						coalesce(c.michaels_sku,i.michaels_sku) michaels_sku,
						i.INNERGTIN,
						c.CASEGTIN
					   , is_active = CASE when coalesce(c.Case_primary_ind,i.Inner_primary_ind) = 'Y' then 1
											else 0
										end
						,@procUserID procUserID
						,getdate() Date_created
						,getdate() Date_last_modified
					from #casegtin c
					full outer join #innergtin i
					on c.Michaels_SKU=i.Michaels_SKU and c.Case_primary_ind=i.Inner_primary_ind
						and SUBSTRING(c.Case_upc,2,12)=SUBSTRING(i.Inner_upc,2,12)) TGTIN
					left join SPD_Item_Master_GTINs GTIN ON TGTIN.Michaels_SKU = GTIN.Michaels_SKU 

				--SET @MsgType = 24  -- Set the Message Type here since there will always be a UPC if there was a UPC / UPC supplier message
			END TRY
		
			BEGIN CATCH
				set @msg = 'Processing Item Maint - Inner/Case GTIN update update... Error on Update' + ' (Message: ' + @cMessageID + ')' + ' ' + ERROR_MESSAGE()
				Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing Item Maint - Inner/Case GTIN update update... Error on Update:' + ERROR_MESSAGE(), 'null ERROR_MESSAGE when trying to: ' + 'Processing Item Maint - UPC... Error on Update:')
				EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
				EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			END CATCH
		END -- Inner/Case GTIN Process end
	
		Drop Table #casegtin

		drop table #innergtin
	
	END -- END 1 = 2 for GTIN 
	
	-- *************************************************************
	-- Process Pack Item Info -- Process Updates and Inserts
	-- *************************************************************
	SELECT
		Pack_SKU
		,Child_SKU
		,Pack_Quantity
       into #Pack
	FROM OPENXML (@intXMLDocHandle, '/mikMessage')
	WITH (
	   mikHeader_Source varchar(1000) 'mikHeader/Source'
	  ,mikHeader_Contents varchar(1000) 'mikHeader/Contents'
	  ,mikHeader_ThreadID varchar(1000) 'mikHeader/ThreadID'
	  ,mikHeader_PublishTime varchar(1000) 'mikHeader/PublishTime'
	) hdr
	INNER JOIN (	
	  SELECT *
	  FROM OPENXML (@intXMLDocHandle, '/mikMessage/mikData[@type="PackItem"]')
		WITH (
		mikData_Action varchar(1000) '@action'
		,Pack_SKU varchar(1000) 'pack_no'
		,Child_SKU varchar(1000) 'item'
		,Pack_Quantity varchar(1000) 'pack_qty'
		)
	  ) Pack ON Pack.Pack_SKU is not NULL and Pack.mikData_Action in ('Insert', 'Update')

	IF (SELECT  Count(*) FROM #Pack) > 0
	BEGIN
		set @msg = 'Processing etItemsFromRMS for Item Maint - Pack Item' + ' (Message: ' + @cMessageID + ')'
		Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing etItemsFromRMS for Item Maint - Pack Item')
		IF @Debug=1  Print @msg
		EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg

		BEGIN TRY
			UPDATE Pack
				SET Pack_Quantity = mP.Pack_Quantity
				, Date_Last_Modified = getdate()
				, Update_User_ID = @procUserID
				, Is_Active = 1
			FROM SPD_Item_Master_PackItems Pack
				Join #Pack mP	ON Pack.Pack_SKU = mP.Pack_SKU
								and Pack.Child_SKU = mP.Child_SKU
								
			INSERT SPD_Item_Master_PackItems (
				[Pack_SKU]
				,[Child_SKU]
				,[Pack_Quantity]
				,[Created_User_ID]
				,[Date_Created]
				,[Is_Active]
				)
				SELECT 	
					mP.Pack_SKU
					, mP.Child_SKU
					, mP.Pack_Quantity
					, @procUserID
					, getdate()
					, 1
				FROM #Pack mP	
					Left Join SPD_Item_Master_PackItems Pack	ON mP.Pack_SKU = Pack.[Pack_SKU]
																and mP.Child_SKU = Pack.[Child_SKU]
				WHERE Pack.Pack_SKU is NULL 
					and Pack.Child_SKU is NULL
			SET @MsgType = 26
		END TRY
		BEGIN CATCH
			set @msg = 'Processing Item Maint - Pack Item... Error on Insert / Update' + ' (Message: ' + @cMessageID + ')' + ' '  + ERROR_MESSAGE()
			Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing Item Maint - Pack Item... Error on Insert / Update:' + ERROR_MESSAGE(), 'null ERROR_MESSAGE when trying to: ' + 'Processing Item Maint - Pack Item... Error on Insert / Update:')
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
		END CATCH
	END -- Pack Processing
	Drop Table #Pack

	-- *************************************************************
	-- Process Pack Item Info -- Process Deletes
	-- *************************************************************
	SELECT
		Pack_SKU
		,Child_SKU
       into #PackDelete
	FROM OPENXML (@intXMLDocHandle, '/mikMessage')
	WITH (
	   mikHeader_Source varchar(1000) 'mikHeader/Source'
	  ,mikHeader_Contents varchar(1000) 'mikHeader/Contents'
	  ,mikHeader_ThreadID varchar(1000) 'mikHeader/ThreadID'
	  ,mikHeader_PublishTime varchar(1000) 'mikHeader/PublishTime'
	) hdr
	INNER JOIN (	
	  SELECT *
	  FROM OPENXML (@intXMLDocHandle, '/mikMessage/mikData[@type="PackItem"]')
		WITH (
		mikData_Action varchar(1000) '@action'
		,Pack_SKU varchar(1000) 'pack_no'
		,Child_SKU varchar(1000) 'item'
		)
	  ) Pack ON Pack.Pack_SKU is not NULL and Pack.mikData_Action ='Delete'

	IF (SELECT Count(*) FROM #PackDelete) > 0
	BEGIN
		set @msg = 'Processing etItemsFromRMS for Item Maint - Pack Item Delete' + ' (Message: ' + @cMessageID + ')'
		Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing etItemsFromRMS for Item Maint - Pack Item Delete')
		IF @Debug=1  Print @msg
		EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg

		BEGIN TRY
			DELETE Pack
			FROM SPD_Item_Master_PackItems Pack
				Join #PackDelete mP	ON Pack.Pack_SKU = mP.Pack_SKU
									and Pack.Child_SKU = mP.Child_SKU
			SET @MsgType = 26
		END TRY
		BEGIN CATCH
			set @msg = 'Processing Item Maint - Pack Item Delete... Error on Delete' + ' (Message: ' + @cMessageID + ')' + ' '  + ERROR_MESSAGE()
			Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing Item Maint - Pack Item Delete... Error on Delete:' + ERROR_MESSAGE(), 'null ERROR_MESSAGE when trying to: ' + 'Processing Item Maint - Pack Item Delete... Error on Delete')
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
		END CATCH
	END -- Pack Processing
	Drop Table #PackDelete

END	-- EtItems

-- *************************************************************
-- Look for UDAValues for New Descriptions
-- *************************************************************

IF @XML_HeaderSegment_Source = 'RIB.etUDAValuesFromRMS'
BEGIN
	IF @Debug=1  Print 'Processing etUDAValuesFromRMS for Item Maint - UPC'

	SELECT
		UDA_ID
      ,UDA_Value
      ,UDA_Value_Desc
       into #UDADesc
	FROM OPENXML (@intXMLDocHandle, '/mikMessage')
	WITH (
	   mikHeader_Source varchar(1000) 'mikHeader/Source'
	  ,mikHeader_Contents varchar(1000) 'mikHeader/Contents'
	  ,mikHeader_ThreadID varchar(1000) 'mikHeader/ThreadID'
	  ,mikHeader_PublishTime varchar(1000) 'mikHeader/PublishTime'
	) hdr
	INNER JOIN (	
	  SELECT *
	  FROM OPENXML (@intXMLDocHandle, '/mikMessage/mikData[@type="UDAValue"]')
		WITH (
		mikData_Action varchar(1000) '@action'
		,UDA_ID varchar(1000) 'uda_id'
		,UDA_Value varchar(1000) 'uda_value'
		,UDA_Value_Desc varchar(1000) 'uda_value_desc' 
		)
	  ) UDADesc ON UDADesc.UDA_ID is not NULL and UDADesc.UDA_Value is not NULL and UDADesc.UDA_Value_Desc is not NULL and UDADesc.mikData_Action in ('Insert', 'Update')
	
	IF (Select Count(*) FROM #UDADesc) > 0
	BEGIN
		set @msg= 'Processing etUDAValuesFromRMS for Item Maint - UDA Descriptions' + ' (Message: ' + @cMessageID + ')'
		Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing etItemsFromRMS for Item Maint - UDA Descriptions')
		IF @Debug=1  Print @msg
		EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg

		BEGIN TRY
			UPDATE SPD_UDA_Value_Descriptions	-- First do Updates on matching records
				Set UDA_Value_Desc = Dm.UDA_Value_Desc
			FROM SPD_UDA_Value_Descriptions D 
				join #UDADesc Dm ON  D.UDA_ID = dm.UDA_ID
					and D.UDA_Value = Dm.UDA_Value
			
			INSERT SPD_UDA_Value_Descriptions (	-- Then Insert any non matching records
				UDA_ID
				,UDA_Value
				,UDA_Value_Desc )
			SELECT 
				dm.uda_id
				, dm.uda_value
				, dm.UDA_Value_Desc
			FROM #UDADesc Dm
			  left join SPD_UDA_Value_Descriptions D  on D.UDA_ID = dm.UDA_ID
					and D.UDA_Value = Dm.UDA_Value
			WHERE D.uda_value is NULL and D.UDA_ID is NULL	
			
			-- Now Update the List Values table with this info
			UPDATE LV
				SET [Display_Text] = dm.UDA_Value_Desc
			FROM #UDADesc dm
				join [List_Value_Groups] G	on G.[RMS_UDA_ID] = dm.uda_id
				join [List_Values] LV		on G.ID = LV.List_value_Group_ID and dm.uda_value = LV.List_Value
			WHERE dm.uda_id in (10,11)	-- only Private Brand and Item Type Attributes now
				
			INSERT [List_Values] (
				[List_Value_Group_ID]
				,[List_Value]
				,[Display_Text]
				,[Sort_Order]
				)
			SELECT 
				G.ID
				, dm.uda_value
				, dm.UDA_Value_Desc
				, dm.uda_value
			FROM #UDADesc dm
				join [List_Value_Groups] G on G.[RMS_UDA_ID] = dm.uda_id
				left join [List_Values] LV on G.ID = LV.List_value_Group_ID and dm.uda_value = LV.List_Value
			WHERE LV.List_Value is NULL
				and dm.uda_id in (10,11)	-- only Private Brand and Item Type Attributes now

			--NAK 7/19/2011:  UPDATE TAX UDA Values (or Re-enable it)
			UPDATE [SPD_TAX_UDA_VALUE]
			SET TAX_UDA_Value_Description = dm.UDA_Value_Desc,
				[Enabled] = 1
			FROM #UDADesc dm
				join [SPD_TAX_UDA_VALUE] TV	on TV.Tax_UDA_ID = dm.uda_id AND dm.uda_value = TV.Tax_UDA_Value_Number
			WHERE dm.uda_id between 1 and 9 	-- only TAX UDAs

			--NAK 7/19/2011: INSERT TAX UDA Values
			INSERT [SPD_TAX_UDA_VALUE] (
				Tax_UDA_ID,
				Tax_UDA_Value_Number,
				Tax_UDA_Value_Description,
				Enabled,
				Date_Last_Modified,
				Date_Created
			)
			Select
				dm.uda_id,
				dm.uda_value,
				dm.uda_value_desc,
				1,
				getDate(),
				getDate()
			FROM #UDADesc dm
			Left Join [SPD_TAX_UDA_VALUE] TV on TV.Tax_UDA_ID = dm.uda_ID AND dm.uda_value = TV.Tax_UDA_Value_Number
			WHERE Tax_UDA_Value_Number is NULL
				AND dm.uda_id Between 1 and 9 -- only TAX UDAs

			SET @MsgType = 14
		END TRY
		BEGIN CATCH
			set @msg='Processing Item Maint - UDA Descriptions... Error on Insert / Update' + ' (Message: ' + @cMessageID + ')' + ' '  + ERROR_MESSAGE()
			Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing Item Maint - UDA Descriptions... Error on Insert / Update:' + ERROR_MESSAGE(), 'null ERROR_MESSAGE when trying to: ' + 'Processing Item Maint - UDA Descriptions... Error on Insert / Update')
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
		END CATCH
	END
	Drop table #UDADesc
	
-- *************************************************************
-- Look for UDAValues for New Descriptions -- DELETE
-- *************************************************************

	SELECT
	  UDA_ID
      ,UDA_Value
      ,UDA_Value_Desc
       into #UDADescDelete
	FROM OPENXML (@intXMLDocHandle, '/mikMessage')
	WITH (
	   mikHeader_Source varchar(1000) 'mikHeader/Source'
	  ,mikHeader_Contents varchar(1000) 'mikHeader/Contents'
	  ,mikHeader_ThreadID varchar(1000) 'mikHeader/ThreadID'
	  ,mikHeader_PublishTime varchar(1000) 'mikHeader/PublishTime'
	) hdr
	INNER JOIN (	
	  SELECT *
	  FROM OPENXML (@intXMLDocHandle, '/mikMessage/mikData[@type="UDAValue"]')
		WITH (
		mikData_Action varchar(1000) '@action'
		,UDA_ID varchar(1000) 'uda_id'
		,UDA_Value varchar(1000) 'uda_value'
		,UDA_Value_Desc varchar(1000) 'uda_value_desc' 
		)
	  ) UDADesc ON UDADesc.UDA_ID is not NULL and UDADesc.UDA_Value is not NULL and UDADesc.UDA_Value_Desc is not NULL and UDADesc.mikData_Action in ('Delete')

	IF (Select Count(*) FROM #UDADescDelete) > 0
	BEGIN
		set @msg='Processing etUDAValuesFromRMS for Item Maint - UDA Descriptions -- DELETE' + ' (Message: ' + @cMessageID + ')'
		Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing etUDAValuesFromRMS for Item Maint - UDA Descriptions -- DELETE')
		IF @Debug=1  Print @msg
		EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg

		BEGIN TRY
			DELETE UDAD
			FROM dbo.SPD_UDA_Value_Descriptions UDAD
				Join #UDADescDelete mD on UDAD.UDA_ID = mD.UDA_ID
										and UDAD.UDA_Value = mD.UDA_Value
			
			--NAK 7/19/2011: Delete Tax UDAs by disabling them
			UPDATE [SPD_TAX_UDA_VALUE]
			SET Enabled = 0
			FROM #UDADescDelete dm
				join [SPD_TAX_UDA_VALUE] TV	on TV.Tax_UDA_ID = dm.uda_id AND dm.uda_value = TV.Tax_UDA_Value_Number
			WHERE dm.uda_id between 1 and 9 	-- only TAX UDAs
			
			--Set New Domestic Items and Batch validity to Unknown if an item contains one of the deleted tax udas
			Update SPD_Items
			Set Is_Valid = -1
			FROM SPD_Batch b
				INNER JOIN SPD_Workflow_Stage ws on ws.ID = b.Workflow_Stage_ID
				INNER JOIN SPD_Item_Headers ih on ih.Batch_ID = b.ID
				INNER JOIN SPD_Items i on i.Item_Header_ID = ih.ID AND IsNumeric(i.Tax_UDA)=1
				INNER JOIN SPD_TAX_UDA_VALUE t on t.Tax_UDA_ID = i.Tax_UDA AND t.Tax_UDA_Value_Number = i.Tax_Value_UDA
				INNER JOIN #UDADescDelete dm on dm.uda_id = t.Tax_UDA_ID and dm.uda_value = t.Tax_UDA_Value_Number
			WHERE b.[Enabled] = 1 and ws.Stage_Type_ID not in (3,4)
			
			Update SPD_Batch 
			Set Is_Valid = -1
			FROM SPD_Batch b
				INNER JOIN SPD_Workflow_Stage ws on ws.ID = b.Workflow_Stage_ID
				INNER JOIN SPD_Item_Headers ih on ih.Batch_ID = b.ID
				INNER JOIN SPD_Items i on i.Item_Header_ID = ih.ID AND IsNumeric(i.Tax_UDA)=1
				INNER JOIN SPD_TAX_UDA_VALUE t on t.Tax_UDA_ID = i.Tax_UDA AND t.Tax_UDA_Value_Number = i.Tax_Value_UDA
				INNER JOIN #UDADescDelete dm on dm.uda_id = t.Tax_UDA_ID and dm.uda_value = t.Tax_UDA_Value_Number
			WHERE b.[Enabled] = 1 and ws.Stage_Type_ID not in (3,4)
	
			--Set New Import Batches validity to Unknown if an item contains one of the deleted tax udas
			Update SPD_Batch
			Set Is_Valid = -1
			FROM SPD_Batch b
				INNER JOIN SPD_Workflow_Stage ws on ws.ID = b.Workflow_Stage_ID
				INNER JOIN SPD_Import_Items i on i.Batch_ID = b.ID AND IsNumeric(i.TaxUDA)=1
				INNER JOIN SPD_TAX_UDA_VALUE t on t.Tax_UDA_ID = i.TaxUDA AND t.Tax_UDA_Value_Number = i.TaxValueUDA
				INNER JOIN #UDADescDelete dm on dm.uda_id = t.Tax_UDA_ID and dm.uda_value = t.Tax_UDA_Value_Number
			WHERE b.[Enabled] = 1 and ws.Stage_Type_ID not in (3,4)
		
			--Set Item Maint item validity to Unknown if it contains a change to the tax value that has been deleted
			Update SPD_Item_Maint_Items
			Set IS_Valid = -1
			FROM SPD_Batch b
				INNER JOIN SPD_Workflow_Stage ws on ws.ID = b.Workflow_Stage_ID
				INNER JOIN SPD_Item_Maint_Items im on im.Batch_ID = b.ID
				INNER JOIN SPD_Item_Master_Changes c1 on c1.Item_Maint_Items_ID = im.ID and c1.Field_Name = 'TaxUDA'
				INNER JOIN SPD_Item_Master_Changes c2 on c2.Item_Maint_Items_ID = im.ID and c2.Field_Name = 'TaxValueUDA'
				INNER JOIN SPD_TAX_UDA_VALUE t on t.Tax_UDA_ID = c1.Field_Value AND t.Tax_UDA_Value_Number = c2.Field_Value
				INNER JOIN #UDADescDelete dm on dm.uda_id = t.Tax_UDA_ID and dm.uda_value = t.Tax_UDA_Value_Number
			WHERE b.[Enabled] = 1 and ws.Stage_Type_ID not in (3,4)
			
			Update SPD_Batch
			Set IS_Valid = -1
			FROM SPD_Batch b
				INNER JOIN SPD_Workflow_Stage ws on ws.ID = b.Workflow_Stage_ID
				INNER JOIN SPD_Item_Maint_Items im on im.Batch_ID = b.ID
				INNER JOIN SPD_Item_Master_Changes c1 on c1.Item_Maint_Items_ID = im.ID and c1.Field_Name = 'TaxUDA'
				INNER JOIN SPD_Item_Master_Changes c2 on c2.Item_Maint_Items_ID = im.ID and c2.Field_Name = 'TaxValueUDA'
				INNER JOIN SPD_TAX_UDA_VALUE t on t.Tax_UDA_ID = c1.Field_Value AND t.Tax_UDA_Value_Number = c2.Field_Value
				INNER JOIN #UDADescDelete dm on dm.uda_id = t.Tax_UDA_ID and dm.uda_value = t.Tax_UDA_Value_Number
			WHERE b.[Enabled] = 1 and ws.Stage_Type_ID not in (3,4)

			--Set Item Maint item validity to Unknown if item is in a batch that is being edited, it has no changes to Tax values, and the current tax values are invalid
			Update SPD_Item_Maint_Items
			Set IS_Valid = -1
			FROM SPD_Batch b
				INNER JOIN SPD_Workflow_Stage ws on ws.ID = b.Workflow_Stage_ID
				INNER JOIN SPD_Item_Maint_Items im on im.Batch_ID = b.ID
				LEFT JOIN SPD_Item_Master_Changes c1 on c1.Item_Maint_Items_ID = im.ID and c1.Field_Name = 'TaxUDA'
				LEFT JOIN SPD_Item_Master_Changes c2 on c2.Item_Maint_Items_ID = im.ID and c2.Field_Name = 'TaxValueUDA'
				INNER JOIN SPD_Item_Master_UDA u on u.Michaels_SKU = im.Michaels_SKU
				INNER JOIN SPD_TAX_UDA_VALUE t on t.Tax_UDA_ID = u.UDA_ID AND t.Tax_UDA_Value_Number = u.UDA_Value
				INNER JOIN #UDADescDelete dm on dm.uda_id = t.Tax_UDA_ID and dm.uda_value = t.Tax_UDA_Value_Number
			WHERE b.[Enabled] = 1 and ws.Stage_Type_ID not in (3,4)
				AND (c1.Field_Value is null OR c2.Field_Value is null)
				
			Update SPD_Batch
			Set IS_Valid = -1
			FROM SPD_Batch b
				INNER JOIN SPD_Workflow_Stage ws on ws.ID = b.Workflow_Stage_ID
				INNER JOIN SPD_Item_Maint_Items im on im.Batch_ID = b.ID
				LEFT JOIN SPD_Item_Master_Changes c1 on c1.Item_Maint_Items_ID = im.ID and c1.Field_Name = 'TaxUDA'
				LEFT JOIN SPD_Item_Master_Changes c2 on c2.Item_Maint_Items_ID = im.ID and c2.Field_Name = 'TaxValueUDA'
				INNER JOIN SPD_Item_Master_UDA u on u.Michaels_SKU = im.Michaels_SKU
				INNER JOIN SPD_TAX_UDA_VALUE t on t.Tax_UDA_ID = u.UDA_ID AND t.Tax_UDA_Value_Number = u.UDA_Value
				INNER JOIN #UDADescDelete dm on dm.uda_id = t.Tax_UDA_ID and dm.uda_value = t.Tax_UDA_Value_Number
			WHERE b.[Enabled] = 1 and ws.Stage_Type_ID not in (3,4)
				AND (c1.Field_Value is null OR c2.Field_Value is null)

			--Send email to inform Michaels of items that are currently using the deleted Tax Value UDa
			DECLARE @SPEDYEnvVars_SPD_Email_FromAddress nvarchar(2048)
			DECLARE @EmailBody varchar(max)
			DECLARE @SPEDYEnvVars_SPD_SMTP_Server nvarchar(2048)
			DECLARE @SPEDYEnvVars_SPD_SMTP_Authentication_Required bit
			DECLARE @SPEDYEnvVars_SPD_SMTP_Authentication_User nvarchar(2048)
			DECLARE @SPEDYEnvVars_SPD_SMTP_Authentication_Password nvarchar(2048)
								
			SELECT  
				@SPEDYEnvVars_SPD_Email_FromAddress = [SPD_Email_FromAddress]
				,@SPEDYEnvVars_SPD_SMTP_Server = [SPD_SMTP_Server]
				,@SPEDYEnvVars_SPD_SMTP_Authentication_Required = [SPD_SMTP_Authentication_Required]
				,@SPEDYEnvVars_SPD_SMTP_Authentication_User = [SPD_SMTP_Authentication_User]
				,@SPEDYEnvVars_SPD_SMTP_Authentication_Password = [SPD_SMTP_Authentication_Password]
			FROM SPD_Environment
			WHERE Server_Name = @@SERVERNAME AND Database_Name = DB_NAME()
			
			SET @EmailBody = 'The following items are still using a deleted Tax UDA Value.  Please modify these items in Item Maintenance to remove the invalid Tax UDA VAlue. <br/> <br/>'
			
			Select @EmailBody = @EmailBody + u.Michaels_SKU + '<br/>' 
			FROM SPD_Item_Master_UDA u 
				INNER JOIN SPD_TAX_UDA_VALUE t on t.Tax_UDA_ID = u.UDA_ID AND t.Tax_UDA_Value_Number = u.UDA_Value
				INNER JOIN #UDADescDelete dm on dm.uda_id = t.Tax_UDA_ID and dm.uda_value = t.Tax_UDA_Value_Number
												
						
			EXEC sp_SQLSMTPMail
					  @vcSender = @SPEDYEnvVars_SPD_Email_FromAddress,
					  @vcFrom = @SPEDYEnvVars_SPD_Email_FromAddress,
					  @vcTo = @SPEDYEnvVars_SPD_Email_FromAddress,
					  @vcCC = '',
				      @vcBCC = '',
					  @vcSubject = 'Items using deleted Tax UDA Value',
					  @vcHTMLBody = @EmailBody,
					  @bAutoGenerateTextBody = 1,
					  @vcSMTPServer = @SPEDYEnvVars_SPD_SMTP_Server,
					  @cDSNOptions = '2',
					  @bAuthenticate = @SPEDYEnvVars_SPD_SMTP_Authentication_Required,
					  @vcSMTPAuth_UserName = @SPEDYEnvVars_SPD_SMTP_Authentication_User,
					  @vcSMTPAuth_UserPassword = @SPEDYEnvVars_SPD_SMTP_Authentication_Password

					
								
			SET @MsgType = 14
		END TRY
		BEGIN CATCH
			set @msg='Processing Item Maint - UDA Descriptions -- DELETE... Error on Delete' + ' (Message: ' + @cMessageID + ')' + ' '  + ERROR_MESSAGE()
			Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing Item Maint - UDA Descriptions -- DELETE... Error on Delete:' + ERROR_MESSAGE(), 'null ERROR_MESSAGE when trying to: ' + 'Processing Item Maint - UDA Descriptions -- DELETE... Error on Delete')
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
		END CATCH
	END
	Drop table #UDADescDelete

END

-- *************************************************************
-- Check for Message Item Maint Process Complete Messages
-- *************************************************************

--set @msg = 'Source: ' + @XML_HeaderSegment_Source + '   Contents: ' + @XML_HeaderSegment_Contents
--if @Debug=1  Print @msg

IF @XML_HeaderSegment_Source = 'RMS12_MQSEND' and @XML_HeaderSegment_Contents = 'SPEDYBatchConfirm'
BEGIN
	IF @Debug=1  Print 'Processing SPEDYBatchConfirm for Item Maint'

	SELECT
		@MsgID = SpdMessage_ID
	FROM OPENXML (@intXMLDocHandle, '/mikMessage')
	WITH (
	   mikHeader_Source varchar(1000) 'mikHeader/Source'
	  ,mikHeader_Contents varchar(1000) 'mikHeader/Contents'
	  ,mikHeader_ThreadID varchar(1000) 'mikHeader/ThreadID'
	  ,mikHeader_PublishTime varchar(1000) 'mikHeader/PublishTime'
	) hdr
	INNER JOIN (	
	  SELECT top 1 * 
	  FROM OPENXML (@intXMLDocHandle, '/mikMessage/mikData[@type="SPEDYBatchConfirm"]')
		WITH (
		mikData_Action varchar(1000) '@action'
		,SpdMessage_ID varchar(1000) 'spd_message_id'
		)
	  ) data ON SpdMessage_ID is not NULL

	IF @MsgID is not NULL 
	BEGIN
		IF @Debug=1  Print 'Processing SPEDYBatchConfirm for Item Maint ' + @MsgID
		Set @msg = 'Processing Item Maint - SPEDYBatchConfirm for Message ID: ' + @MsgID
		Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing Item Maint - SPEDYBatchConfirm for Message ID')
		EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg

		BEGIN TRY
			SET @MsgType = 13	-- Set Message type in case no issues
		
			SELECT @BatchID = Batch_ID
			FROM SPD_Item_Maint_MQMessageTracking
			Where  Message_ID = @MsgID
			
			IF @BatchID is NULL
				-- Sameple MsgID	B.51219.74.20100723155102663	2010 07 23 15 51 02 663
				SET @BatchID = SUBSTRING(@MsgID, 3, CharIndex('.', @MsgID, 3) - 3)			
				
			Set @dotPos = charIndex('.', @MsgID, 3) -- End of batch #
			Set @dotPos = charIndex('.', @MsgID, @dotPos+1)	-- End of item #
			SET @ProcessTimeStamp = SUBSTRING(@MsgID,@dotPos+1,100)	-- Get the process time stamp using a really big length to ensure we get all of it
	
			--Make sure there are no more dots in the timestamp.  If this is a FutureCost Cancel change, there might be.
			Set @dotPos = charIndex('.', @ProcessTimeStamp, 1)
			If @dotPos > 0 
			BEGIN
				Set @ProcessTimeStamp = SUBSTRING(@ProcessTimeStamp,0,@dotPos)
			END
			
			IF @BatchID is not NULL
			BEGIN

				UPDATE SPD_MQComm_Message
					Set SPD_Batch_ID = @BatchID
				WHERE ID = @MessageID
			
				-- Find the Matching Message ID in the Message Tracking table (latest message sent for the Batch / message)
				Set @MaxProcessTimeStamp = (Select max(Process_TimeStamp) From SPD_Item_Maint_MQMessageTracking where Batch_ID = @BatchID and Process_TimeStamp is not NULL )
				IF @Debug=1  Print 'Process Time stamp =  ' + @ProcessTimeStamp + ' Max: ' + isNull(@MaxProcessTimeStamp,'NULL') + '  BatchID = ' + isNull(convert(varchar(20),@BatchID),'NULL')
 
				--Automated messages (Changes to import burden) aren't associated with a batch (batch id = 00000)
				IF @MaxProcessTimeStamp is not NULL and @MaxProcessTimeStamp = @ProcessTimeStamp and @BatchID > 0
				BEGIN	-- We've received a message for a current Batch message set
					
					-- Check current status of message.  It needs to be 1 for an active message, otherwise this is a possible error that needs to be reported.
					UPDATE SPD_Item_Maint_MQMessageTracking
						Set Status_ID = 2	-- Batch message was processed by RMS
						, Date_Updated = getdate()
					WHERE Message_ID = @MsgID
						and Status_ID <= 2	-- make sure message is at the sent phase or acknowledged phase
					IF @@rowcount = 0 
					BEGIN
						Set @msg = 'Processing Item Maint - SPEDYBatchConfirm for Message ID: ' + @MsgID + '. Message confirmation message was received for a message that is not in the SENT / Accepted State. This indicates that an error message was received for this message.'
						Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'SPEDYBatchConfirm  message was received for a message that is not in the SENT / Accepted State:')
						EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
						exec usp_SPD_ItemMaint_CompleteOrErrorBatch @Batch_ID = @BatchID, @cmd = 'S', @Msg = @msg, @debug = 1, @LTS=@LTS
					END

					IF @Debug=1  print 'MessageID '+convert(varchar(20),@MessageID)
					IF @Debug=1  print 'Batch ID '+convert(varchar(20),@BatchID)
					Set @msg = 'Updating Message Record ' + isNULL(convert(varchar(20),@MessageID),'na') 
						+ ' to Batch: ' + isNULL(convert(varchar(20),@BatchID),'-1') + ' - Process TimeStamp: ' + @ProcessTimeStamp
					Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'SPEDYBatchConfirm  updating message record')
					EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg

					-- *****************************************************************************************************************************************************************
					-- Is this a Pack Completed Message?  If so, change any messages that are on Hold to the Outbound Normal state so they can be sent (Basic and Cost Change messages)
					-- *****************************************************************************************************************************************************************
					IF Left(@MsgID,2) = 'P.'
					BEGIN
						Set @msg = 'Pack Msg Received. Releasing any other Batch Update Messages for Batch: '+ isNULL(convert(varchar(20),@BatchID),'-1')
						Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'SPEDYBatchConfirm  Pack Msg Received. Releasing')
						EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
						
						UPDATE SPD_MQComm_Message
							Set [Message_Direction] = 1
								, Date_Last_Modified = getdate()
						WHERE [SPD_Batch_ID] = @BatchID
							and [Message_Direction] = 2
						IF @@RowCount > 0 
						BEGIN
							Set @msg = 'Messages Released from Hold: ' + convert(varchar(20),@@RowCount)
							Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'SPEDYBatchConfirm  Messages Released from Hold')
							EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
						END
					END
					
					-- Now Check to see if all the sent messages have been acknowledged
					SELECT @TotalMsg = Count(*) 
					FROM SPD_Item_Maint_MQMessageTracking
					WHERE [Batch_ID] = @BatchID
						and [Process_TimeStamp] = @ProcessTimeStamp
					
					SELECT @CompletedMsg = Count(*) 
					FROM SPD_Item_Maint_MQMessageTracking
					WHERE [Batch_ID] = @BatchID
						and [Status_ID] = 2
						and [Process_TimeStamp] = @ProcessTimeStamp

					SELECT @SentMsg = Count(*)		-- Get count of Batch messages that have been sent and not updated to Completed
					FROM SPD_Item_Maint_MQMessageTracking
					WHERE [Batch_ID] = @BatchID
						and [Status_ID] = 1
						and [Process_TimeStamp] = @ProcessTimeStamp

					SELECT @ErrorMsg = Count(*)		-- Get count of Batch messages that have been sent and not updated to Completed
					FROM SPD_Item_Maint_MQMessageTracking
					WHERE [Batch_ID] = @BatchID
						and [Status_ID] > 2	-- Error or Abandoned 
						and [Process_TimeStamp] = @ProcessTimeStamp

					IF @debug=1 print 'Updating Batch History wit confirm message'
					INSERT INTO SPD_Batch_History (
						SPD_Batch_ID,
						Workflow_Stage_ID,
						[Action],
						Date_Modified,
						Modified_User,
						Notes 
						) 
					VALUES (
						@BatchID
						, @STAGE_WAITINGFORSKU
						, 'System Activity'
						, getdate()
						, @procUserID
						, 'SPEDY received an RMS confirmation message for the batch. Msgs Sent: ' 
							+ convert(varchar(20),@TotalMsg) + '. Confirmed: ' + convert(varchar(20),@CompletedMsg)
						)
					
					-- Note any errors or Resents force all messages for the batch to be error or Resent so there would be no completed messages found
					IF ( @CompletedMsg > 0 and @SentMsg = 0 and @ErrorMsg = 0)	-- No Outstanding Sent messages and the Sent Messages weren't updated to 3 or 4 (error / resent)
					BEGIN	-- All messages completed
						IF @Debug=1  Print '..... Calling usp_SPD_ItemMaint_CompleteOrErrorBatch ' + convert(varchar,@BatchID) + ' cmd = C'
						set @temp = 'Calling usp_SPD_ItemMaint_CompleteOrErrorBatch ' + convert(varchar,@BatchID) + ' cmd = C' 
							+ ' For Batch Process Time Stamp: ' + @ProcessTimeStamp
						Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'calling usp_SPD_ItemMaint_CompleteOrErrorBatch')
						EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@temp

						Exec @retCode = usp_SPD_ItemMaint_CompleteOrErrorBatch @Batch_ID = @BatchID, @cmd = 'C', @LTS=@LTS
						IF @retCode != 0	
						BEGIN
							-- Some Error Occurred on Batch Ending Process.  Flag the last message as an error so it can be reset after the error has been corrected.
							SET @MsgType = 99
							-- ****************************************************************************************************************************
							-- Set Batch Message back to SENT so Batch won't complete.  
							-- To Complete this batch the following must be done:
							--		1. The Error must be corrected. See Emails and Logs for additional info on the error
							--		2. Update the Message Type for the messsage to -1 (now set at 99 to easily find it.
							--		3. The records in [SPD_MQComm_Message_Status] that pertain to this Message AND HAVE a Status_ID > 1 
							--		   must be deleted so the Inbound process will reprocess the message.
							-- ****************************************************************************************************************************
							UPDATE SPD_Item_Maint_MQMessageTracking
								Set Status_ID = 1	
								, Date_Updated = getdate()
							WHERE Message_ID = @MsgID
							
						END
					END
				END
				ELSE	-- Mismatch time stamp
				BEGIN
					IF @BatchID > 0	-- Trouble Mismatch Process Time stamp
					BEGIN
						Set @msg = 'SPEDY received a Batch Message Confirmation for a message that is nolonger in the active Message set. This indicates that RMS processed changes for a Batch that received an error and was sent back to the DBC stage.' 
						+ '<p><b>Diagnostic Info:</b></p>'
						+ '<p>  Process Time Stamp: ' + @ProcessTimeStamp + '</p>'
						+ '<p>  Max Batch Time Stamp: ' + isNull(@MaxProcessTimeStamp,'NULL')  + '</p>'
						+ '<p>  BatchID: ' + isNull(convert(varchar(20),@BatchID),'NULL') + '</p>'
						+ '<p>  Message ID: ' + @MsgID + '</p>'
						exec @retCode = usp_SPD_ItemMaint_CompleteOrErrorBatch @Batch_ID = @BatchID, @cmd = 'S', @ErrorSKU = @SKU, @Msg = @msg, @debug = 1, @LTS=@LTS
					END
				END
			END
			ELSE	-- Bad batch number
			BEGIN
				Set @msg = 'Could not Extract Batch ID from Message: '+coalesce(convert(varchar(20),@MessageID),'na')+ '. Marking message as processed.'
				Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Could not Extract Batch ID from Message')
				EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
				EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			END
		END TRY
		
		BEGIN CATCH
			Set @msg = 'Processing Item Maint - SPEDYBatchConfirm for Message ID: ' + @MsgID + ' ERROR OCCURRED ON Processing' + ' '  + ERROR_MESSAGE()
			Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing Item Maint - SPEDYBatchConfirm for Message:' + ERROR_MESSAGE(), 'null ERROR_MESSAGE when trying to: ' + 'Processing Item Maint - SPEDYBatchConfirm for Message')
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
		END CATCH
	END
END

-- ****************************************************************
-- Look for Clearance and Retail Update /create messages from RMS6
-- ****************************************************************

IF @XML_HeaderSegment_Source = 'RMS6_MQSEND' and @XML_HeaderSegment_Contents = 'SkuZoneRetail'
BEGIN
	IF @Debug=1  Print 'Processing Clearance Retail message'

	SELECT
		Michaels_SKU
	  , Zone_ID
	  , Clearance_Price
	  , Retail_Price
	   into #ItemPrices
	FROM OPENXML (@intXMLDocHandle, '/mikMessage')
	WITH (
	   mikHeader_Source varchar(1000) 'mikHeader/Source'
	  ,mikHeader_Contents varchar(1000) 'mikHeader/Contents'
	  ,mikHeader_ThreadID varchar(1000) 'mikHeader/ThreadID'
	  ,mikHeader_PublishTime varchar(1000) 'mikHeader/PublishTime'
	) hdr
	INNER JOIN (
	  SELECT *
	  FROM OPENXML (@intXMLDocHandle, '/mikMessage/mikData[@type="SkuZoneRetail"]')
	  WITH (
		Michaels_SKU varchar(1000) 'sku'
		, mikRetail_Action varchar(1000) '@action'
		, Zone_ID varchar(1000) 'zone_id'
		, Clearance_Price varchar(1000) 'unit_retail'
		, Retail_Price varchar(1000) 'was_price'
		)
	 ) ItemPrice ON ItemPrice.mikRetail_Action in ('Update', 'Create')
	
	/*	Base 1 Retail		(Zone 1): 
		Base 2 Retail		(Zone 2):
		Test Retail			(Zone 3):  
		Alaska Retail		(Zone 4):
		Canada Retail		(Zone 5):
		High 2 Retail		(Zone 6):
		High 3 Retail		(Zone 7):
		Small Mkt Retail	(Zone 8):
		High 1 Retail		(Zone 9):
		Base 3 Retail		(Zone 10):
		Low 1 Retail		(Zone 11): 
		Low 2 Retail		(Zone 12): 
		Manhattan Retail	(Zone 13): 	*/

	IF ( select count(*) from #ItemPrices) > 0
	BEGIN
		set @msg='Processing RMS6_MQSEND for Item Maint - Price Changes' + ' (Message: ' + @cMessageID + ')'
		Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Could not Extract Batch ID from Message')
		IF @Debug=1  Print @msg
		EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
		BEGIN TRY

			IF EXISTS ( select Michaels_SKU from SPD_Item_Master_SKU where Michaels_SKU in ( Select Michaels_SKU from #ItemPrices ) )
			BEGIN
				Declare @SKUPrice varchar(10), @zoneID int, @ClearPrice money, @RetailPrice money
				Declare price CURSOR for
					Select
						Michaels_SKU
					  , Zone_ID
					  , Clearance_Price
					  , Retail_Price
					From #ItemPrices
				
				OPEN price
				FETCH NEXT From Price INTO  @SKUPrice, @zoneID, @ClearPrice, @RetailPrice
				WHILE @@Fetch_status = 0
				BEGIN
					IF @zoneID = 1
						UPDATE SPD_Item_Master_SKU 
							Set Base1_Clearance_Retail = @ClearPrice 
								, Base1_Retail = @RetailPrice
						WHERE Michaels_SKU = @SKUPrice
						
					IF @zoneID = 2
						UPDATE SPD_Item_Master_SKU 
							Set Base2_Clearance_Retail = @ClearPrice 
								, Base2_Retail = @RetailPrice
						WHERE Michaels_SKU = @SKUPrice
						
					IF @zoneID = 10
						UPDATE SPD_Item_Master_SKU 
							Set Base3_Clearance_Retail = @ClearPrice 
								, Base3_Retail = @RetailPrice
						WHERE Michaels_SKU = @SKUPrice
						
					IF @zoneID = 3
						UPDATE SPD_Item_Master_SKU 
							Set Test_Clearance_Retail = @ClearPrice 
								, Test_Retail = @RetailPrice
						WHERE Michaels_SKU = @SKUPrice
						
					IF @zoneID = 4
						UPDATE SPD_Item_Master_SKU 
							Set Alaska_Clearance_Retail = @ClearPrice
								, Alaska_Retail = @RetailPrice
						WHERE Michaels_SKU = @SKUPrice
						
					IF @zoneID = 5
						UPDATE SPD_Item_Master_SKU 
							Set Canada_Clearance_Retail = @ClearPrice 
								, Canada_Retail = @RetailPrice
						WHERE Michaels_SKU = @SKUPrice
						
					IF @zoneID = 9
						UPDATE SPD_Item_Master_SKU 
							Set High1_Clearance_Retail = @ClearPrice 
								, High1_Retail = @RetailPrice
						WHERE Michaels_SKU = @SKUPrice
						
					IF @zoneID = 6
						UPDATE SPD_Item_Master_SKU 
							Set High2_Clearance_Retail = @ClearPrice 
								, High2_Retail = @RetailPrice
						WHERE Michaels_SKU = @SKUPrice
						
					IF @zoneID = 7
						UPDATE SPD_Item_Master_SKU 
							Set High3_Clearance_Retail = @ClearPrice 
								, High3_Retail = @RetailPrice
						WHERE Michaels_SKU = @SKUPrice
						
					IF @zoneID = 8
						UPDATE SPD_Item_Master_SKU 
							Set Small_Market_Clearance_Retail = @ClearPrice
								, Small_Market_Retail = @RetailPrice
						WHERE Michaels_SKU = @SKUPrice
						
					IF @zoneID = 11
						UPDATE SPD_Item_Master_SKU 
							Set Low1_Clearance_Retail = @ClearPrice
								, Low1_Retail = @RetailPrice
						WHERE Michaels_SKU = @SKUPrice
						
					IF @zoneID = 12
						UPDATE SPD_Item_Master_SKU 
							Set Low2_Clearance_Retail = @ClearPrice 
								, Low2_Retail = @RetailPrice
						WHERE Michaels_SKU = @SKUPrice
						
					IF @zoneID = 13
						UPDATE SPD_Item_Master_SKU 
							Set Manhattan_Clearance_Retail = @ClearPrice
								, Manhattan_Retail = @RetailPrice
						WHERE Michaels_SKU = @SKUPrice
					
					IF @zoneID = 14
						UPDATE SPD_Item_Master_SKU 
							Set Quebec_Clearance = @ClearPrice
								, Quebec_Retail = @RetailPrice
						WHERE Michaels_SKU = @SKUPrice
						
					IF @zoneID = 15
						UPDATE SPD_Item_Master_SKU 
							Set PuertoRico_Clearance = @ClearPrice
								, PuertoRico_Retail = @RetailPrice
						WHERE Michaels_SKU = @SKUPrice
						
					FETCH NEXT From Price INTO  @SKUPrice, @zoneID, @ClearPrice, @RetailPrice
				END

				Close Price
				DEALLOCATE Price

			END		-- No else because the SKU should have been created from a SKU record
			SET @MsgType = 15
		END TRY

		BEGIN CATCH
			set @msg = 'Processing Item Maint - Price Changes... ERROR on Update' + ' (Message: ' + @cMessageID + ')' + ' '  + ERROR_MESSAGE()
			Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing Item Maint - Price Changes... ERROR on Update:' + ERROR_MESSAGE(), 'null ERROR_MESSAGE when trying to: ' + 'Processing Item Maint - Price Changes... ERROR on Update')
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
		END CATCH
	END
	Drop table #ItemPrices
END	

-- *************************************************************
-- Check for Supplier Agent Updates
-- *************************************************************
IF @XML_HeaderSegment_Source = 'RMS12_MQSEND' and @XML_HeaderSegment_Contents = 'SupplierAgent'
BEGIN
	IF @Debug=1  Print 'Processing SupplierAgent for Item Maint'

	SELECT distinct
		Vendor_Number
		, Agent
	  INTO #VendorAgent		
	FROM OPENXML (@intXMLDocHandle, '/mikMessage')
	WITH (
	   mikHeader_Source varchar(1000) 'mikHeader/Source'
	  ,mikHeader_Contents varchar(1000) 'mikHeader/Contents'
	  ,mikHeader_ThreadID varchar(1000) 'mikHeader/ThreadID'
	  ,mikHeader_PublishTime varchar(1000) 'mikHeader/PublishTime'
	) hdr
	INNER JOIN (	
	  SELECT *
	  FROM OPENXML (@intXMLDocHandle, '/mikMessage/mikData[@type="SupplierAgent"]')
		WITH (
		mikData_Action varchar(1000) '@action'
		,Vendor_Number varchar(30) 'supplier'
		,Agent varchar(100) 'agent'
		)
	  ) data ON mikData_Action in ('Update', 'Delete', 'Create') 

	IF (select count(*) from #VendorAgent) > 0 
	BEGIN
		set @msg='Processing RMS12_MQSEND for Item Maint - Supplier Agent' + ' (Message: ' + @cMessageID + ')'
		Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing RMS12_MQSEND ')
		IF @Debug=1  Print @msg
		EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
		BEGIN TRY
		
			UPDATE SPD_Item_Master_Vendor
				SET Vendor_Or_Agent = CASE
						WHEN NullIf(mVA.Agent,'') is NULL	THEN 'V'
						ELSE 'A' END
					, [Agent_Type] = NullIf(mVA.Agent,'')
					, [Update_User_ID] = @procUserID
					, [Date_Last_Modified] = getdate()
			FROM SPD_Item_Master_Vendor V
				Join  #VendorAgent mVA	ON V.Vendor_Number = mVA.Vendor_Number
				
			-- Keep the SPD_Item_Master_Vendor_Agent Table in sync (used by triggers)
			UPDATE [SPD_Item_Master_Vendor_Agent]
				SET [Agent] = mVA.Agent
					,[Update_User_ID] = @procUserID
					,[Date_Last_Modified] = getdate()
			FROM [SPD_Item_Master_Vendor_Agent] VA
				Join  #VendorAgent mVA	ON VA.Vendor_Number = mVA.Vendor_Number
											and  NullIf(mVA.Agent,'') is Not NULL

			INSERT 	[SPD_Item_Master_Vendor_Agent] (
				[Vendor_Number]
				,[Agent]
				,[Created_User_ID]
				,[Date_Created]
				,[Is_Active]
				)
			SELECT mVA.Vendor_Number			
				, mVA.Agent
				, @procUserID
				, getdate()
				, 1
			FROM #VendorAgent mVA
				Left Join [SPD_Item_Master_Vendor_Agent] VA on mVA.Vendor_Number = VA.Vendor_Number
			WHERE NullIf(mVA.Agent,'') is Not NULL
				and VA.[Vendor_Number] is NULL

			DELETE VA
			FROM [SPD_Item_Master_Vendor_Agent] VA
				Join  #VendorAgent mVA	ON VA.Vendor_Number = mVA.Vendor_Number
											and  NullIf(mVA.Agent,'') is NULL
		END TRY
		
		BEGIN CATCH
			set @msg = 'Processing Item Maint - Supplier Agent... ERROR on Update' + ' (Message: ' + @cMessageID + ')' + ' '  + ERROR_MESSAGE()
			Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing Item Maint - Supplier Agent... ERROR on Update:' + ERROR_MESSAGE(), 'null ERROR_MESSAGE when trying to: ' + 'Processing Item Maint - Supplier Agent... ERROR on Update')
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg		
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
		END CATCH
	END
	Drop Table #VendorAgent
	SET @MsgType = 16
		  
END

-----------------------------------------------------------------------------------------------------------
	-- ******************************************************************************************************
	-- Did any master pack quantity or dimensions change? If so, Send Import Burden to RMS If this is an Import Vendor (who has Import Burden)
	-- ******************************************************************************************************

	if @LTS is null
		set @LTS = sysdatetime()
	
	Set @VendorType = IsNull( (
		Select coalesce(Vendor_Type,0)
		From SPD_Vendor
		Where Vendor_Number = @VendorNo ), 0 )
	
	Select @DutyPct = Duty_Percent
		, @OceanFrt = Ocean_Freight_Amount
	From SPD_Item_Master_Vendor
	Where Michaels_SKU = @SKU and Vendor_Number = @VendorNo

		-- Import Vendor
	IF @VendorType = 300	
		AND (@OldMasterLength != @NewMasterLength
		 or  @OldMasterWidth != @NewMasterWidth
		 or  @OldMasterHeight != @NewMasterHeight
		 or  @OldEachesMasterCase != @NewEachesMasterCase)
		AND @DutyPct is NOT NULL
		AND @OceanFrt IS NOT NULL
	BEGIN
		set @OldDim = convert(varchar(20),@OldMasterLength) + ' x ' + convert(varchar(20),@OldMasterWidth) + ' x ' + convert(varchar(20),@OldMasterHeight)
		set @NewDim = convert(varchar(20),@NewMasterLength) + ' x ' + convert(varchar(20),@NewMasterWidth) + ' x ' + convert(varchar(20),@NewMasterHeight)
		
		set @Lmsg = 'Creating New Import Burden Message for ' + @SKU + ' : ' + convert(varchar(20),@VendorNo) 
			+ '. OLD Master Dimensions: ' + convert(varchar,@OldDim) + '  NEW Master Dimensions: ' + convert(varchar,@NewDim)
			+ '. OLD Eaches Master Case: ' + convert(varchar(20),@OldEachesMasterCase) + '  NEW Eaches Master Case: ' + convert(varchar(20),@NewEachesMasterCase)
			+ '  Duty Pct: ' + convert(varchar(20),@DutyPct) + '  Ocean Frt: ' + convert(varchar(20),@OceanFrt)
		Set @Lmsg = coalesce(@Lmsg, 'Error constructing log message while: ' + 'Processing Item Maint - Creating New Import Burden Message')
		EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@Lmsg

		DECLARE @ChangeRecs varchar(1000), @ImportBurden decimal(18,6), @RMSField varchar(30), @temp1 varchar(1000), @ChangeKey varchar(1000)
			, @msgItems varchar(2000), @msgWrapper varchar(3000), @MessageB XML, @NewMessage_ID bigint
		
		--Declare @ProcessTimeStamp varchar(100)
		Set @ProcessTimeStamp = REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(CONVERT(varchar(100), dbo.udf_s_Convert_SQLDateTime_To_UTCDateTimeString(getdate()) ), '-05:00', ''), '-', ''), ' ', ''), ':', ''), '.', '')
		
		SET @ChangeRecs = ''
		SET @ImportBurden = ( 
			Select top 1 Import_Burden 
			FROM SPD_Item_Master_Vendor_Countries
			WHERE Michaels_SKU = @SKU 
				and Vendor_Number = @VendorNo 
				and Primary_Indicator = 1
			)

		SET @RMSField = coalesce( (Select RMS_Field_Name
			FROM [SPD_RMS_Field_Lookup]
			WHERE [Field_Name] = 'ImportBurden'
				and [Maint_Type] = 'B' )
			, 'totalimportburden' )
			
		SET @ChangeRecs = dbo.udf_MakeXMLSnippet(convert(varchar(30),@ImportBurden), @RMSField)

		SET @temp1 = 'B.00000.' + convert(varchar(20),@MessageID) + '.' + @ProcessTimeStamp

		SET @ChangeKey =  dbo.udf_MakeXMLSnippet(@temp1, 'spd_batch_id') 
			+ dbo.udf_MakeXMLSnippet(@SKU, 'michaels_sku') 
			+ dbo.udf_MakeXMLSnippet(@VendorNo, 'supplier')
			+ dbo.udf_MakeXMLSnippet('SPEDY', 'update_user_domainlogin') 
			+ dbo.udf_MakeXMLSnippet(COALESCE(dbo.udf_s_Convert_SQLDateTime_To_UTCDateTimeString(getdate()), ''), 'date_last_modified')

		-- create msg
		SET @msgItems = '<mikData id="' 
			+ @temp1 + '" '	+ 'type="SPEDYItemMaint" action="Update">'
			+ @ChangeKey 
			+ @ChangeRecs 
			+ '</mikData>'

		SET @msgWrapper = '<mikMessage><mikHeader><Source>SPEDY</Source><Contents>SPEDYItemMaint</Contents><ThreadID>1'		-- + convert(varchar(2), @BatchID % 9 + 1)
			+ '</ThreadID><PublishTime>' 
			+ dbo.udf_s_Convert_SQLDateTime_To_UTCDateTimeString(getdate()) 
			+ '</PublishTime></mikHeader>' + @msgItems + '</mikMessage>'


	    IF @msgWrapper is NOT NULL
	    BEGIN
			SET @MessageB = CONVERT(XML,@msgWrapper)
			
			INSERT INTO SPD_MQComm_Message (
			  [SPD_Batch_ID]
			  ,[Message_Type_ID]
			  ,[Message_Body]
			  ,[Message_Direction]
			) VALUES (
				0
				, 10
				, @MessageB
				, 1 
			)
			SET @NewMessage_ID = SCOPE_IDENTITY()
			INSERT INTO SPD_MQComm_Message_Status (
			  [Message_ID]
			  ,[Status_ID]
			) VALUES (
				@NewMessage_ID
				, 1 
			)
		END
		ELSE
		BEGIN
			Set @PriInd = isNull( ( 
				Select top 1 convert(varchar(10),Primary_Indicator)
				FROM SPD_Item_Master_Vendor_Countries
				WHERE Michaels_SKU = @SKU 
					and Vendor_Number = @VendorNo 
					and Primary_Indicator = 1 ), 'NULL')
							
			Set @msg = 'NULL Import Burden Message Generated for an Import Vendor. Check trigger.'
				+ '<br />SKU: ' + @SKU 
				+ '<br />Vendor Number: ' + convert(varchar(20),@VendorNo)
				+ '<br />Primary Ind: ' + @PriInd
				+ '<br />Message ID: ' + convert(varchar(20),@MessageID)
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] 	
				@Batch_ID=0
				, @cmd = 'S'
				, @Msg = @msg
		END			
	END
	ELSE
	BEGIN
		set @Lmsg = 'Criteria NOT MET for Sending Import Burdern Message for ' + @SKU + ' : ' + Coalesce(convert(varchar(20),@VendorNo),'NULL')
			+ '. OLD Eaches Master Case: ' + coalesce(convert(varchar(20),@OldEachesMasterCase),'NULL') 
			+ '  NEW Eaches MasterCase: ' + coalesce(convert(varchar(20),@NewEachesMasterCase),'NULL')
			+ '  Duty Pct: ' + coalesce(convert(varchar(20),@DutyPct),'NULL') 
			+ '  Ocean Frt: ' + coalesce(convert(varchar(20),@OceanFrt),'NULL')
		Set @Lmsg = coalesce(@Lmsg, 'Error constructing log message while: ' + 'Processing Item Maint - Criteria NOT MET for Sending Import Burdern Message')
		EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@Lmsg
	END

-----------------------------------------------------------------------------------------------------------


-- *************************************************************
-- Check for Nasty ItemMaint Error Messages and Warnings
-- *************************************************************

IF @XML_HeaderSegment_Source = 'RMS12_MQSEND' --and @XML_HeaderSegment_Contents = 'SPEDYItemMaint'
BEGIN
	SET @MsgID = NULL
	SET @SKU = NULL
	SET @ErrorMsg1 = NULL
	SET @ErrorMsg2 = NULL
	SELECT
		@MsgID = MSG.Message_ID
		, @SKU = MSG.SKU
		, @ErrorMsg1 = MSG.ErrorMessage1
		, @ErrorMsg2 = MSG.ErrorMessage2	
	FROM OPENXML (@intXMLDocHandle, '/mikMessage')
	WITH (
	   mikHeader_Source varchar(1000) 'mikHeader/Source'
	  ,mikHeader_Contents varchar(1000) 'mikHeader/Contents'
	  ,mikHeader_ThreadID varchar(1000) 'mikHeader/ThreadID'
	  ,mikHeader_PublishTime varchar(1000) 'mikHeader/PublishTime'
	) hdr 
	INNER JOIN (	
	  SELECT  *
	  FROM OPENXML (@intXMLDocHandle, '/mikMessage/mikData')
		WITH (
		mikData_Type varchar(1000) '@type'
		,mikData_Action varchar(1000) '@action'
		,Message_ID varchar(1000) 'spd_batch_id'
		,SKU varchar(30) 'michaels_sku'
		,VendorNo varchar(30) 'supplier'
		,ErrorMessage1 varchar(1000) 'error_message1'
		,ErrorMessage2 varchar(1000) 'error_message2'
		)
	  ) MSG ON 	MSG.mikData_Type in ('SPEDYPackMod', 'SPEDYCostChange', 'SPEDYItemMaint') and MSG.ErrorMessage1 is Not NULL 

	IF @MsgID is not NULL
	BEGIN	-- Found 1.  Set Message type to error.  Check if Warning or Error
		set @msg='Processing SPEDYItemMaint for Item Maint Error / Warning Message...' + ' (Message: ' + @cMessageID + ')'
		Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing Item Maint - for Item Maint Error / Warning Message')
		IF @Debug=1  Print @msg
		EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg

		BEGIN TRY
			SET @MsgType = 12
			SET @tempVar = SUBSTRING(@MsgID, 3, CharIndex('.', @MsgID, 3) - 3)
			IF isNumeric(@tempVar) = 1
				SET @BatchID = convert(bigint,@tempVar)
			ELSE 
				SET @BatchID = -1

			SET @msgs = @ErrorMsg1 + '<br />' + coalesce(@ErrorMsg2,'')

			IF left(@ErrorMsg1,7) = 'WARNING'
			BEGIN
				IF @Debug=1  Print '..... Calling usp_SPD_ItemMaint_CompleteOrErrorBatch ' + convert(varchar,@BatchID) + ' cmd = W  SKU = ' + @SKU + '  Message = ' + @msgs
				exec @retCode = usp_SPD_ItemMaint_CompleteOrErrorBatch @Batch_ID = @BatchID, @cmd = 'W', @ErrorSKU = @SKU, @Msg = @msgs, @debug = 1, @LTS=@LTS
			END
			ELSE
			BEGIN -- Process Error Message.
				-- Make sure message is for the current set of messages.
				Set @dotPos = charIndex('.', @MsgID, 3) -- End of batch #
				Set @dotPos = charIndex('.', @MsgID, @dotPos+1)	-- End of item #
				SET @ProcessTimeStamp = SUBSTRING(@MsgID,@dotPos+1,100)	-- Get the process time stamp using a really big length to ensure we get all of it				
				
				--Make sure there are no more dots in the timestamp.  If this is a FutureCost Cancel change, there might be.
				Set @dotPos = charIndex('.', @ProcessTimeStamp, 1)
				If @dotPos > 0 
				BEGIN
					Set @ProcessTimeStamp = SUBSTRING(@ProcessTimeStamp,0,@dotPos)
				END
				
				set @MaxProcessTimeStamp = NULL
				Set @MaxProcessTimeStamp = (Select max(Process_TimeStamp) From SPD_Item_Maint_MQMessageTracking where Batch_ID = @BatchID)
				IF @MaxProcessTimeStamp is not NULL and @MaxProcessTimeStamp = @ProcessTimeStamp 
				BEGIN
					UPDATE SPD_Item_Maint_MQMessageTracking
						Set Status_ID = 3
							, Date_Updated = getdate()
					WHERE Message_ID = @MsgID
					-- Send the Batch Back to DBC Stage if its not there already and send error email
					IF @Debug=1  Print '..... Calling usp_SPD_ItemMaint_CompleteOrErrorBatch ' + convert(varchar,@BatchID) + ' cmd = E  SKU = ' + @SKU + '  Message = ' + @msgs
					exec @retCode = usp_SPD_ItemMaint_CompleteOrErrorBatch @Batch_ID = @BatchID, @cmd = 'E', @ErrorSKU = @SKU, @Msg = @msgs, @debug = 1, @LTS=@LTS
				END
				ELSE
				BEGIN
					set @msg = 'RMS Error Message received for a Batch Message that is: a) not current, b) not a valid Batch, or c) was a response to an Import Burden Change.' + ' (Message: ' + @cMessageID + ')' + '  Message = ' + @msgs
						+ '<p><b>Diagnostic Info:</b></p>'
						+ '<p>  Process Time Stamp: ' + @ProcessTimeStamp + '</p>'
						+ '<p>  Max Batch Time Stamp: ' + isNull(@MaxProcessTimeStamp,'NULL')  + '</p>'
						+ '<p>  BatchID: ' + isNull(convert(varchar(20),@BatchID),'NULL') + '</p>'
						+ '<p>  Message ID: ' + @MsgID + '</p>'
					Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Processing Item Maint - RMS Error Message received for a Batch Message')
					EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
					EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
				END
			END
		END TRY
		BEGIN CATCH
			set @msg = 'Processing SPEDYItemMaint for Item Maint Error / Warning Message... ERROR on Processing of message' + ' (Message: ' + @cMessageID + ')' + ' '  + ERROR_MESSAGE()
			Set @msg = coalesce(@msg, 'Error constructing log message while: ' + 'Item Maint Error / Warning Message... ERROR on Processing of message:' + ERROR_MESSAGE(), 'null ERROR_MESSAGE when trying to: ' + 'Processing Item Maint - Item Maint Error / Warning Message... ERROR on Processing of message')
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
		END CATCH
	END
END

-- *************************************************************************************
--				E N D    I T E M   M A I N T E N A N C E   P R O C E S S I N G
-- *************************************************************************************
IF @MsgType is not NULL 
BEGIN
	set @temp = 'Setting Message Type = ' + convert(varchar(10), @MsgType)
	EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@temp
	UPDATE SPD_MQComm_Message
	SET Message_Type_ID = @MsgType
	WHERE ID = @MessageID AND Message_Type_ID <> 2
	SET @SUCCESSFLAG = 1
END
ELSE 
	SET @SUCCESSFLAG = 0
	
EXEC sp_xml_removedocument @intXMLDocHandle    

RETURN @SUCCESSFLAG

END

GO


ALTER PROCEDURE [dbo].[usp_SPD_ItemMaint_PublishMQMessageByBatchID]
	@BatchID bigint
	, @UserID bigint
AS
BEGIN
--declare @BatchID bigint
--Set @BatchID= 45676	-- 45797

declare @MessageB xml
declare @MessageP xml
declare @MessageC xml
declare @Message_ID bigint
declare @msg varchar(2000)
declare @LTS datetime
declare @PriCOO varchar(20)

declare @ItemID int, @SKU varchar(20), @VendorNo bigint		-- outer cursor parms
declare @FieldName varchar(50), @FieldValue varchar(max), @RMSField varchar(50), @ColType varchar(50), @ColLength int, @DontSendToRMS bit
declare @ModifiedID bigint, @ModifiedDate datetime
declare @CreatedID bigint, @CreatedDate datetime

declare @BasicCount int, @PackCount int, @CostCount int, @CostCancel int, @DisplayerCost decimal
declare @msgWrapper varchar(max)
declare @ChangeRecs varchar(max)
declare @ChangeKey varchar(max)
declare @msgItems varchar(max)
declare @COOSnippet varchar(500)
declare @EffectiveDate varchar(20)
declare @TaxUDAFlag bit, @TaxValueUDAFlag bit, @UDAID int, @UDAValue int, @PrePriceUDAFlag bit, @PrePriceUDAValueFlag bit
declare @ImportBurden decimal(18,6)
DECLARE @Temp varchar(max)
Declare @ProcessTimeStamp varchar(100)
Declare @DirFlag tinyint
Declare @retCode int

-- stage ids
DECLARE @STAGE_COMPLETED int
DECLARE @STAGE_WAITINGFORSKU int
DECLARE @STAGE_DBC int

DECLARE @StatusTbl Table (
	Batch_ID bigint
	, Item_ID Int
	, Message_ID varchar(100)
	, Status_ID tinyint
	, Date_Created datetime
	, Effective_Date datetime null
	, Process_TimeStamp varchar(100)
	)
	
Set @ProcessTimeStamp = REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(CONVERT(varchar(100), dbo.udf_s_Convert_SQLDateTime_To_UTCDateTimeString(getdate()) ), '-05:00', ''), '-', ''), ' ', ''), ':', ''), '.', '')
Set @DirFlag = 1	-- default is Outbound
set @LTS = getdate()
 
-- build stage ids
select @STAGE_COMPLETED = [id] from SPD_Workflow_Stage where Workflow_id = 2 and Stage_Type_id = 4
select @STAGE_WAITINGFORSKU = [id] from SPD_Workflow_Stage where Workflow_id = 2 and Stage_Type_id = 3
select @STAGE_DBC = [id] from SPD_Workflow_Stage where Workflow_id = 2 and Stage_Type_id = 6

/*
  ............................................................................................

  When batches are moved from stage to stage in SPEDY, the user interface 
  (specifically ItemMaint.aspx) changes the Is_Valid flag to unknown (-1) to 
  force a human to physically click on a batch and make sure it is Valid.
  
  This procedure is run when a batch reaches stage "Waiting for SKU".

  For the "Waiting for SKU" stage, no human actually clicks on batches.  This 
  stage is completely automated, sending messages to RMS and awaiting response. 

  So, here, we are setting the batch to Valid (1) if it has been marked as 
  Unknown (-1) by Item_Maint
  ............................................................................................
*/  

UPDATE SPD_Batch SET Is_Valid = 1 WHERE ID = @BatchID AND Is_Valid = -1

--  Of course, explicitly invalid batches (0) will be sent back to the previous stage...
IF  ( SELECT Is_Valid FROM SPD_Batch WHERE ID = @BatchID ) = 0 
BEGIN
	UPDATE SPD_Batch SET 
	  Workflow_Stage_ID = @STAGE_DBC,
	  Date_Modified = getdate(),
	  Modified_User = @UserID
	WHERE ID = @BatchID

	-- Record log of update
	INSERT INTO SPD_Batch_History
	(
	  SPD_Batch_ID,
	  Workflow_Stage_ID,
	  [Action],
	  Date_Modified,
	  Modified_User,
	  Notes
	)
	VALUES
	(
	  @BatchID,
	  @STAGE_WAITINGFORSKU,
	  'Reject',
	  getdate(),
	  @UserID,
	  'This batch is not valid. Sending back to previous stage (DBC/QA)'
	)
	Print 'Batch Invalid for processing'
	RETURN	-- We are Outahere
END

BEGIN tran


/* ******************************************************************** */
/* ***********************   PACK ITEM CHANGES  *********************** */
/* ******************************************************************** */

Print 'Pack Processing start'
-- See if Pack Change was made
declare @PackType varchar(20), @PackChange char(1), @ItemsInBatch int, @ItemsInPack int, @PackSKU varchar(20), @misMatch int, @QIPChange int
declare @addedSKUs varchar(max), @deletedSKUs varchar(max)
SET @PackChange = 'N'

SET @msgItems = ''
Select 
	@PackType = Pack_Type
	, @PackSKU = Pack_SKU 
FROM SPD_BATCH 
WHERE ID = @BatchID

IF @PackType in ('D', 'DP', 'SB')
BEGIN
	-- Check if Counts are different
	SELECT @ItemsInBatch = Count(ID) FROM SPD_Item_Maint_Items WHERE Batch_ID = @BatchID and Michaels_SKU <> @PackSKU
	SELECT @ItemsInPack  = Count(Child_SKU) FROM SPD_Item_Master_PackItems WHERE Pack_SKU = @PackSKU

	-- get any added or deleted skus
	SELECT @addedSKUs = SKUsAddedToPack
		, @deletedSKUs = SKUSDeletedFromPack
	FROM dbo.udf_SPD_ItemMaint_GetPackChanges(@BatchID)

	Select @misMatch = Case WHEN (len(@addedSKUs) > 0 OR len(@deletedSKUs) > 0) THEN 1 ELSE 0 End
		
	-- Check if QtyinPack Change records exists for Batch
	SELECT @QIPChange = count(c.Item_Maint_Items_ID)
	FROM SPD_Item_Maint_Items I
		JOIN SPD_Item_Master_Changes c	ON c.Item_Maint_Items_ID = I.ID
	WHERE c.Field_Name = 'QtyInPack'
		and I.batch_ID = @BatchID

	IF @ItemsInBatch <> @ItemsInPack OR @misMatch > 0 OR @QIPChange > 0
	BEGIN
	
		-- PROCESS PACK CHANGE MESSAGE
		Declare @Components varchar(max), @QIP int
		SET @Components = ''
		
		Declare ItemCursor CURSOR FOR		-- Get all the children Items in the Batch
			SELECT ID, Michaels_SKU
			FROM SPD_Item_Maint_items
			WHERE Batch_ID = @BatchID
				and Michaels_SKU <> @PackSKU

		OPEN ItemCursor;
		FETCH NEXT FROM ItemCursor INTO @ItemID, @SKU;
		SET @PackCount = 0
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
			SET @QIP = NULL
			SET @QIP = Coalesce( (
					SELECT top 1 Field_Value		-- Check Change Record
					FROM SPD_Item_Master_Changes 
					WHERE Item_Maint_Items_ID = @ItemID
						and Field_Name = 'QtyInPack'
				)
				, (
					SELECT top 1 Pack_Quantity		-- Check Item Master Pack Table
					FROM SPD_Item_Master_PackItems
					WHERE Pack_SKU = @PackSKU
						and Child_SKU = @SKU
				)
				, 0 )								-- Else 0
				
			SET @PackCount = @PackCount + 1
			SET @Components = @Components + (CASE @Components when '' then '' else ';' END) + @SKU + ',' + convert(varchar(20),@QIP)

			FETCH NEXT FROM ItemCursor INTO @ItemID, @SKU;
		END
		CLOSE ItemCursor;
		DEALLOCATE ItemCursor;

		-- Now finish off the message
		SET @ChangeRecs = dbo.udf_MakeXMLSnippet(@Components, 'components')
				
		SELECT @VendorNo = Vendor_Number, @ModifiedID = Modified_User_ID, @ModifiedDate = convert(varchar(10),Date_Last_Modified, 120)
		FROM SPD_Item_Maint_items
		WHERE Batch_ID = @BatchID
			and Michaels_SKU = @PackSKU

		SET @temp = 'P.' + CONVERT(varchar(20), @BatchID) + '.' + CONVERT(varchar(20), @ItemID) + '.' + @ProcessTimeStamp

		INSERT @StatusTbl ( [Batch_ID],[Item_ID],[Message_ID],[Status_ID],[Date_Created], [Process_TimeStamp] )
			SELECT @BatchID, @ItemID, @temp, 1, getdate(), @ProcessTimeStamp
			
		SET @ChangeKey =  dbo.udf_MakeXMLSnippet(@temp, 'spd_batch_id') + dbo.udf_MakeXMLSnippet(@PackSKU, 'michaels_sku') + dbo.udf_MakeXMLSnippet(@VendorNo, 'supplier')
		SET @ChangeKey = @ChangeKey + dbo.udf_MakeXMLSnippet(COALESCE(dbo.udf_s_ResolveSecurityUserID_to_SecurityUserName(@ModifiedID), ''), 'update_user_domainlogin') 
			+ dbo.udf_MakeXMLSnippet(COALESCE(dbo.udf_s_Convert_SQLDateTime_To_UTCDateTimeString(@ModifiedDate), ''), 'date_last_modified')

		SET @msgItems = @msgItems + '<mikData id="' + @temp + '" '	+ 'type="SPEDYPackMod" action="Update">'
		SET @msgItems = @msgItems + @ChangeKey + @ChangeRecs + '</mikData>'

		SET @msgWrapper = '<mikMessage><mikHeader><Source>SPEDY</Source><Contents>SPEDYPackMod</Contents><ThreadID>' + convert(varchar(2), @BatchID % 9 + 1) + 
			'</ThreadID><PublishTime>' + dbo.udf_s_Convert_SQLDateTime_To_UTCDateTimeString(getdate()) + '</PublishTime></mikHeader>' + @msgItems + '</mikMessage>'
	    
		SET @MessageP = CONVERT(XML,@msgWrapper)
		print 'Pack Item Recs processed: ' + convert(varchar(20),@PackCount)
		-- select @MessageP
		-- See if any error occurred in the process
		IF @PackCount > 0 and @msgWrapper is NULL
		BEGIN
			Rollback Tran
			INSERT INTO SPD_Batch_History (
				  SPD_Batch_ID,
				  Workflow_Stage_ID,
				  [Action],
				  Date_Modified,
				  Modified_User,
				  Notes
				) VALUES (
				  @BatchID,
				  @STAGE_WAITINGFORSKU,
				  'Error Detected',
				  getdate(),
				  @UserID,
				  'An Empty Pack Message was generated but the Pack Change Count was: ' + convert(varchar,@PackCount) + '. Sending back to DBC stage'
				)
			UPDATE SPD_Batch SET 
				Workflow_Stage_ID = @STAGE_DBC,
				Date_Modified = getdate(),
				Modified_User = @UserID
			WHERE ID = @BatchID

			set @msg = 'OutBound Message Generation  - Error Occurred on Pack Creation. Empty Pack Message Created for Batch ID: ' + convert(varchar,@BatchID)
				+ ' with a Pack Change Count of: ' + convert(varchar,@PackCount)
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			RETURN
		END 
	END
END
Print 'Pack Message Process ends. Pack Change Recs processed: ' + convert(varchar(20),@PackCount)

/* ********************************************************************* */
/* ***********************   BASIC ITEM CHANGES  *********************** */
/* ********************************************************************* */

Print 'Basic Process start'

-- Get Key Fields for Basic
SET @msgItems = ''
declare ItemCursor CURSOR FOR
	SELECT ID, Michaels_SKU, Vendor_Number, Modified_User_ID, Date_Last_Modified
	FROM SPD_Item_Maint_items
	WHERE Batch_ID = @BatchID

SET @BasicCount = 0

OPEN ItemCursor;
FETCH NEXT FROM ItemCursor INTO @ItemID, @SKU, @VendorNo, @ModifiedID, @ModifiedDate

WHILE @@FETCH_STATUS = 0
BEGIN
	-- Reset Tax Flags to 0 and ChangeRecs to Empty string for each SKU in the Batch
	Select @TaxUDAFlag = 0
		, @TaxValueUDAFlag = 0
		, @PrePriceUDAFlag = 0
		, @PrePriceUDAValueFlag = 0
		, @ChangeRecs = ''

	DECLARE ChangeCursor CURSOR FOR
		SELECT C.Field_name
			, C.Field_Value
			, L.RMS_Field_Name
			, Coalesce(MDC.[Column_Generic_Type],'')
			, Coalesce(MDC.[Max_Length],0)
			, Coalesce(C.Dont_Send_To_RMS,0)
		FROM spd_Item_Maint_items I
			join SPD_Item_Master_Changes C	on I.id = C.item_maint_items_id
			join SPD_Metadata_Column MDC	on MDC.metadata_table_ID = 11 
												and MDC.Send_To_RMS = 1
												and MDC.Column_Name = C.Field_Name 	
			join SPD_RMS_Field_Lookup L		on C.Field_Name = L.Field_Name 
		WHERE c.item_maint_items_id = @ItemID
			and L.Maint_Type = 'B'
			
	OPEN ChangeCursor;
	
	FETCH NEXT FROM ChangeCursor INTO @FieldName, @FieldValue, @RMSField, @ColType, @ColLength, @DontSendToRMS;
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF @DontSendToRMS = 0	-- Make sure this field is to be sent to RMS
		BEGIN
		
			IF @FieldName NOT IN ( 'AddCountryOfOrigin', 'CountryOfOrigin', 'ImportBurden', 'InnerGTIN','CaseGTIN') -- Handle these changes Separately
				--and @FieldName <> 'CountryOfOrigin'		
				--and @FieldName <> 'ImportBurden'		-- Handle changes Separately too
			BEGIN	-- Process All Other Change records
				IF @FieldName = 'TaxUDA'
					SET @TaxUDAFlag = 1
				IF @FieldName = 'TaxValueUDA'
					SET @TaxValueUDAFlag = 1
				IF @FieldName = 'PrePriced'
					SET @PrePriceUDAFlag = 1
				IF @FieldNAme = 'PrePricedUDA'
					SET @PrePriceUDAValueFlag = 1

				IF @FieldName = 'ItemDesc'
				BEGIN
					Set @FieldValue = replace(@FieldValue, char(13), ' ')
					Set @FieldValue = replace(@FieldValue, char(10), ' ')
					Set @FieldValue = rtrim(@FieldValue)
				END
					
				IF len(@FieldValue) = 0
					SET @FieldValue = 'NULL'
				IF @ColType = 'varchar' and @ColLength > 1
					SET @FieldValue = dbo.udf_ReplaceSpecialChars(@FieldValue)
				SET @ChangeRecs = @ChangeRecs + dbo.udf_MakeXMLSnippet(@FieldValue, @RMSField)
				SET @BasicCount = @BasicCount + 1
			END
			
			IF @FieldName IN ( 'AddCountryOfOrigin', 'CountryOfOrigin' )
			BEGIN		-- COO process
				SET @COOSnippet = dbo.udf_SPD_IM_GetCOOChanges(@ItemID, @SKU, @VendorNo)
				IF len(@COOSnippet) > 0
				BEGIN
					SET @BasicCount = @BasicCount + 1 
					SET @ChangeRecs = @ChangeRecs + dbo.udf_MakeXMLSnippet(@COOSnippet, @RMSField)
				END
			END
			
			IF @FieldName = 'ImportBurden'
			BEGIN
				PRINT ' IMPORT BURDEN RECORD PROCESSING...'
				-- Make sure the Import Burden Change was not the result of just a Cost change
				SET @ImportBurden = dbo.udf_SPD_CalcImportBurdenFromChgRecs(@ItemID)
				Print 'Change Rec IB: ' + @FieldValue + '   Calced IB: ' + isnull(convert(varchar(30),@ImportBurden),'No Difference from Item Master (ignoring Cost changes)')
				IF @ImportBurden is NOT NULL
				BEGIN
					SET @ChangeRecs = @ChangeRecs + dbo.udf_MakeXMLSnippet(convert(varchar(30),@ImportBurden), @RMSField)
					SET @BasicCount = @BasicCount + 1
				END
			END
		END
		FETCH NEXT FROM ChangeCursor INTO @FieldName, @FieldValue, @RMSField, @ColType, @ColLength, @DontSendToRMS;
		--FETCH NEXT FROM ChangeCursor INTO @FieldName, @FieldValue, @RMSField, @ColType, @ColLength;
	END		-- END Inner Cursor
	CLOSE ChangeCursor;
	DEALLOCATE ChangeCursor;

	-- Now Make sure that if either tax flag is sent that we send both tax fields
	IF @TaxUDAFlag = 0 AND @TaxValueUDAFlag = 1
	BEGIN	-- Get the TaxUDA from Item Master and add to message
		Select top 1 @UDAID = UDA_ID
		From SPD_Item_Master_UDA 
		Where Michaels_SKU = @SKU
			and UDA_ID between 1 and 9 
		SET @ChangeRecs = @ChangeRecs + dbo.udf_MakeXMLSnippet(@UDAID, 'tax_uda')
	END

	IF @TaxUDAFlag = 1 AND @TaxValueUDAFlag = 0
	BEGIN -- Get the Tax Value UDA from Item Master and add to message
		Select top 1 @UDAValue = UDA_Value
		From dbo.SPD_Item_Master_UDA
		Where Michaels_SKU = @SKU
			and UDA_ID between 1 and 9 
		SET @ChangeRecs = @ChangeRecs + dbo.udf_MakeXMLSnippet(@UDAValue, 'tax_value_uda')
	END
 	
 	-- Now Make sure that if Pre Price Value is sent, we also send the Pre Price UDA Flag
 	If @PrePriceUDAFlag = 0 AND @PrePriceUDAValueFlag = 1
 	BEGIN
		SET @ChangeRecs = @ChangeRecs + dbo.udf_MakeXMLSnippet('Y', 'pre_priced')
 	END
 	
 	--Now add PLI Multilingual changes
 	IF Exists(Select 1 FROM spd_Item_Maint_items I
						INNER JOIN SPD_Item_Master_Changes C	on I.id = C.item_maint_items_id
						WHERE c.item_maint_items_id = @ItemID
							AND c.Field_Name in ('PLIEnglish', 'PLIFrench', 'PLISpanish'))
	BEGIN
		--Construct the PLI Node if there were any PLI Changes
		DECLARE @PLIIndicators varchar(30)

		Select @PLIIndicators = 'en_US-' + COALESCE(C.Field_Value, l.Package_Language_Indicator,'N')
		FROM SPD_item_Maint_Items as I
		Left Join SPD_Item_Master_Languages_Supplier as l on l.Michaels_SKU = I.Michaels_SKU and l.Vendor_Number = I.Vendor_Number and l.Language_Type_ID = 1
		Left Join SPD_Item_Master_Changes as C on C.item_maint_items_id = I.id and c.field_name = 'PLIEnglish'
		WHERE i.id = @itemID

		--If Exempt End Date is provided, send X
		IF Exists(Select 1 FROM SPD_Item_Master_Languages_Supplier WHERE Michaels_SKU = @SKU and Vendor_Number = @VendorNo and Language_Type_ID = 2 AND COALESCE(Exempt_End_Date,'') <> '')
		BEGIN
			--Exempt End Date specified, so send X instead of Y/N
			SET @PLIIndicators = @PLIIndicators + ',fr_CA-X'
		END
		ELSE
		BEGIN
			--No Exempt End Date specified.  Send normal Y/N value.
			Select @PLIIndicators = @PLIIndicators + ',fr_CA-' + COALESCE(C.Field_Value, l.Package_Language_Indicator,'N')
			FROM SPD_item_Maint_Items as I
			Left Join SPD_Item_Master_Languages_Supplier as l on l.Michaels_SKU = I.Michaels_SKU and l.Vendor_Number = I.Vendor_Number and l.Language_Type_ID = 2
			Left Join SPD_Item_Master_Changes as C on C.item_maint_items_id = I.id and c.field_name = 'PLIFrench'
			WHERE i.id = @itemID
		END

		Select @PLIIndicators = @PLIIndicators + ',es_PR-' + COALESCE(C.Field_Value, l.Package_Language_Indicator,'N')
		FROM SPD_item_Maint_Items as I
		Left Join SPD_Item_Master_Languages_Supplier as l on l.Michaels_SKU = I.Michaels_SKU and l.Vendor_Number = I.Vendor_Number and l.Language_Type_ID = 3
		Left Join SPD_Item_Master_Changes as C on C.item_maint_items_id = I.id and c.field_name = 'PLISpanish'
		WHERE i.id = @itemID

		SET @ChangeRecs = @ChangeRecs + dbo.udf_MakeXMLSnippet(@PLIIndicators, 'pli')
		SET @BasicCount = @BasicCount + 1
	END
	
	if 1=2 -- BEGIN REMOVE GTIN
	BEGIN
		--Now add InnerGTIN 
 		IF Exists(Select 1 FROM spd_Item_Maint_items I
							INNER JOIN SPD_Item_Master_Changes C	on I.id = C.item_maint_items_id
							WHERE c.item_maint_items_id = @ItemID
								AND c.Field_Name in ('InnerGTIN'))
		BEGIN
			--Construct the PLI Node if there were any PLI Changes
			DECLARE @InnerGTIN varchar(14)

			Select @InnerGTIN = C.Field_Value
			FROM SPD_item_Maint_Items as I
			Left Join SPD_Item_Master_Changes as C on C.item_maint_items_id = I.id and c.field_name = 'InnerGTIN'
			WHERE i.id = @itemID

			SET @ChangeRecs = @ChangeRecs + dbo.udf_MakeXMLSnippet(@InnerGTIN, 'InnerGTIN')
			SET @BasicCount = @BasicCount + 1
		END
		
		--Now add CaseGTIN 
 		IF Exists(Select 1 FROM spd_Item_Maint_items I
							INNER JOIN SPD_Item_Master_Changes C	on I.id = C.item_maint_items_id
							WHERE c.item_maint_items_id = @ItemID
								AND c.Field_Name in ('CaseGTIN'))
		BEGIN
			--Construct the PLI Node if there were any PLI Changes
			DECLARE @CaseGTIN varchar(14)

			Select @CaseGTIN =  C.Field_Value
			FROM SPD_item_Maint_Items as I
			Left Join SPD_Item_Master_Changes as C on C.item_maint_items_id = I.id and c.field_name = 'CaseGTIN'
			WHERE i.id = @itemID

			SET @ChangeRecs = @ChangeRecs + dbo.udf_MakeXMLSnippet(@CaseGTIN, 'CaseGTIN')
			SET @BasicCount = @BasicCount + 1
		END
 	END -- END REMOVE GTIN

	-- Now create a message if any Changes Found
	IF len(@ChangeRecs) > 0  
	BEGIN
		-- add Key info to msg
		SET @temp = 'B.' + CONVERT(varchar(20), @BatchID) + '.' + CONVERT(varchar(20), @ItemID) + '.' + @ProcessTimeStamp

		INSERT @StatusTbl ([Batch_ID], [Item_ID], [Message_ID], [Status_ID], [Date_Created], [Process_TimeStamp] )
			SELECT @BatchID, @ItemID, @temp, 1, getdate(), @ProcessTimeStamp
			
		SET @ChangeKey =  dbo.udf_MakeXMLSnippet(@temp, 'spd_batch_id') 
			+ dbo.udf_MakeXMLSnippet(@SKU, 'michaels_sku') 
			+ dbo.udf_MakeXMLSnippet(@VendorNo, 'supplier')
			+ dbo.udf_MakeXMLSnippet(COALESCE(dbo.udf_s_ResolveSecurityUserID_to_SecurityUserName(@ModifiedID), ''), 'update_user_domainlogin') 
			+ dbo.udf_MakeXMLSnippet(COALESCE(dbo.udf_s_Convert_SQLDateTime_To_UTCDateTimeString(@ModifiedDate), ''), 'date_last_modified')

		-- Create Message
		SET @msgItems = @msgItems + '<mikData id="' + @temp + '" '	
			+ 'type="SPEDYItemMaint" action="Update">'
			+ @ChangeKey + @ChangeRecs + '</mikData>'
	END
	FETCH NEXT FROM ItemCursor INTO @ItemID, @SKU, @VendorNo, @ModifiedID, @ModifiedDate
END
CLOSE ItemCursor;
DEALLOCATE ItemCursor;

-- Now see if Message and Header needs to be wrapped around this message
IF len(@msgItems) > 0 
BEGIN
	SET @msgWrapper = '<mikMessage><mikHeader><Source>SPEDY</Source><Contents>SPEDYItemMaint</Contents><ThreadID>' + convert(varchar(2), @BatchID % 9 + 1) + 
		'</ThreadID><PublishTime>' + dbo.udf_s_Convert_SQLDateTime_To_UTCDateTimeString(getdate()) + '</PublishTime></mikHeader>' + @msgItems + '</mikMessage>'
    SET @MessageB = CONVERT(XML,@msgWrapper)
END

-- Check for error
IF @BasicCount > 0 and @msgWrapper is NULL
BEGIN
	Rollback Tran
	INSERT INTO SPD_Batch_History (
		  SPD_Batch_ID,
		  Workflow_Stage_ID,
		  [Action],
		  Date_Modified,
		  Modified_User,
		  Notes
		) VALUES (
		  @BatchID,
		  @STAGE_WAITINGFORSKU,
		  'Error Detected',
		  getdate(),
		  @UserID,
		  'An Empty Basic Message was generated but the Basic Change Count was: ' + convert(varchar,@BasicCount) + '. Sending back to DBC stage'
		)
	UPDATE SPD_Batch SET 
		Workflow_Stage_ID = @STAGE_DBC,
		Date_Modified = getdate(),
		Modified_User = @UserID
	WHERE ID = @BatchID

	set @msg = 'OutBound Message Generation  - Error Occurred on Basic Creation. Empty Basic Message Created for Batch ID: ' + convert(varchar,@BatchID)
		+ ' with a Basic Change Count of: ' + convert(varchar,@BasicCount)
	EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
	EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
	RETURN
END 
Print 'Basic Message Process ends. Basic Change Recs processed: ' + convert(varchar(20),@BasicCount)


/* ******************************************************************** */
/* ***********************   COST ITEM CHANGES  *********************** */
/* ******************************************************************** */
-- NOTE Two sets of routines to manage here
SET @msgItems = ''

Declare @dteEffectiveDate datetime
SELECT @dteEffectiveDate = coalesce(Effective_Date, getdate() )
FROM SPD_Batch WHERE ID = @BatchID

-- Make sure this effective date is at least Getdate +1.  If not then fix it
IF DateDiff(day, @dteEffectiveDate, getdate()) >= 0 
BEGIN	-- Effective Date must be a future date and its not. Set it to be GetDate() + 1 day
	UPDATE SPD_Batch SET
		Effective_Date = DateAdd(day, 1, getdate())
	WHERE ID = @BatchID and Effective_Date is not NULL	-- Only update if it was defined
END
 
SELECT @EffectiveDate = convert(varchar(10),Effective_Date,120)
FROM SPD_Batch WHERE ID = @BatchID


Print 'Cost Process start'

Declare ItemCursor CURSOR FOR
	SELECT ID, Michaels_SKU, Vendor_Number, Modified_User_ID, Date_Last_Modified
	FROM SPD_Item_Maint_items
	WHERE Batch_ID = @BatchID

OPEN ItemCursor;
FETCH NEXT FROM ItemCursor INTO @ItemID, @SKU, @VendorNo, @ModifiedID, @ModifiedDate

--	SELECT ID, Michaels_SKU, Vendor_Number
--	FROM SPD_Item_Maint_items
--	WHERE Batch_ID = @BatchID

--OPEN ItemCursor;
--FETCH NEXT FROM ItemCursor INTO @ItemID, @SKU, @VendorNo;
SET @CostCount = 0

WHILE @@FETCH_STATUS = 0
BEGIN
	DECLARE ChangeCursor CURSOR FOR
		SELECT c.Field_name
			, c.Field_Value
			, L.RMS_Field_Name 
			, Coalesce(C.Dont_Send_To_RMS,0)
		FROM spd_Item_Maint_items I
			join SPD_Item_Master_Changes c	on i.id = c.item_maint_items_id
			join SPD_RMS_Field_Lookup L		on c.Field_Name = L.Field_Name 
		WHERE c.item_maint_items_id = @ItemID
			and L.Maint_Type = 'C'
			
	OPEN ChangeCursor;
	SET @ChangeRecs = ''
	FETCH NEXT FROM ChangeCursor INTO @FieldName, @FieldValue, @RMSField, @DontSendToRMS;

	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF @DontSendToRMS = 0
		BEGIN
			-- Code commented out because we are now sending FOBShipping Point cost instead
			--IF @FieldName = 'ProductCost'
			--BEGIN	-- Get the DisplayerCost for this Item either from the Change record or Item Master and add it to the Cost to send
			--	SET @DisplayerCost = coalesce(
			--		  ( SELECT Convert(decimal,Field_Value) FROM SPD_Item_Master_Changes WHERE item_maint_items_id = @ItemID and Field_Name = 'DisplayerCost' )
			--		, ( SELECT Displayer_Cost FROM SPD_Item_Master_SKU WHERE Michaels_SKU = @SKU )
			--		, 0.00 )
			--	SET @FieldValue = Convert(varchar(30), ( Convert(decimal,@FieldValue) + @DisplayerCost ) )
			--END
			if isnumeric(@FieldValue) = 1
			begin
				set @FieldValue = replace(@FieldValue, ',', '')
			end

			SET @ChangeRecs = @ChangeRecs + dbo.udf_MakeXMLSnippet(@FieldValue, @RMSField)
			SET @CostCount = @CostCount + 1
		END
		FETCH NEXT FROM ChangeCursor INTO @FieldName, @FieldValue, @RMSField, @DontSendToRMS
	END		-- END Inner Cursor
	CLOSE ChangeCursor;
	DEALLOCATE ChangeCursor;
	
	-- Now create a message if any Changes Found
	IF len(@ChangeRecs) > 0  
	BEGIN
		-- Get who created the batch and timestamp
		Select @CreatedID = CreatedID, @CreatedDate = CreatedDate From dbo.udf_SPD_ItemMaint_LookupCostBatchCreated(@ItemID)

		SET @temp = 'C.' + CONVERT(varchar(20), @BatchID) + '.' + CONVERT(varchar(20), @ItemID) + '.' + @ProcessTimeStamp

		-- Log this mikData node
		INSERT @StatusTbl ( [Batch_ID],[Item_ID],[Message_ID],[Status_ID],[Date_Created], [Process_TimeStamp] )
			SELECT @BatchID, @ItemID, @temp, 1, getdate(), @ProcessTimeStamp
			
		-- add Key info to msg
		SET @ChangeKey =  dbo.udf_MakeXMLSnippet(@temp, 'spd_batch_id') 
			+ dbo.udf_MakeXMLSnippet(@SKU, 'michaels_sku') 
			+ dbo.udf_MakeXMLSnippet(@VendorNo, 'supplier')
			+ dbo.udf_MakeXMLSnippet(COALESCE(dbo.udf_s_ResolveSecurityUserID_to_SecurityUserName(@ModifiedID), ''), 'update_user_domainlogin') 
			+ dbo.udf_MakeXMLSnippet(COALESCE(dbo.udf_s_Convert_SQLDateTime_To_UTCDateTimeString(@ModifiedDate), ''), 'date_last_modified')
			+ dbo.udf_MakeXMLSnippet(COALESCE(dbo.udf_s_ResolveSecurityUserID_to_SecurityUserName(@CreatedID), ''), 'create_user_domainlogin') 
			+ dbo.udf_MakeXMLSnippet(COALESCE(dbo.udf_s_Convert_SQLDateTime_To_UTCDateTimeString(@CreatedDate), ''), 'date_created')

		-- Get the Effective Date
		SET @ChangeRecs = @ChangeRecs + dbo.udf_MakeXMLSnippet(@EffectiveDate, 'effective_date')
			+ dbo.udf_MakeXMLSnippet('A', 'Status')

		-- Create msg
		SET @msgItems = @msgItems + '<mikData id="' + @temp + '" '	+ 'type="SPEDYCostChange" action="Update">' + @ChangeKey + @ChangeRecs + '</mikData>'
	END
	FETCH NEXT FROM ItemCursor INTO @ItemID, @SKU, @VendorNo, @ModifiedID, @ModifiedDate
END
CLOSE ItemCursor;
DEALLOCATE ItemCursor;

-- Now do the same thing for Future Cost Cancels

declare @tmpDate datetime

declare ItemCursor CURSOR FOR
	SELECT ID, Michaels_SKU, Vendor_Number, Modified_User_ID, Date_Last_Modified
	FROM SPD_Item_Maint_items
	WHERE Batch_ID = @BatchID

OPEN ItemCursor;
FETCH NEXT FROM ItemCursor INTO @ItemID, @SKU, @VendorNo, @ModifiedID, @ModifiedDate

SET @CostCancel = 0

WHILE @@FETCH_STATUS = 0
BEGIN
	-- Cursor used as an Item can have more than one future cost based on effectiveDate
	DECLARE ChangeCursor CURSOR FOR
		SELECT C.Field_name
			, C.Field_Value
			, L.RMS_Field_Name
			, C.Effective_Date 
		FROM spd_Item_Maint_items I
			join SPD_Item_Master_Changes C	on i.id = C.item_maint_items_id
			join SPD_RMS_Field_Lookup L		on C.Field_Name = L.Field_Name 
		WHERE c.item_maint_items_id = @ItemID
			and L.Maint_Type = 'F'
			
	OPEN ChangeCursor;
	FETCH NEXT FROM ChangeCursor INTO @FieldName, @FieldValue, @RMSField, @EffectiveDate

	Declare @FCCounter int
	Set @FCCounter = 1

	Select @CreatedID = CreatedID, @CreatedDate = CreatedDate From dbo.udf_SPD_ItemMaint_LookupCostBatchCreated(@ItemID)
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF @FieldName = 'FutureCostStatus'	-- This only exists if this is a cancel
		BEGIN
			SET @ChangeRecs = ''
			SET @ChangeRecs = @ChangeRecs + dbo.udf_MakeXMLSnippet('C', @RMSField)
			SET @tmpDate = convert(datetime,@EffectiveDate)
			SET @ChangeRecs = @ChangeRecs + Replace(dbo.udf_MakeXMLSnippet(IsNull(dbo.udf_SPD_ItemMaint_LookupFutureCost(@ItemID,@tmpDate),'0'),'unit_cost'), ',', '')
			SET @CostCancel = @CostCancel + 1

			-- Create Message for this Cost Cancel
			
			SET @temp = 'F.' + CONVERT(varchar(20), @BatchID) 
				+ '.' + CONVERT(varchar(20), @ItemID) 
				+ '.' + @ProcessTimeStamp	--+ REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(CONVERT(varchar(100), dbo.udf_s_Convert_SQLDateTime_To_UTCDateTimeString(getdate()) ), '-05:00', ''), '-', ''), ' ', ''), ':', ''), '.', '')
				+ '.' + convert(varchar(10),@FCCounter)
			-- Get the Effective Date
			SET @EffectiveDate = convert(varchar(10),@tmpDate,120)

			-- Create Change Key for this mikData node
			SET @ChangeKey =  dbo.udf_MakeXMLSnippet(@temp, 'spd_batch_id') 
				+ dbo.udf_MakeXMLSnippet(@SKU, 'michaels_sku') 
				+ dbo.udf_MakeXMLSnippet(@VendorNo, 'supplier')
				+ dbo.udf_MakeXMLSnippet(COALESCE(dbo.udf_s_ResolveSecurityUserID_to_SecurityUserName(@ModifiedID), ''), 'update_user_domainlogin') 
				+ dbo.udf_MakeXMLSnippet(COALESCE(dbo.udf_s_Convert_SQLDateTime_To_UTCDateTimeString(@ModifiedDate), ''), 'date_last_modified')
				+ dbo.udf_MakeXMLSnippet(COALESCE(dbo.udf_s_ResolveSecurityUserID_to_SecurityUserName(@CreatedID), ''), 'create_user_domainlogin') 
				+ dbo.udf_MakeXMLSnippet(COALESCE(dbo.udf_s_Convert_SQLDateTime_To_UTCDateTimeString(@CreatedDate), ''), 'date_created')
				+ dbo.udf_MakeXMLSnippet(@EffectiveDate, 'effective_date')

			-- Log this mikData node with the effective date for this cost cancel so we can use it to process later
			-- NAK 7/7/2011:  Add FCCounter to Timestamp, so code can properly identify Confirmation message
			INSERT @StatusTbl ( [Batch_ID],[Item_ID],[Message_ID],[Status_ID],[Date_Created], [Effective_Date], [Process_TimeStamp] )
				SELECT @BatchID, @ItemID, @temp, 1, getdate(), @EffectiveDate, @ProcessTimeStamp
				
			--SET @ChangeRecs = @ChangeRecs + dbo.udf_MakeXMLSnippet(@EffectiveDate, 'effective_date')
			-- Wrap the Change and keys in a mikData node
			SET @msgItems = @msgItems + '<mikData id="' + @temp + '" '	+ 'type="SPEDYCostChange" action="Update">' + @ChangeKey + @ChangeRecs + '</mikData>'

			Set @FCCounter = @FCCounter + 1 
		END
		FETCH NEXT FROM ChangeCursor INTO @FieldName, @FieldValue, @RMSField, @EffectiveDate
	END		-- END Inner Cursor
	CLOSE ChangeCursor;
	DEALLOCATE ChangeCursor;
	
	FETCH NEXT FROM ItemCursor INTO @ItemID, @SKU, @VendorNo, @ModifiedID, @ModifiedDate
END
CLOSE ItemCursor;
DEALLOCATE ItemCursor;

-- Now see if Message and Header needs to be wrapped around this set of mikData nodes
IF len(@msgItems) > 0 
BEGIN
	SET @msgWrapper = '<mikMessage><mikHeader><Source>SPEDY</Source><Contents>SPEDYCostChange</Contents><ThreadID>' + convert(varchar(2), @BatchID % 9 + 1) 
		+ '</ThreadID><PublishTime>' + dbo.udf_s_Convert_SQLDateTime_To_UTCDateTimeString(getdate()) 
		+ '</PublishTime></mikHeader>' + @msgItems + '</mikMessage>'
    SET @MessageC = CONVERT(XML,@msgWrapper)
END

-- Check for error
IF @CostCount + @CostCancel > 0 and @msgWrapper is NULL
BEGIN
	Rollback Tran
	INSERT INTO SPD_Batch_History (
		  SPD_Batch_ID,
		  Workflow_Stage_ID,
		  [Action],
		  Date_Modified,
		  Modified_User,
		  Notes
		) VALUES (
		  @BatchID,
		  @STAGE_WAITINGFORSKU,
		  'Error Detected',
		  getdate(),
		  @UserID,
		  'An Empty Cost Message was generated but the Cost Change Count was: ' + convert(varchar,@CostCount + @CostCancel) + '. Sending back to DBC stage'
		)
	UPDATE SPD_Batch SET 
		Workflow_Stage_ID = @STAGE_DBC,
		Date_Modified = getdate(),
		Modified_User = @UserID
	WHERE ID = @BatchID

	set @msg = 'OutBound Message Generation  - Error Occurred on Cost Creation. Empty Cost Message Created for Batch ID: ' + convert(varchar,@BatchID)
		+ ' with a Cost Change Count of: ' + convert(varchar,@CostCount + @CostCancel)
	EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
	EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
	RETURN
END 
Print 'Cost Message Process ends. Cost Change Recs processed: ' 
	+ convert(varchar(20),@CostCount + @CostCancel) + '  -C: ' + convert(varchar(20),@CostCount) + '  -F: ' + convert(varchar(20),@CostCancel)

/* ******************************************************************** */
/*	 NOW PUT CREATED MESSAGES IN THE RMS QUEUE							*/
/* ******************************************************************** */

IF @MessageP is NOT NULL
BEGIN
	Print 'Inserting Pack Message...'
	INSERT INTO SPD_MQComm_Message (
	  [SPD_Batch_ID]
	  ,[Message_Type_ID]
	  ,[Message_Body]
	  ,[Message_Direction]
	) VALUES (
		@BatchID
		, 10	
		, @MessageP
		, 1 
		)
	SET @Message_ID = SCOPE_IDENTITY()

	print 'Message Inserted: ' + coalesce(convert(varchar,@Message_ID),'NULL!!!!')
	
	INSERT INTO SPD_MQComm_Message_Status (
	  [Message_ID]
	  ,[Status_ID]
	) VALUES (
		@Message_ID
		, 1 
		)
	if @@Rowcount >0 
		Print ' Status Updated...'
	else
		Print ' Stuat Update Failed'

	INSERT INTO SPD_Batch_History (
		  SPD_Batch_ID,
		  Workflow_Stage_ID,
		  [Action],
		  Date_Modified,
		  Modified_User,
		  Notes
		) VALUES (
		  @BatchID,
		  @STAGE_WAITINGFORSKU,
		  'Pack Change Message Queued to RMS',
		  getdate(),
		  @UserID,
		  ''
		)
		
	-- Force any other messages created to go into an Outbound HOLD STATUS since Pack Msg was created	
	SET @DirFlag = 2		
END

IF @MessageB is NOT NULL
BEGIN
	Print 'Inserting Basic Message...'
	INSERT INTO SPD_MQComm_Message (
	  [SPD_Batch_ID]
	  ,[Message_Type_ID]
	  ,[Message_Body]
	  ,[Message_Direction]
	) VALUES (
		@BatchID
		, 10
		, @MessageB
		, @DirFlag 
		)
	SET @Message_ID = SCOPE_IDENTITY()
	print 'Message Inserted: ' + coalesce(convert(varchar,@Message_ID),'NULL!!!!')

	INSERT INTO SPD_MQComm_Message_Status (
	  [Message_ID]
	  ,[Status_ID]
	) VALUES (
		@Message_ID
		, 1 
		)
	if @@Rowcount >0 
		Print ' Status Updated...'
	else
		Print ' Stuat Update Failed'
		
	INSERT INTO SPD_Batch_History (
		  SPD_Batch_ID,
		  Workflow_Stage_ID,
		  [Action],
		  Date_Modified,
		  Modified_User,
		  Notes
		) VALUES (
		  @BatchID,
		  @STAGE_WAITINGFORSKU,
		  'Basic Change Message Queued to RMS',
		  getdate(),
		  @UserID,
		  ''
		)
END

IF @MessageC is NOT NULL
BEGIN
	Print 'Inserting Cost Message...'
	INSERT INTO SPD_MQComm_Message (
	  [SPD_Batch_ID]
	  ,[Message_Type_ID]
	  ,[Message_Body]
	  ,[Message_Direction]
	) VALUES (
		@BatchID
		, 10		
		, @MessageC
		, @DirFlag 
		)
	SET @Message_ID = SCOPE_IDENTITY()
	print 'Message Inserted: ' + coalesce(convert(varchar,@Message_ID),'NULL!!!!')

	INSERT INTO SPD_MQComm_Message_Status (
	  [Message_ID]
	  ,[Status_ID]
	) VALUES (
		@Message_ID
		, 1 
		)

	if @@Rowcount >0 
		Print ' Status Updated...'
	else
		Print ' Stuat Update Failed'
		
	INSERT INTO SPD_Batch_History (
		  SPD_Batch_ID,
		  Workflow_Stage_ID,
		  [Action],
		  Date_Modified,
		  Modified_User,
		  Notes
		) VALUES (
		  @BatchID,
		  @STAGE_WAITINGFORSKU,
		  'Cost Change Message Queued to RMS',
		  getdate(),
		  @UserID,
		  ''
		)
END

IF (SELECT Count(*) FROM @StatusTbl) > 0
BEGIN
	Print ' Insert Tracking Table'
	-- Mark all Existing Batch Items as 4 regardless of their current status as all messages are being resent
	UPDATE SPD_Item_Maint_MQMessageTracking
		Set Status_ID = 4
		, Date_Updated = getdate()
	WHERE Batch_ID = @BatchID 	-- Sent, Pos Ack, Neg Ack
	
	--Select * from @StatusTbl
	-- Insert into the Status table with current Status
	INSERT SPD_Item_Maint_MQMessageTracking ( [Batch_ID],[Item_ID],[Message_ID],[Status_ID],[Date_Created], [Effective_Date], [Process_TimeStamp] )
		SELECT * from @StatusTbl

	if @@Rowcount > 0 
		Print ' Status Tracking Updated...'
	else
		Print ' Stuat Tracking Update Failed'
END
ELSE
	Print ' No Status Tracking Records to save'

declare @total int
set @total = isnull(@CostCount,0) + isnull(@CostCancel,0) + isnull(@BasicCount,0) + isnull(@PackCount,0)

IF @total > 0
BEGIN	-- Update Batch History 
		
	INSERT INTO SPD_Batch_History (
	  SPD_Batch_ID,
	  Workflow_Stage_ID,
	  [Action],
	  Date_Modified,
	  Modified_User,
	  Notes
	) VALUES (
	  @BatchID,
	  @STAGE_WAITINGFORSKU,
	  'RMS Message(s) Submitted',
	  getdate(),
	  @UserID,
	  'Total Changes submitted: ' + convert(varchar(max), @total )
	)
	
	UPDATE SPD_Batch
		SET date_modified = getdate(), modified_user = @UserID
	WHERE ID = @BatchID
END
ELSE	-- No RMS Changes created. Process The batch to completion
BEGIN
	INSERT INTO SPD_Batch_History (
	  SPD_Batch_ID,
	  Workflow_Stage_ID,
	  [Action],
	  Date_Modified,
	  Modified_User,
	  Notes
	) VALUES (
	  @BatchID,
	  @STAGE_WAITINGFORSKU,
	  'No RMS Changes Found',
	  getdate(),
	  @UserID,
	  'No RMS Changes Detected. Performing Batch Completion Process'
	)

	set @temp = 'Calling usp_SPD_ItemMaint_CompleteOrErrorBatch ' + convert(varchar,@BatchID) + ' cmd = C' 
		+ ' For Batch Process Time Stamp: ' + @ProcessTimeStamp
	EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@temp

	Exec @retCode = usp_SPD_ItemMaint_CompleteOrErrorBatch @Batch_ID = @BatchID, @cmd = 'C', @LTS=@LTS
	IF @retCode != 0	
	BEGIN	-- Error Occurred. Make sure Batch is at the DBC stage and Log error
		INSERT INTO SPD_Batch_History (
		  SPD_Batch_ID,
		  Workflow_Stage_ID,
		  [Action],
		  Date_Modified,
		  Modified_User,
		  Notes
		) VALUES (
		  @BatchID,
		  @STAGE_WAITINGFORSKU,
		  'Error On Final Batch Process',
		  getdate(),
		  @UserID,
		  'An Error Occurred on Final Batch Process Sending Back to DBC. Contact Support.'
		)
		
		UPDATE SPD_Batch SET 
		  Workflow_Stage_ID = @STAGE_DBC,
		  Date_Modified = getdate(),
		  Modified_User = @UserID
		WHERE ID = @BatchID
	END

END

Commit Tran
				
END -- PROC


GO


/*
==================================================================
Proc:	[usp_SPD_ItemMaster_SearchRecords]
Author:	J. Littlefield
Date:	May 2010
Desc:	Used by Item Maintenance Application. Search for SKU Records and DP Pack Item records
	
Test Code

[usp_SPD_ItemMaster_SearchRecords] @userID=1473, @vendorID=0, @SKU = '10143822'
[usp_SPD_ItemMaster_SearchRecords] @userID=1473, @vendorID=0, @VendorNumber=128
[usp_SPD_ItemMaster_SearchRecords] @userID=1473, @vendorID=0, @DeptNum = 18, @SortCol = 'Item_Desc', @SortDir='D', @RowIndex=30, @MaxRows=20 
[usp_SPD_ItemMaster_SearchRecords] @userID=1473, @vendorID=0, @DeptNum = 18, @ItemDesc = 'Refill'
[usp_SPD_ItemMaster_SearchRecords] @userID=1473, @vendorID=0, @DeptNum = 18, @VPN = '4'
[usp_SPD_ItemMaster_SearchRecords] @userID=1473, @vendorID=0, @DeptNum = 18, @ClassNo = 81, @SubClassNo=1337

Change Log
FJL 7/28/10 - per KH / MV : comment out special search filters on D / DP
FJL 8/23/10 - Add logic to ensure that Item Type returns first 1 or two chars of the Item Type
FJL 8/25/10 - Add logic to check Batch info from New Item and Item Maint.  Moved to filter table for performance sake
FJL 9/09/10 - Commented out Pack Searches as the Where clause is the same on all 3
FJL 9/21/10 - Added logic to call clones of this proc for specific search criteria hopefully using an optimized query plan
JC  2/24/11 - Added support for QuoteReferenceNumber
==================================================================
*/
ALTER Procedure [dbo].[usp_SPD_ItemMaster_SearchRecords]
	@UserID bigint			-- required
	, @VendorID bigint		-- required
	, @DeptNum  int = null
	, @VendorNumber int = null
	, @ClassNo int = null
	, @SubClassNo int = null
	, @VPN varchar(50) = null
	, @UPC varchar(20) = null
	, @SKU varchar(20) = null
	, @ItemDesc varchar(250) = null
	, @StockCat varchar(10) = null
	, @ItemTypeAttr varchar(10) = null
	, @ItemStatus varchar(1) = null
	, @PackSearch varchar(5) = null
	, @PackSKU varchar(20) = null
	, @SortCol varchar(255) = null
	, @SortDir char(1) = 'A'
	, @RowIndex int = 0
	, @MaxRows int = null
	, @QuoteRefNum varchar(50) = null	
AS

set NOCOUNT on
-- Use separate tweaked queries based on Search Criteria for performace consistency
Declare @rows int

IF @DeptNum is not NULL and @VendorNumber is not NULL
BEGIN
	Exec @rows = [usp_SPD_ItemMaster_SearchRecords_Dept] 
		@UserID = @UserID
		, @VendorID = @VendorID
		, @DeptNum = @DeptNum
		, @VendorNumber = @VendorNumber
		, @ClassNo = @ClassNo
		, @SubClassNo = @SubClassNo
		, @VPN = @VPN
		, @UPC = @UPC
		, @SKU = @SKU
		, @ItemDesc = @ItemDesc
		, @StockCat = @StockCat
		, @ItemTypeAttr = @ItemTypeAttr
		, @ItemStatus = @ItemStatus
		, @PackSearch = @PackSearch
		, @PackSKU = @PackSKU
		, @SortCol = @SortCol
		, @SortDir = @SortDir
		, @RowIndex = @RowIndex
		, @MaxRows = @MaxRows
		, @QuoteRefNum = @QuoteRefNum
	Return @rows
END

IF @DeptNum is not NULL
BEGIN
	Exec @rows = [usp_SPD_ItemMaster_SearchRecords_Dept] 
		@UserID = @UserID
		, @VendorID = @VendorID
		, @DeptNum = @DeptNum
		, @VendorNumber = @VendorNumber
		, @ClassNo = @ClassNo
		, @SubClassNo = @SubClassNo
		, @VPN = @VPN
		, @UPC = @UPC
		, @SKU = @SKU
		, @ItemDesc = @ItemDesc
		, @StockCat = @StockCat
		, @ItemTypeAttr = @ItemTypeAttr
		, @ItemStatus = @ItemStatus
		, @PackSearch = @PackSearch
		, @PackSKU = @PackSKU
		, @SortCol = @SortCol
		, @SortDir = @SortDir
		, @RowIndex = @RowIndex
		, @MaxRows = @MaxRows
		, @QuoteRefNum = @QuoteRefNum
	Return @rows
END

IF @VendorNumber is not NULL
BEGIN
	Exec @rows = [usp_SPD_ItemMaster_SearchRecords_Vendor] 
		@UserID = @UserID
		, @VendorID = @VendorID
		, @DeptNum = @DeptNum
		, @VendorNumber = @VendorNumber
		, @ClassNo = @ClassNo
		, @SubClassNo = @SubClassNo
		, @VPN = @VPN
		, @UPC = @UPC
		, @SKU = @SKU
		, @ItemDesc = @ItemDesc
		, @StockCat = @StockCat
		, @ItemTypeAttr = @ItemTypeAttr
		, @ItemStatus = @ItemStatus
		, @PackSearch = @PackSearch
		, @PackSKU = @PackSKU
		, @SortCol = @SortCol
		, @SortDir = @SortDir
		, @RowIndex = @RowIndex
		, @MaxRows = @MaxRows
		, @QuoteRefNum = @QuoteRefNum
	Return @rows
END

IF @SKU is not NULL
BEGIN
	Exec @rows = [usp_SPD_ItemMaster_SearchRecords_SKU] 
		@UserID = @UserID
		, @VendorID = @VendorID
		, @DeptNum = @DeptNum
		, @VendorNumber = @VendorNumber
		, @ClassNo = @ClassNo
		, @SubClassNo = @SubClassNo
		, @VPN = @VPN
		, @UPC = @UPC
		, @SKU = @SKU
		, @ItemDesc = @ItemDesc
		, @StockCat = @StockCat
		, @ItemTypeAttr = @ItemTypeAttr
		, @ItemStatus = @ItemStatus
		, @PackSearch = @PackSearch
		, @PackSKU = @PackSKU
		, @SortCol = @SortCol
		, @SortDir = @SortDir
		, @RowIndex = @RowIndex
		, @MaxRows = @MaxRows
		, @QuoteRefNum = @QuoteRefNum
	Return @rows
END

IF @ItemDesc is not NULL
BEGIN
	Exec @rows = [usp_SPD_ItemMaster_SearchRecords_ItemDesc] 
		@UserID = @UserID
		, @VendorID = @VendorID
		, @DeptNum = @DeptNum
		, @VendorNumber = @VendorNumber
		, @ClassNo = @ClassNo
		, @SubClassNo = @SubClassNo
		, @VPN = @VPN
		, @UPC = @UPC
		, @SKU = @SKU
		, @ItemDesc = @ItemDesc
		, @StockCat = @StockCat
		, @ItemTypeAttr = @ItemTypeAttr
		, @ItemStatus = @ItemStatus
		, @PackSearch = @PackSearch
		, @PackSKU = @PackSKU
		, @SortCol = @SortCol
		, @SortDir = @SortDir
		, @RowIndex = @RowIndex
		, @MaxRows = @MaxRows
		, @QuoteRefNum = @QuoteRefNum
	Return @rows
END

-- for D / DP queries
--declare @HybridType varchar(5)
--	, @HybridSourceDC varchar(10)
--	, @DeptNo1 int
--	, @StockCat1 varchar(5)  
--	, @ClassNo1 int
--	, @SubClassNo1 int
--	, @ItemTypeAttr1 varchar(5)
--	, @PackVendorNumber bigint

-- for paging
DECLARE @StartRow int
	, @EndRow int
	, @totalRows int

SET @StartRow = @RowIndex + 1;		-- Grid call is zero based but Row_Number() is 1 based

IF @MaxRows is NULL
	SET @EndRow = 2147483647	-- Max int size
ELSE
	SET @EndRow = @RowIndex + @MaxRows;
	
-- Get the subset of data Sorted with a RowNumber to Page it	
-- Certain fields just have a place holder to minimize subqueries. NOTE: Can be done on non-sortable fields only
SELECT
	SKU.Michaels_SKU											as SKU
	, SKU.ID													as SKU_ID
	, coalesce(SKU.[Department_Num], 0)							as Dept_No
	, coalesce(D.DEPT_Name,'UNKNOWN DEPARTMENT')				as Dept_Name
	, coalesce(SKU.[Class_Num], 0)								as Class_Num
	, coalesce(SKU.[Sub_Class_Num], 0)							as Sub_Class_Num
	, coalesce(SKU.[Item_Desc],'')								as Item_Desc
	, V.Vendor_Number											as Vendor_Number
	, coalesce(VL.Vendor_Name, 'Unknown Vendor')				as Vendor_Name
	, CASE V.Primary_Indicator WHEN 1 then '*' ELSE '' END		as VPI
	, coalesce(V.Vendor_Style_Num,'')							as Vendor_Style_Num
	, coalesce(UPC.UPC,'Not Defined')							as UPC
	, CASE coalesce(UPC.Primary_Indicator,0) 
		WHEN 1 THEN '*' ELSE '' END								as UPCPI
	, convert(bigint,-1)										as Batch_ID					-- filled in later
	, coalesce(SKU.Stock_Category,'')							as Stock_Category
	, coalesce(SKU.Item_Type_Attribute,'')						as Item_Type_Attribute
	, SKU.Item_Status											as Item_Status
	, dbo.udf_SPD_PackItemLeft2([Item_Type])					as Item_Type
	, 0															as Is_Pack_Parent			-- filled in later
	, 0															as Independent_Editable		-- filled in later
	, convert(varchar(10),'')									as Pack_SKU					-- filled in later
	, case VL.Vendor_Type																	-- since the join is required for this table, get the vendor type now
		WHEN 110 then 1 
		WHEN 300 then 2 
		ELSE 0 END												as Vendor_Type
	, coalesce(SKU.QuoteReferenceNumber, '')					as QuoteReferenceNumber
	,sku.Hybrid_Type 
	,sku.Hybrid_Source_DC
	,CASE WHEN sku.Hybrid_Conversion_Date > '1900-01-01 00:00:00.000' THEN sku.Hybrid_Conversion_Date Else null END as Hybrid_Conversion_Date
	, Row_Number() Over ( ORDER BY
			CASE WHEN @SortCol = 'DeptNo' and @SortDir = 'D' then SKU.[Department_Num] END DESC,
			CASE WHEN @SortCol = 'DeptNo' and @SortDir != 'D' then SKU.[Department_Num] END,
			CASE WHEN @SortCol = 'DeptName' and @SortDir = 'D' then D.DEPT_Name END DESC,
			CASE WHEN @SortCol = 'DeptName' and @SortDir != 'D' then D.DEPT_Name END,
			CASE WHEN @SortCol = 'SKU' and @SortDir = 'D' then SKU.Michaels_SKU END DESC,
			CASE WHEN @SortCol = 'SKU' and @SortDir != 'D' then SKU.Michaels_SKU END,
			CASE WHEN @SortCol = 'ClassNum' and @SortDir = 'D' then SKU.[Class_Num] END DESC,
			CASE WHEN @SortCol = 'ClassNum' and @SortDir != 'D' then SKU.[Class_Num] END,
			CASE WHEN @SortCol = 'SubClassNum' and @SortDir = 'D' then SKU.[Sub_Class_Num] END DESC,
			CASE WHEN @SortCol = 'SubClassNum' and @SortDir != 'D' then SKU.[Sub_Class_Num] END,
			CASE WHEN @SortCol = 'ItemDesc' and @SortDir = 'D' then SKU.[Item_Desc] END DESC,
			CASE WHEN @SortCol = 'ItemDesc' and @SortDir != 'D' then SKU.[Item_Desc] END,
			CASE WHEN @SortCol = 'VendorNumber' and @SortDir = 'D' then V.Vendor_Number END DESC,
			CASE WHEN @SortCol = 'VendorNumber' and @SortDir != 'D' then V.Vendor_Number END,
			CASE WHEN @SortCol = 'VendorName' and @SortDir = 'D' then VL.Vendor_Name END DESC,
			CASE WHEN @SortCol = 'VendorName' and @SortDir != 'D' then VL.Vendor_Name END,
			CASE WHEN @SortCol = 'VendorStyleNum' and @SortDir = 'D' then V.Vendor_Style_Num END DESC,
			CASE WHEN @SortCol = 'VendorStyleNum' and @SortDir != 'D' then V.Vendor_Style_Num END,
			CASE WHEN @SortCol = 'StockCategory' and @SortDir = 'D' then SKU.Stock_Category END DESC,
			CASE WHEN @SortCol = 'StockCategory' and @SortDir != 'D' then SKU.Stock_Category END,
			CASE WHEN @SortCol = 'ItemTypeAttribute' and @SortDir = 'D' then SKU.Item_Type_Attribute END DESC,
			CASE WHEN @SortCol = 'ItemTypeAttribute' and @SortDir != 'D' then SKU.Item_Type_Attribute END,
			CASE WHEN @SortCol = 'ItemStatus' and @SortDir = 'D' then SKU.Item_Status END DESC,
			CASE WHEN @SortCol = 'ItemStatus' and @SortDir != 'D' then SKU.Item_Status END,
			CASE WHEN @SortCol = 'ItemType' and @SortDir = 'D' then [Item_Type] END DESC,
			CASE WHEN @SortCol = 'ItemType' and @SortDir != 'D' then [Item_Type] END,
			CASE WHEN @SortCol = 'UPC' and @SortDir = 'D' then UPC.UPC END DESC,
			CASE WHEN @SortCol = 'UPC' and @SortDir != 'D' then UPC.UPC END,
			CASE WHEN @SortCol = 'HybridType' and @SortDir = 'D' then SKU.Hybrid_Type END DESC,
			CASE WHEN @SortCol = 'HybridType' and @SortDir != 'D' then SKU.Hybrid_Type END,
			CASE WHEN @SortCol = 'HybridSourceDC' and @SortDir = 'D' then SKU.Hybrid_Source_DC END DESC,
			CASE WHEN @SortCol = 'HybridSourceDC' and @SortDir != 'D' then SKU.Hybrid_Source_DC END,
			CASE WHEN @SortCol = 'ConversionDate' and @SortDir = 'D' then SKU.Hybrid_Conversion_Date END DESC,
			CASE WHEN @SortCol = 'ConversionDate' and @SortDir != 'D' then SKU.Hybrid_Conversion_Date END
			-- Add CASE Pairs as necessary to handle additional sort columns. All have comma's at the end except the last one
		)	as RowNumber
INTO #Results
FROM SPD_Item_Master_SKU					SKU
	join SPD_Item_Master_Vendor				V	on SKU.ID = V.SKU_ID
	left join SPD_Item_Master_Vendor_UPCs	UPC	on V.Michaels_SKU = UPC.Michaels_SKU 
													and V.Vendor_Number = UPC.Vendor_Number
	left join dbo.SPD_Vendor				VL	on V.Vendor_Number = VL.Vendor_Number
	left join SPD_FineLine_Dept				D	on SKU.Department_Num = D.Dept
													and D.[enabled] = 1
WHERE ( ( @ItemStatus is NULL OR SKU.Item_Status = @ItemStatus )
		and ( @DeptNum is NULL OR SKU.Department_Num = @DeptNum )
		and ( @ClassNo is NULL OR SKU.[Class_Num] = @ClassNo )
		and ( @SubClassNo is NULL OR SKU.Sub_Class_Num = @SubClassNo )
		and ( ( @VendorNumber is NULL and V.Primary_Indicator = 1 ) 
			OR V.Vendor_Number = @VendorNumber )
		and ( @SKU is NULL OR SKU.Michaels_SKU = @SKU )
		and ( ( @UPC is NULL and UPC.Primary_Indicator = 1 ) 
			OR ( UPC.UPC = @UPC )
			OR ( UPC.UPC is NULL ) )
		and ( @VPN is NULL OR V.Vendor_Style_Num like ('%' + @VPN + '%') )
		and ( @ItemDesc is NULL OR SKU.Item_Desc like ('%' + @ItemDesc + '%') )
		and ( @StockCat is NULL OR SKU.Stock_Category = @StockCat )
		and ( @ItemTypeAttr is NULL OR SKU.Item_Type_Attribute = @ItemTypeAttr )
		and ( @QuoteRefNum is NULL or SKU.QuoteReferenceNumber like('%'+ @QuoteRefNum +'%'))
	) 
	
SET @totalRows = @@RowCount;	-- Grid needs to know how many total rows there are
--Print 'Total Rows Selected ' + convert(varchar(20),@totalRows)

-- Get the Paged results and update the fields with subquery lookups

--Select * 
--	INTO #SRSubset
--FROM #Results
--WHERE	RowNumber Between @StartRow and @EndRow
--Order By RowNumber asc 

--Print 'Total Rows Selected ' + convert(varchar(20),@@RowCount)
	
SELECT 
	R.SKU	
	, R.SKU_ID 
	, R.Dept_No
	, R.Dept_Name
	, R.Class_Num 
	, R.Sub_Class_Num
	, R.Item_Desc 
	, R.Vendor_Number 
	, R.Vendor_Name 
	, R.VPI 
	, R.Vendor_Style_Num 
	, R.UPC 
	, R.UPCPI 
	, Batch_ID = dbo.udf_SPD_FindBatchID(R.SKU_ID, R.SKU) 
	, R.Stock_Category 
	, R.Item_Type_Attribute 
	, R.Item_Status 
	, R.Item_Type 
	, Is_Pack_Parent = case 
			WHEN dbo.udf_SPD_PackItemLeft2(R.Item_Type) in ('D','DP','SB') 
				THEN 1 
			ELSE 0 end
	, Independent_Editable = case 
			WHEN R.Item_Type = 'C' and Exists( 
				  Select SKU2.[Item_Type] 
				  From SPD_Item_Master_PackItems PKI
					join SPD_Item_Master_SKU SKU2	on PKI.Pack_SKU = SKU2.Michaels_SKU
														and PKI.Child_SKU = R.SKU
				  Where dbo.udf_SPD_PackItemLeft2(SKU2.[Item_Type]) = 'DP' 
					and SKU2.Item_Status = 'A' ) 
				 THEN 0
			ELSE 1 end
	, Pack_SKU = coalesce(case
			WHEN R.Item_Type ='C' 
				THEN (  
						Select top 1 PI2.Pack_SKU 
						From SPD_Item_Master_PackItems PI2, SPD_Item_Master_SKU SKU3
						Where PI2.Child_SKU = R.SKU
						and PI2.Pack_SKU = SKU3.Michaels_SKU
						and SKU3.Item_Status = 'A'
						order by dbo.udf_SPD_PackItemLeft2(SKU3.[Item_Type]) desc
					)				
			ELSE '' END
			, '' )
	, R.Vendor_Type 
	, R.QuoteReferenceNumber
	, R.Hybrid_Type
	, R.Hybrid_Source_DC
	, R.Hybrid_Conversion_Date
	
--FROM #SRSubset R
FROM ( 
	Select * 
	FROM #Results
	WHERE	RowNumber Between @StartRow and @EndRow ) as R
	
Print 'Total Rows Selected ' + convert(varchar(20),@@RowCount)

DROP table #Results
--DROP table #SRSubset

RETURN @totalRows

GO


/*
==================================================================
Proc:	[usp_SPD_ItemMaster_SearchRecords]
Author:	J. Littlefield
Date:	May 2010
Desc:	Used by Item Maintenance Application. Search for SKU Records and DP Pack Item records
	
Test Code

[usp_SPD_ItemMaster_SearchRecords] @userID=1473, @vendorID=0, @SKU = '10143822'
[usp_SPD_ItemMaster_SearchRecords] @userID=1473, @vendorID=0, @VendorNumber=128
[usp_SPD_ItemMaster_SearchRecords] @userID=1473, @vendorID=0, @DeptNum = 18, @SortCol = 'Item_Desc', @SortDir='D', @RowIndex=30, @MaxRows=20 
[usp_SPD_ItemMaster_SearchRecords] @userID=1473, @vendorID=0, @DeptNum = 18, @ItemDesc = 'Refill'
[usp_SPD_ItemMaster_SearchRecords] @userID=1473, @vendorID=0, @DeptNum = 18, @VPN = '4'
[usp_SPD_ItemMaster_SearchRecords] @userID=1473, @vendorID=0, @DeptNum = 18, @ClassNo = 81, @SubClassNo=1337

Change Log
FJL 7/28/10 - per KH / MV : comment out special search filters on D / DP
FJL 8/23/10 - Add logic to ensure that Item Type returns first 1 or two chars of the Item Type
FJL 8/25/10 - Add logic to check Batch info from New Item and Item Maint.  Moved to filter table for performance sake
FJL 9/09/10 - Commented out Pack Searches as the Where clause is the same on all 3
JC  2/24/11 - Added support for QuoteReferenceNumber
==================================================================
*/
ALTER Procedure [dbo].[usp_SPD_ItemMaster_SearchRecords_Dept]
	@UserID bigint			-- required
	, @VendorID bigint		-- required
	, @DeptNum  int = null
	, @VendorNumber int = null
	, @ClassNo int = null
	, @SubClassNo int = null
	, @VPN varchar(50) = null
	, @UPC varchar(20) = null
	, @SKU varchar(20) = null
	, @ItemDesc varchar(250) = null
	, @StockCat varchar(10) = null
	, @ItemTypeAttr varchar(10) = null
	, @ItemStatus varchar(1) = null
	, @PackSearch varchar(5) = null
	, @PackSKU varchar(20) = null
	, @SortCol varchar(255) = null
	, @SortDir char(1) = 'A'
	, @RowIndex int = 0
	, @MaxRows int = null	
	, @QuoteRefNum varchar(50) = null
AS

set NOCOUNT on

-- for D / DP queries
--declare @HybridType varchar(5)
--	, @HybridSourceDC varchar(10)
--	, @DeptNo1 int
--	, @StockCat1 varchar(5)  
--	, @ClassNo1 int
--	, @SubClassNo1 int
--	, @ItemTypeAttr1 varchar(5)
--	, @PackVendorNumber bigint

-- for paging
DECLARE @StartRow int
	, @EndRow int
	, @totalRows int


SET @StartRow = @RowIndex + 1;		-- Grid call is zero based but Row_Number() is 1 based

IF @MaxRows is NULL
	SET @EndRow = 2147483647	-- Max int size
ELSE
	SET @EndRow = @RowIndex + @MaxRows;

	
-- Get the subset of data Sorted with a RowNumber to Page it	
-- Certain fields just have a place holder to minimize subqueries. NOTE: Can be done on non-sortable fields only
SELECT
	SKU.Michaels_SKU											as SKU
	, SKU.ID													as SKU_ID
	, coalesce(SKU.[Department_Num], 0)							as Dept_No
	, ''														as Dept_Name				-- filled in later
	, coalesce(SKU.[Class_Num], 0)								as Class_Num
	, coalesce(SKU.[Sub_Class_Num], 0)							as Sub_Class_Num
	, coalesce(SKU.[Item_Desc],'')								as Item_Desc
	, V.Vendor_Number											as Vendor_Number
	, coalesce(VL.Vendor_Name, 'Unknown Vendor')				as Vendor_Name
	, case V.Primary_Indicator WHEN 1 then '*' ELSE '' end		as VPI
	, coalesce(V.Vendor_Style_Num,'')							as Vendor_Style_Num
	, coalesce(UPC.UPC,'Not Defined')							as UPC
	, CASE coalesce(UPC.Primary_Indicator,0) 
		WHEN 1 THEN '*' ELSE '' END								as UPCPI
	, convert(bigint,-1)										as Batch_ID					-- filled in later
	, coalesce(SKU.Stock_Category,'')							as Stock_Category
	, coalesce(SKU.Item_Type_Attribute,'')						as Item_Type_Attribute
	, SKU.Item_Status											as Item_Status
	, dbo.udf_SPD_PackItemLeft2([Item_Type])					as Item_Type
	, 0															as Is_Pack_Parent			-- filled in later
	, 0															as Independent_Editable		-- filled in later
	, convert(varchar(10),'')									as Pack_SKU					-- filled in later
	, case VL.Vendor_Type																	-- since the join is required for this table, get the vendor type now
		WHEN 110 then 1 
		WHEN 300 then 2 
		ELSE 0 END												as Vendor_Type
	, coalesce(SKU.QuoteReferenceNumber, '')					as QuoteReferenceNumber
	,sku.Hybrid_Type 
	,sku.Hybrid_Source_DC
	,CASE WHEN sku.Hybrid_Conversion_Date > '1900-01-01 00:00:00.000' THEN sku.Hybrid_Conversion_Date Else null END as Hybrid_Conversion_Date
	, Row_Number() Over ( ORDER BY
			CASE WHEN @SortCol = 'DeptNo' and @SortDir = 'D' then SKU.[Department_Num] END DESC,
			CASE WHEN @SortCol = 'DeptNo' and @SortDir != 'D' then SKU.[Department_Num] END,
			CASE WHEN @SortCol = 'DeptName' and @SortDir = 'D' then SKU.[Department_Num] END DESC,
			CASE WHEN @SortCol = 'DeptName' and @SortDir != 'D' then SKU.[Department_Num] END,
			CASE WHEN @SortCol = 'SKU' and @SortDir = 'D' then SKU.Michaels_SKU END DESC,
			CASE WHEN @SortCol = 'SKU' and @SortDir != 'D' then SKU.Michaels_SKU END,
			CASE WHEN @SortCol = 'ClassNum' and @SortDir = 'D' then SKU.[Class_Num] END DESC,
			CASE WHEN @SortCol = 'ClassNum' and @SortDir != 'D' then SKU.[Class_Num] END,
			CASE WHEN @SortCol = 'SubClassNum' and @SortDir = 'D' then SKU.[Sub_Class_Num] END DESC,
			CASE WHEN @SortCol = 'SubClassNum' and @SortDir != 'D' then SKU.[Sub_Class_Num] END,
			CASE WHEN @SortCol = 'ItemDesc' and @SortDir = 'D' then SKU.[Item_Desc] END DESC,
			CASE WHEN @SortCol = 'ItemDesc' and @SortDir != 'D' then SKU.[Item_Desc] END,
			CASE WHEN @SortCol = 'VendorNumber' and @SortDir = 'D' then V.Vendor_Number END DESC,
			CASE WHEN @SortCol = 'VendorNumber' and @SortDir != 'D' then V.Vendor_Number END,
			CASE WHEN @SortCol = 'VendorName' and @SortDir = 'D' then VL.Vendor_Name END DESC,
			CASE WHEN @SortCol = 'VendorName' and @SortDir != 'D' then VL.Vendor_Name END,
			CASE WHEN @SortCol = 'VendorStyleNum' and @SortDir = 'D' then V.Vendor_Style_Num END DESC,
			CASE WHEN @SortCol = 'VendorStyleNum' and @SortDir != 'D' then V.Vendor_Style_Num END,
			CASE WHEN @SortCol = 'StockCategory' and @SortDir = 'D' then SKU.Stock_Category END DESC,
			CASE WHEN @SortCol = 'StockCategory' and @SortDir != 'D' then SKU.Stock_Category END,
			CASE WHEN @SortCol = 'ItemTypeAttribute' and @SortDir = 'D' then SKU.Item_Type_Attribute END DESC,
			CASE WHEN @SortCol = 'ItemTypeAttribute' and @SortDir != 'D' then SKU.Item_Type_Attribute END,
			CASE WHEN @SortCol = 'ItemStatus' and @SortDir = 'D' then SKU.Item_Status END DESC,
			CASE WHEN @SortCol = 'ItemStatus' and @SortDir != 'D' then SKU.Item_Status END,
			CASE WHEN @SortCol = 'ItemType' and @SortDir = 'D' then [Item_Type] END DESC,
			CASE WHEN @SortCol = 'ItemType' and @SortDir != 'D' then [Item_Type] END,
			CASE WHEN @SortCol = 'UPC' and @SortDir = 'D' then UPC.UPC END DESC,
			CASE WHEN @SortCol = 'UPC' and @SortDir != 'D' then UPC.UPC END,
			CASE WHEN @SortCol = 'HybridType' and @SortDir = 'D' then SKU.Hybrid_Type END DESC,
			CASE WHEN @SortCol = 'HybridType' and @SortDir != 'D' then SKU.Hybrid_Type END,
			CASE WHEN @SortCol = 'HybridSourceDC' and @SortDir = 'D' then SKU.Hybrid_Source_DC END DESC,
			CASE WHEN @SortCol = 'HybridSourceDC' and @SortDir != 'D' then SKU.Hybrid_Source_DC END,
			CASE WHEN @SortCol = 'ConversionDate' and @SortDir = 'D' then SKU.Hybrid_Conversion_Date END DESC,
			CASE WHEN @SortCol = 'ConversionDate' and @SortDir != 'D' then SKU.Hybrid_Conversion_Date END
			-- Add CASE Pairs as necessary to handle additional sort columns. All have comma's at the end except the last one
		)	as RowNumber
INTO #Results
FROM SPD_Item_Master_SKU					SKU
	join SPD_Item_Master_Vendor				V	on SKU.ID = V.SKU_ID
	left join SPD_Item_Master_Vendor_UPCs	UPC	on V.Michaels_SKU = UPC.Michaels_SKU 
													and V.Vendor_Number = UPC.Vendor_Number
	left join dbo.SPD_Vendor				VL	on V.Vendor_Number = VL.Vendor_Number
WHERE ( SKU.Department_Num = @DeptNum
		and ( @ItemStatus is NULL OR SKU.Item_Status = @ItemStatus )
		and ( @ClassNo is NULL OR SKU.[Class_Num] = @ClassNo )
		and ( @SubClassNo is NULL OR SKU.Sub_Class_Num = @SubClassNo )
		and ( ( @VendorNumber is NULL and V.Primary_Indicator = 1 ) 
			OR V.Vendor_Number = @VendorNumber )
		and ( @SKU is NULL OR SKU.Michaels_SKU = @SKU )
		and ( ( @UPC is NULL and UPC.Primary_Indicator = 1 ) 
			OR ( UPC.UPC = @UPC )
			OR ( UPC.UPC is NULL ) )
		and ( @VPN is NULL OR V.Vendor_Style_Num like ('%' + @VPN + '%') )
		and ( @ItemDesc is NULL OR SKU.Item_Desc like ('%' + @ItemDesc + '%') )
		and ( @StockCat is NULL OR SKU.Stock_Category = @StockCat )
		and ( @ItemTypeAttr is NULL OR SKU.Item_Type_Attribute = @ItemTypeAttr )
		and ( @QuoteRefNum is NULL OR SKU.QuoteReferenceNumber like('%'+ @QuoteRefNum +'%'))
	) 
	
SET @totalRows = @@RowCount;	-- Grid needs to know how many total rows there are
--Print 'Total Rows Selected ' + convert(varchar(20),@totalRows)

-- Get the Paged results and update the fields with subquery lookups
SELECT 
	R.SKU	
	, R.SKU_ID 
	, R.Dept_No
	, Dept_Name = Coalesce( (Select D.DEPT_Name From SPD_FineLine_Dept D Where D.Dept = R.Dept_No and D.[enabled] = 1 )
					,'Unknown Department' )
	, R.Class_Num 
	, R.Sub_Class_Num
	, R.Item_Desc 
	, R.Vendor_Number 
	, R.Vendor_Name 
	, R.VPI 
	, R.Vendor_Style_Num 
	, R.UPC 
	, R.UPCPI 
	, Batch_ID = dbo.udf_SPD_FindBatchID(R.SKU_ID, R.SKU) 
	, R.Stock_Category 
	, R.Item_Type_Attribute 
	, R.Item_Status 
	, R.Item_Type 
	, Is_Pack_Parent = case 
			WHEN dbo.udf_SPD_PackItemLeft2(R.Item_Type) in ('D','DP','SB') 
				THEN 1 
			ELSE 0 END
	, Independent_Editable = case 
			WHEN R.Item_Type = 'C' and Exists( 
				  Select SKU2.[Item_Type] 
				  From SPD_Item_Master_PackItems PKI
					join SPD_Item_Master_SKU SKU2	on PKI.Pack_SKU = SKU2.Michaels_SKU
														and PKI.Child_SKU = R.SKU
				  Where dbo.udf_SPD_PackItemLeft2(SKU2.[Item_Type]) = 'DP' 
					and SKU2.Item_Status = 'A' ) 
				 THEN 0
			ELSE 1 END
	, Pack_SKU = coalesce(case
			WHEN R.Item_Type ='C' 
				THEN (  
						Select top 1 PI2.Pack_SKU 
						From SPD_Item_Master_PackItems PI2, SPD_Item_Master_SKU SKU3
						Where PI2.Child_SKU = R.SKU
						and PI2.Pack_SKU = SKU3.Michaels_SKU
						and SKU3.Item_Status = 'A'
						order by dbo.udf_SPD_PackItemLeft2(SKU3.[Item_Type]) desc
					)				
			ELSE '' END
			, '' )
	, R.Vendor_Type 
	, R.QuoteReferenceNumber
	, R.Hybrid_Type
	, R.Hybrid_Source_DC
	, R.Hybrid_Conversion_Date
FROM ( Select *
	   From #Results
	   WHERE RowNumber Between @StartRow and @EndRow ) as R
Order BY R.RowNumber asc

--Print 'Total Rows Selected ' + convert(varchar(20),@@RowCount)

DROP table #Results

RETURN @totalRows

GO


/*
==================================================================
Proc:	[usp_SPD_ItemMaster_SearchRecords]
Author:	J. Littlefield
Date:	May 2010
Desc:	Used by Item Maintenance Application. Search for SKU Records and DP Pack Item records
	
Test Code

[usp_SPD_ItemMaster_SearchRecords] @userID=1473, @vendorID=0, @SKU = '10143822'
[usp_SPD_ItemMaster_SearchRecords] @userID=1473, @vendorID=0, @VendorNumber=128
[usp_SPD_ItemMaster_SearchRecords] @userID=1473, @vendorID=0, @DeptNum = 18, @SortCol = 'Item_Desc', @SortDir='D', @RowIndex=30, @MaxRows=20 
[usp_SPD_ItemMaster_SearchRecords] @userID=1473, @vendorID=0, @DeptNum = 18, @ItemDesc = 'Refill'
[usp_SPD_ItemMaster_SearchRecords] @userID=1473, @vendorID=0, @DeptNum = 18, @VPN = '4'
[usp_SPD_ItemMaster_SearchRecords] @userID=1473, @vendorID=0, @DeptNum = 18, @ClassNo = 81, @SubClassNo=1337

Change Log
FJL 7/28/10 - per KH / MV : comment out special search filters on D / DP
FJL 8/23/10 - Add logic to ensure that Item Type returns first 1 or two chars of the Item Type
FJL 8/25/10 - Add logic to check Batch info from New Item and Item Maint.  Moved to filter table for performance sake
FJL 9/09/10 - Commented out Pack Searches as the Where clause is the same on all 3
JC  2/24/11 - Added support for QuoteReferenceNumber
==================================================================
*/
ALTER Procedure [dbo].[usp_SPD_ItemMaster_SearchRecords_ItemDesc]
	@UserID bigint			-- required
	, @VendorID bigint		-- required
	, @DeptNum  int = null
	, @VendorNumber int = null
	, @ClassNo int = null
	, @SubClassNo int = null
	, @VPN varchar(50) = null
	, @UPC varchar(20) = null
	, @SKU varchar(20) = null
	, @ItemDesc varchar(250) = null
	, @StockCat varchar(10) = null
	, @ItemTypeAttr varchar(10) = null
	, @ItemStatus varchar(1) = null
	, @PackSearch varchar(5) = null
	, @PackSKU varchar(20) = null
	, @SortCol varchar(255) = null
	, @SortDir char(1) = 'A'
	, @RowIndex int = 0
	, @MaxRows int = null	
	, @QuoteRefNum varchar(50) = null
AS

set NOCOUNT on

-- for D / DP queries
--declare @HybridType varchar(5)
--	, @HybridSourceDC varchar(10)
--	, @DeptNo1 int
--	, @StockCat1 varchar(5)  
--	, @ClassNo1 int
--	, @SubClassNo1 int
--	, @ItemTypeAttr1 varchar(5)
--	, @PackVendorNumber bigint

-- for paging
DECLARE @StartRow int
	, @EndRow int
	, @totalRows int


SET @StartRow = @RowIndex + 1;		-- Grid call is zero based but Row_Number() is 1 based

IF @MaxRows is NULL
	SET @EndRow = 2147483647	-- Max int size
ELSE
	SET @EndRow = @RowIndex + @MaxRows;

	
-- Get the subset of data Sorted with a RowNumber to Page it	
-- Certain fields just have a place holder to minimize subqueries. NOTE: Can be done on non-sortable fields only
SELECT
	SKU.Michaels_SKU											as SKU
	, SKU.ID													as SKU_ID
	, coalesce(SKU.[Department_Num], 0)							as Dept_No
	, coalesce(D.DEPT_Name,'UNKNOWN DEPARTMENT')				as Dept_Name
	, coalesce(SKU.[Class_Num], 0)								as Class_Num
	, coalesce(SKU.[Sub_Class_Num], 0)							as Sub_Class_Num
	, coalesce(SKU.[Item_Desc],'')								as Item_Desc
	, V.Vendor_Number											as Vendor_Number
	, coalesce(VL.Vendor_Name, 'Unknown Vendor')				as Vendor_Name
	, case V.Primary_Indicator WHEN 1 then '*' ELSE '' end		as VPI
	, coalesce(V.Vendor_Style_Num,'')							as Vendor_Style_Num
	, coalesce(UPC.UPC,'Not Defined')							as UPC
	, CASE coalesce(UPC.Primary_Indicator,0) 
		WHEN 1 THEN '*' ELSE '' END								as UPCPI
	, convert(bigint,-1)										as Batch_ID					-- filled in later
	, coalesce(SKU.Stock_Category,'')							as Stock_Category
	, coalesce(SKU.Item_Type_Attribute,'')						as Item_Type_Attribute
	, SKU.Item_Status											as Item_Status
	, dbo.udf_SPD_PackItemLeft2([Item_Type])					as Item_Type
	, 0															as Is_Pack_Parent			-- filled in later
	, 0															as Independent_Editable		-- filled in later
	, convert(varchar(10),'')									as Pack_SKU					-- filled in later
	, case VL.Vendor_Type																	-- since the join is required for this table, get the vendor type now
		WHEN 110 then 1 
		WHEN 300 then 2 
		ELSE 0 END												as Vendor_Type
	, coalesce(SKU.QuoteReferenceNumber, '')					as QuoteReferenceNumber
	,sku.Hybrid_Type 
	,sku.Hybrid_Source_DC
	,CASE WHEN sku.Hybrid_Conversion_Date > '1900-01-01 00:00:00.000' THEN sku.Hybrid_Conversion_Date Else null END as Hybrid_Conversion_Date
	, Row_Number() Over ( ORDER BY
			CASE WHEN @SortCol = 'DeptNo' and @SortDir = 'D' then SKU.[Department_Num] END DESC,
			CASE WHEN @SortCol = 'DeptNo' and @SortDir != 'D' then SKU.[Department_Num] END,
			CASE WHEN @SortCol = 'DeptName' and @SortDir = 'D' then D.DEPT_Name END DESC,
			CASE WHEN @SortCol = 'DeptName' and @SortDir != 'D' then D.DEPT_Name END,
			CASE WHEN @SortCol = 'SKU' and @SortDir = 'D' then SKU.Michaels_SKU END DESC,
			CASE WHEN @SortCol = 'SKU' and @SortDir != 'D' then SKU.Michaels_SKU END,
			CASE WHEN @SortCol = 'ClassNum' and @SortDir = 'D' then SKU.[Class_Num] END DESC,
			CASE WHEN @SortCol = 'ClassNum' and @SortDir != 'D' then SKU.[Class_Num] END,
			CASE WHEN @SortCol = 'SubClassNum' and @SortDir = 'D' then SKU.[Sub_Class_Num] END DESC,
			CASE WHEN @SortCol = 'SubClassNum' and @SortDir != 'D' then SKU.[Sub_Class_Num] END,
			CASE WHEN @SortCol = 'ItemDesc' and @SortDir = 'D' then SKU.[Item_Desc] END DESC,
			CASE WHEN @SortCol = 'ItemDesc' and @SortDir != 'D' then SKU.[Item_Desc] END,
			CASE WHEN @SortCol = 'VendorNumber' and @SortDir = 'D' then V.Vendor_Number END DESC,
			CASE WHEN @SortCol = 'VendorNumber' and @SortDir != 'D' then V.Vendor_Number END,
			CASE WHEN @SortCol = 'VendorName' and @SortDir = 'D' then VL.Vendor_Name END DESC,
			CASE WHEN @SortCol = 'VendorName' and @SortDir != 'D' then VL.Vendor_Name END,
			CASE WHEN @SortCol = 'VendorStyleNum' and @SortDir = 'D' then V.Vendor_Style_Num END DESC,
			CASE WHEN @SortCol = 'VendorStyleNum' and @SortDir != 'D' then V.Vendor_Style_Num END,
			CASE WHEN @SortCol = 'StockCategory' and @SortDir = 'D' then SKU.Stock_Category END DESC,
			CASE WHEN @SortCol = 'StockCategory' and @SortDir != 'D' then SKU.Stock_Category END,
			CASE WHEN @SortCol = 'ItemTypeAttribute' and @SortDir = 'D' then SKU.Item_Type_Attribute END DESC,
			CASE WHEN @SortCol = 'ItemTypeAttribute' and @SortDir != 'D' then SKU.Item_Type_Attribute END,
			CASE WHEN @SortCol = 'ItemStatus' and @SortDir = 'D' then SKU.Item_Status END DESC,
			CASE WHEN @SortCol = 'ItemStatus' and @SortDir != 'D' then SKU.Item_Status END,
			CASE WHEN @SortCol = 'ItemType' and @SortDir = 'D' then [Item_Type] END DESC,
			CASE WHEN @SortCol = 'ItemType' and @SortDir != 'D' then [Item_Type] END,
			CASE WHEN @SortCol = 'UPC' and @SortDir = 'D' then UPC.UPC END DESC,
			CASE WHEN @SortCol = 'UPC' and @SortDir != 'D' then UPC.UPC END,
			CASE WHEN @SortCol = 'HybridType' and @SortDir = 'D' then SKU.Hybrid_Type END DESC,
			CASE WHEN @SortCol = 'HybridType' and @SortDir != 'D' then SKU.Hybrid_Type END,
			CASE WHEN @SortCol = 'HybridSourceDC' and @SortDir = 'D' then SKU.Hybrid_Source_DC END DESC,
			CASE WHEN @SortCol = 'HybridSourceDC' and @SortDir != 'D' then SKU.Hybrid_Source_DC END,
			CASE WHEN @SortCol = 'ConversionDate' and @SortDir = 'D' then SKU.Hybrid_Conversion_Date END DESC,
			CASE WHEN @SortCol = 'ConversionDate' and @SortDir != 'D' then SKU.Hybrid_Conversion_Date END
			-- Add CASE Pairs as necessary to handle additional sort columns. All have comma's at the end except the last one
		)														as RowNumber
INTO #Results
FROM SPD_Item_Master_SKU					SKU
	join SPD_Item_Master_Vendor				V	on SKU.ID = V.SKU_ID
	left join SPD_Item_Master_Vendor_UPCs	UPC	on V.Michaels_SKU = UPC.Michaels_SKU 
													and V.Vendor_Number = UPC.Vendor_Number
													--and UPC.Primary_Indicator = 1
	left join dbo.SPD_Vendor				VL	on V.Vendor_Number = VL.Vendor_Number
	left join SPD_FineLine_Dept				D	on SKU.Department_Num = D.Dept
													and D.[enabled] = 1
WHERE ( SKU.Item_Desc like ('%' + @ItemDesc + '%') 
		and	( @ItemStatus is NULL OR SKU.Item_Status = @ItemStatus )
		and ( @DeptNum is NULL OR SKU.Department_Num = @DeptNum )
		and ( @ClassNo is NULL OR SKU.[Class_Num] = @ClassNo )
		and ( @SubClassNo is NULL OR SKU.Sub_Class_Num = @SubClassNo )
		and ( ( @VendorNumber is NULL and V.Primary_Indicator = 1 ) 
			OR V.Vendor_Number = @VendorNumber )
		and ( @SKU is NULL OR SKU.Michaels_SKU = @SKU )
		and ( ( @UPC is NULL and UPC.Primary_Indicator = 1 ) 
			OR ( UPC.UPC = @UPC )
			OR ( UPC.UPC is NULL ) )
		and ( @VPN is NULL OR V.Vendor_Style_Num like ('%' + @VPN + '%') )
		and ( @StockCat is NULL OR SKU.Stock_Category = @StockCat )
		and ( @ItemTypeAttr is NULL OR SKU.Item_Type_Attribute = @ItemTypeAttr )
		and ( @QuoteRefNum is NULL OR SKU.QuoteReferenceNumber like('%'+ @QuoteRefNum +'%'))
	) 
	
SET @totalRows = @@RowCount;	-- Grid needs to know how many total rows there are
--Print 'Total Rows Selected ' + convert(varchar(20),@totalRows)

-- Get the Paged results and update the fields with subquery lookups
SELECT R.SKU	
	, R.SKU_ID 
	, R.Dept_No
	, R.Dept_Name
	, R.Class_Num 
	, R.Sub_Class_Num
	, R.Item_Desc 
	, R.Vendor_Number 
	, R.Vendor_Name 
	, R.VPI 
	, R.Vendor_Style_Num 
	, R.UPC 
	, R.UPCPI 
	, Batch_ID =  dbo.udf_SPD_FindBatchID(R.SKU_ID, R.SKU) 
	, R.Stock_Category 
	, R.Item_Type_Attribute 
	, R.Item_Status 
	, R.Item_Type 
	, Is_Pack_Parent = case 
			WHEN dbo.udf_SPD_PackItemLeft2(R.Item_Type) in ('D','DP','SB') 
				THEN 1 
			ELSE 0 END
	, Independent_Editable = case 
			WHEN R.Item_Type = 'C' and Exists( 
				  Select SKU2.[Item_Type] 
				  From SPD_Item_Master_PackItems PKI
					join SPD_Item_Master_SKU SKU2	on PKI.Pack_SKU = SKU2.Michaels_SKU
														and PKI.Child_SKU = R.SKU
				  Where dbo.udf_SPD_PackItemLeft2(SKU2.[Item_Type]) = 'DP' 
					and SKU2.Item_Status = 'A' ) 
				 THEN 0
			ELSE 1 END
	, Pack_SKU = coalesce(case
			WHEN R.Item_Type ='C' 
				THEN (  
						Select top 1 PI2.Pack_SKU 
						From SPD_Item_Master_PackItems PI2, SPD_Item_Master_SKU SKU3
						Where PI2.Child_SKU = R.SKU
						and PI2.Pack_SKU = SKU3.Michaels_SKU
						and SKU3.Item_Status = 'A'
						order by dbo.udf_SPD_PackItemLeft2(SKU3.[Item_Type]) desc
					)				
			ELSE '' END
			, '' )
	, R.Vendor_Type 
	, R.QuoteReferenceNumber
	, R.Hybrid_Type
	, R.Hybrid_Source_DC
	, R.Hybrid_Conversion_Date
	
FROM ( Select * 
	   From	#Results
	   WHERE RowNumber Between @StartRow and @EndRow ) as R
Order By R.RowNumber asc

--Print 'Total Rows Selected ' + convert(varchar(20),@@RowCount)

DROP table #Results

RETURN @totalRows

GO


/*
==================================================================
Proc:	[usp_SPD_ItemMaster_SearchRecords]
Author:	J. Littlefield
Date:	May 2010
Desc:	Used by Item Maintenance Application. Search for SKU Records and DP Pack Item records
	
Test Code

[usp_SPD_ItemMaster_SearchRecords] @userID=1473, @vendorID=0, @SKU = '10143822'
[usp_SPD_ItemMaster_SearchRecords] @userID=1473, @vendorID=0, @VendorNumber=128
[usp_SPD_ItemMaster_SearchRecords] @userID=1473, @vendorID=0, @DeptNum = 18, @SortCol = 'Item_Desc', @SortDir='D', @RowIndex=30, @MaxRows=20 
[usp_SPD_ItemMaster_SearchRecords] @userID=1473, @vendorID=0, @DeptNum = 18, @ItemDesc = 'Refill'
[usp_SPD_ItemMaster_SearchRecords] @userID=1473, @vendorID=0, @DeptNum = 18, @VPN = '4'
[usp_SPD_ItemMaster_SearchRecords] @userID=1473, @vendorID=0, @DeptNum = 18, @ClassNo = 81, @SubClassNo=1337

Change Log
FJL 7/28/10 - per KH / MV : comment out special search filters on D / DP
FJL 8/23/10 - Add logic to ensure that Item Type returns first 1 or two chars of the Item Type
FJL 8/25/10 - Add logic to check Batch info from New Item and Item Maint.  Moved to filter table for performance sake
FJL 9/09/10 - Commented out Pack Searches as the Where clause is the same on all 3
JC  2/24/11 - Added support for QuoteReferenceNumber
==================================================================
*/
ALTER Procedure [dbo].[usp_SPD_ItemMaster_SearchRecords_SKU]
	@UserID bigint			-- required
	, @VendorID bigint		-- required
	, @DeptNum  int = null
	, @VendorNumber int = null
	, @ClassNo int = null
	, @SubClassNo int = null
	, @VPN varchar(50) = null
	, @UPC varchar(20) = null
	, @SKU varchar(20) = null
	, @ItemDesc varchar(250) = null
	, @StockCat varchar(10) = null
	, @ItemTypeAttr varchar(10) = null
	, @ItemStatus varchar(1) = null
	, @PackSearch varchar(5) = null
	, @PackSKU varchar(20) = null
	, @SortCol varchar(255) = null
	, @SortDir char(1) = 'A'
	, @RowIndex int = 0
	, @MaxRows int = null	
	, @QuoteRefNum varchar(50) = null
AS

set NOCOUNT on

---- for D / DP queries
--declare @HybridType varchar(5)
--	, @HybridSourceDC varchar(10)
--	, @DeptNo1 int
--	, @StockCat1 varchar(5)  
--	, @ClassNo1 int
--	, @SubClassNo1 int
--	, @ItemTypeAttr1 varchar(5)
--	, @PackVendorNumber bigint

-- for paging
DECLARE @StartRow int
	, @EndRow int
	, @totalRows int

SET @StartRow = @RowIndex + 1;		-- Grid call is zero based but Row_Number() is 1 based

IF @MaxRows is NULL
	SET @EndRow = 2147483647	-- Max int size
ELSE
	SET @EndRow = @RowIndex + @MaxRows;

	
-- Get the subset of data Sorted with a RowNumber to Page it	
-- Certain fields just have a place holder to minimize subqueries. NOTE: Can be done on non-sortable fields only
SELECT
	SKU.Michaels_SKU											as SKU
	, SKU.ID													as SKU_ID
	, coalesce(SKU.[Department_Num], 0)							as Dept_No
	, coalesce(D.DEPT_Name,'UNKNOWN DEPARTMENT')				as Dept_Name
	, coalesce(SKU.[Class_Num], 0)								as Class_Num
	, coalesce(SKU.[Sub_Class_Num], 0)							as Sub_Class_Num
	, coalesce(SKU.[Item_Desc],'')								as Item_Desc
	, V.Vendor_Number											as Vendor_Number
	, coalesce(VL.Vendor_Name, 'Unknown Vendor')				as Vendor_Name
	, case V.Primary_Indicator WHEN 1 then '*' ELSE '' end		as VPI
	, coalesce(V.Vendor_Style_Num,'')							as Vendor_Style_Num
	, coalesce(UPC.UPC,'Not Defined')							as UPC
	, CASE coalesce(UPC.Primary_Indicator,0) 
		WHEN 1 THEN '*' ELSE '' END								as UPCPI
	, convert(bigint,-1)										as Batch_ID					-- filled in later
	, coalesce(SKU.Stock_Category,'')							as Stock_Category
	, coalesce(SKU.Item_Type_Attribute,'')						as Item_Type_Attribute
	, SKU.Item_Status											as Item_Status
	, dbo.udf_SPD_PackItemLeft2([Item_Type])					as Item_Type
	, 0															as Is_Pack_Parent			-- filled in later
	, 0															as Independent_Editable		-- filled in later
	, convert(varchar(10),'')									as Pack_SKU					-- filled in later
	, case VL.Vendor_Type																	-- since the join is required for this table, get the vendor type now
		WHEN 110 then 1 
		WHEN 300 then 2 
		ELSE 0 END												as Vendor_Type
	, coalesce(SKU.QuoteReferenceNumber, '')					as QuoteReferenceNumber
	,sku.Hybrid_Type 
	,sku.Hybrid_Source_DC
	,CASE WHEN sku.Hybrid_Conversion_Date > '1900-01-01 00:00:00.000' THEN sku.Hybrid_Conversion_Date Else null END as Hybrid_Conversion_Date
	, Row_Number() Over ( ORDER BY
			CASE WHEN @SortCol = 'DeptNo' and @SortDir = 'D' then SKU.[Department_Num] END DESC,
			CASE WHEN @SortCol = 'DeptNo' and @SortDir != 'D' then SKU.[Department_Num] END,
			CASE WHEN @SortCol = 'DeptName' and @SortDir = 'D' then D.DEPT_Name END DESC,
			CASE WHEN @SortCol = 'DeptName' and @SortDir != 'D' then D.DEPT_Name END,
			CASE WHEN @SortCol = 'SKU' and @SortDir = 'D' then SKU.Michaels_SKU END DESC,
			CASE WHEN @SortCol = 'SKU' and @SortDir != 'D' then SKU.Michaels_SKU END,
			CASE WHEN @SortCol = 'ClassNum' and @SortDir = 'D' then SKU.[Class_Num] END DESC,
			CASE WHEN @SortCol = 'ClassNum' and @SortDir != 'D' then SKU.[Class_Num] END,
			CASE WHEN @SortCol = 'SubClassNum' and @SortDir = 'D' then SKU.[Sub_Class_Num] END DESC,
			CASE WHEN @SortCol = 'SubClassNum' and @SortDir != 'D' then SKU.[Sub_Class_Num] END,
			CASE WHEN @SortCol = 'ItemDesc' and @SortDir = 'D' then SKU.[Item_Desc] END DESC,
			CASE WHEN @SortCol = 'ItemDesc' and @SortDir != 'D' then SKU.[Item_Desc] END,
			CASE WHEN @SortCol = 'VendorNumber' and @SortDir = 'D' then V.Vendor_Number END DESC,
			CASE WHEN @SortCol = 'VendorNumber' and @SortDir != 'D' then V.Vendor_Number END,
			CASE WHEN @SortCol = 'VendorName' and @SortDir = 'D' then VL.Vendor_Name END DESC,
			CASE WHEN @SortCol = 'VendorName' and @SortDir != 'D' then VL.Vendor_Name END,
			CASE WHEN @SortCol = 'VendorStyleNum' and @SortDir = 'D' then V.Vendor_Style_Num END DESC,
			CASE WHEN @SortCol = 'VendorStyleNum' and @SortDir != 'D' then V.Vendor_Style_Num END,
			CASE WHEN @SortCol = 'StockCategory' and @SortDir = 'D' then SKU.Stock_Category END DESC,
			CASE WHEN @SortCol = 'StockCategory' and @SortDir != 'D' then SKU.Stock_Category END,
			CASE WHEN @SortCol = 'ItemTypeAttribute' and @SortDir = 'D' then SKU.Item_Type_Attribute END DESC,
			CASE WHEN @SortCol = 'ItemTypeAttribute' and @SortDir != 'D' then SKU.Item_Type_Attribute END,
			CASE WHEN @SortCol = 'ItemStatus' and @SortDir = 'D' then SKU.Item_Status END DESC,
			CASE WHEN @SortCol = 'ItemStatus' and @SortDir != 'D' then SKU.Item_Status END,
			CASE WHEN @SortCol = 'ItemType' and @SortDir = 'D' then [Item_Type] END DESC,
			CASE WHEN @SortCol = 'ItemType' and @SortDir != 'D' then [Item_Type] END,
			CASE WHEN @SortCol = 'UPC' and @SortDir = 'D' then UPC.UPC END DESC,
			CASE WHEN @SortCol = 'UPC' and @SortDir != 'D' then UPC.UPC END,
			CASE WHEN @SortCol = 'HybridType' and @SortDir = 'D' then SKU.Hybrid_Type END DESC,
			CASE WHEN @SortCol = 'HybridType' and @SortDir != 'D' then SKU.Hybrid_Type END,
			CASE WHEN @SortCol = 'HybridSourceDC' and @SortDir = 'D' then SKU.Hybrid_Source_DC END DESC,
			CASE WHEN @SortCol = 'HybridSourceDC' and @SortDir != 'D' then SKU.Hybrid_Source_DC END,
			CASE WHEN @SortCol = 'ConversionDate' and @SortDir = 'D' then SKU.Hybrid_Conversion_Date END DESC,
			CASE WHEN @SortCol = 'ConversionDate' and @SortDir != 'D' then SKU.Hybrid_Conversion_Date END
			-- Add CASE Pairs as necessary to handle additional sort columns. All have comma's at the end except the last one
		)														as RowNumber
INTO #Results
FROM SPD_Item_Master_SKU					SKU
	join SPD_Item_Master_Vendor				V	on SKU.ID = V.SKU_ID
	left join SPD_Item_Master_Vendor_UPCs	UPC	on V.Michaels_SKU = UPC.Michaels_SKU 
													and V.Vendor_Number = UPC.Vendor_Number
	left join dbo.SPD_Vendor				VL	on V.Vendor_Number = VL.Vendor_Number
	left join SPD_FineLine_Dept				D	on SKU.Department_Num = D.Dept
													and D.[enabled] = 1
WHERE ( SKU.Michaels_SKU = @SKU
		and ( @ItemStatus is NULL OR SKU.Item_Status = @ItemStatus )
		and ( @DeptNum is NULL OR SKU.Department_Num = @DeptNum )
		and ( @ClassNo is NULL OR SKU.[Class_Num] = @ClassNo )
		and ( @SubClassNo is NULL OR SKU.Sub_Class_Num = @SubClassNo )
		and ( ( @VendorNumber is NULL and V.Primary_Indicator = 1 ) 
			OR V.Vendor_Number = @VendorNumber )
		and ( ( @UPC is NULL and UPC.Primary_Indicator = 1 ) 
			OR ( UPC.UPC = @UPC )
			OR ( UPC.UPC is NULL ) )
		and ( @VPN is NULL OR V.Vendor_Style_Num like ('%' + @VPN + '%') )
		and ( @ItemDesc is NULL OR SKU.Item_Desc like ('%' + @ItemDesc + '%') )
		and ( @StockCat is NULL OR SKU.Stock_Category = @StockCat )
		and ( @ItemTypeAttr is NULL OR SKU.Item_Type_Attribute = @ItemTypeAttr )
		and ( @QuoteRefNum is NULL OR SKU.QuoteReferenceNumber like('%'+ @QuoteRefNum +'%'))
	) 
	
SET @totalRows = @@RowCount;	-- Grid needs to know how many total rows there are
--Print 'Total Rows Selected ' + convert(varchar(20),@totalRows)

-- Get the Paged results and update the fields with subquery lookups
SELECT R.SKU	
	, R.SKU_ID 
	, R.Dept_No
	, R.Dept_Name
	, R.Class_Num 
	, R.Sub_Class_Num
	, R.Item_Desc 
	, R.Vendor_Number 
	, R.Vendor_Name 
	, R.VPI 
	, R.Vendor_Style_Num 
	, R.UPC 
	, R.UPCPI 
	, Batch_ID =  dbo.udf_SPD_FindBatchID(R.SKU_ID, R.SKU) 
	, R.Stock_Category 
	, R.Item_Type_Attribute 
	, R.Item_Status 
	, R.Item_Type 
	, Is_Pack_Parent = case 
			WHEN dbo.udf_SPD_PackItemLeft2(R.Item_Type) in ('D','DP','SB') 
				THEN 1 
			ELSE 0 END
	, Independent_Editable = case 
			WHEN R.Item_Type = 'C' and Exists( 
				  Select SKU2.[Item_Type] 
				  From SPD_Item_Master_PackItems PKI
					join SPD_Item_Master_SKU SKU2	on PKI.Pack_SKU = SKU2.Michaels_SKU
														and PKI.Child_SKU = R.SKU
				  Where dbo.udf_SPD_PackItemLeft2(SKU2.[Item_Type]) = 'DP' 
					and SKU2.Item_Status = 'A' ) 
				 THEN 0
			ELSE 1 END
	, Pack_SKU = coalesce(case
			WHEN R.Item_Type ='C' 
				THEN (  
						Select top 1 PI2.Pack_SKU 
						From SPD_Item_Master_PackItems PI2, SPD_Item_Master_SKU SKU3
						Where PI2.Child_SKU = R.SKU
						and PI2.Pack_SKU = SKU3.Michaels_SKU
						and SKU3.Item_Status = 'A'
						order by dbo.udf_SPD_PackItemLeft2(SKU3.[Item_Type]) desc
					)				
			ELSE '' END
			, '' )
	, R.Vendor_Type 
	, R.QuoteReferenceNumber
	, R.Hybrid_Type
	, R.Hybrid_Source_DC
	, R.Hybrid_Conversion_Date 
FROM ( 
	Select *
	From #Results
	WHERE RowNumber Between @StartRow and @EndRow ) as R
Order By R.RowNumber asc

--Print 'Total Rows Selected ' + convert(varchar(20),@@RowCount)

DROP table #Results

RETURN @totalRows


GO


/*
==================================================================
Proc:	[usp_SPD_ItemMaster_SearchRecords]
Author:	J. Littlefield
Date:	May 2010
Desc:	Used by Item Maintenance Application. Search for SKU Records and DP Pack Item records
	
Test Code

[usp_SPD_ItemMaster_SearchRecords] @userID=1473, @vendorID=0, @SKU = '10143822'
[usp_SPD_ItemMaster_SearchRecords_Vendor] @userID=1473, @vendorID=0, @VendorNumber=874, @SKU = '10105386'
[usp_SPD_ItemMaster_SearchRecords] @userID=1473, @vendorID=0, @DeptNum = 18, @SortCol = 'Item_Desc', @SortDir='D', @RowIndex=30, @MaxRows=20 
[usp_SPD_ItemMaster_SearchRecords] @userID=1473, @vendorID=0, @DeptNum = 18, @ItemDesc = 'Refill'
[usp_SPD_ItemMaster_SearchRecords] @userID=1473, @vendorID=0, @DeptNum = 18, @VPN = '4'
[usp_SPD_ItemMaster_SearchRecords] @userID=1473, @vendorID=0, @DeptNum = 18, @ClassNo = 81, @SubClassNo=1337

Change Log
FJL 7/28/10 - per KH / MV : comment out special search filters on D / DP
FJL 8/23/10 - Add logic to ensure that Item Type returns first 1 or two chars of the Item Type
FJL 8/25/10 - Add logic to check Batch info from New Item and Item Maint.  Moved to filter table for performance sake
FJL 9/09/10 - Commented out Pack Searches as the Where clause is the same on all 3
JC  2/24/11 - Added support for QuoteReferenceNumber
==================================================================
*/
ALTER Procedure [dbo].[usp_SPD_ItemMaster_SearchRecords_Vendor]
	@UserID bigint			-- required
	, @VendorID bigint		-- required
	, @DeptNum  int = null
	, @VendorNumber int = null
	, @ClassNo int = null
	, @SubClassNo int = null
	, @VPN varchar(50) = null
	, @UPC varchar(20) = null
	, @SKU varchar(20) = null
	, @ItemDesc varchar(250) = null
	, @StockCat varchar(10) = null
	, @ItemTypeAttr varchar(10) = null
	, @ItemStatus varchar(1) = null
	, @PackSearch varchar(5) = null
	, @PackSKU varchar(20) = null
	, @SortCol varchar(255) = null
	, @SortDir char(1) = 'A'
	, @RowIndex int = 0
	, @MaxRows int = null	
	, @QuoteRefNum varchar(50) = null
AS

set NOCOUNT on

-- for D / DP queries
--declare @HybridType varchar(5)
--	, @HybridSourceDC varchar(10)
--	, @DeptNo1 int
--	, @StockCat1 varchar(5)  
--	, @ClassNo1 int
--	, @SubClassNo1 int
--	, @ItemTypeAttr1 varchar(5)
--	, @PackVendorNumber bigint

-- for paging
DECLARE @StartRow int
	, @EndRow int
	, @totalRows int


SET @StartRow = @RowIndex + 1;		-- Grid call is zero based but Row_Number() is 1 based

IF @MaxRows is NULL
	SET @EndRow = 2147483647	-- Max int size
ELSE
	SET @EndRow = @RowIndex + @MaxRows;

	
-- Get the subset of data Sorted with a RowNumber to Page it	
-- Certain fields just have a place holder to minimize subqueries. NOTE: Can be done on non-sortable fields only
SELECT
	SKU.Michaels_SKU											as SKU
	, SKU.ID													as SKU_ID
	, coalesce(SKU.[Department_Num], 0)							as Dept_No
	, coalesce(D.DEPT_Name,'UNKNOWN DEPARTMENT')				as Dept_Name
	, coalesce(SKU.[Class_Num], 0)								as Class_Num
	, coalesce(SKU.[Sub_Class_Num], 0)							as Sub_Class_Num
	, coalesce(SKU.[Item_Desc],'')								as Item_Desc
	, V.Vendor_Number											as Vendor_Number
	, ''														as Vendor_Name				-- filled in later
	, CASE V.Primary_Indicator WHEN 1 then '*' ELSE '' END		as VPI
	, coalesce(V.Vendor_Style_Num,'')							as Vendor_Style_Num
	, coalesce(UPC.UPC,'Not Defined')							as UPC
	, CASE coalesce(UPC.Primary_Indicator,0) 
		WHEN 1 THEN '*' ELSE '' END								as UPCPI
	, convert(bigint,-1)										as Batch_ID					-- filled in later
	, coalesce(SKU.Stock_Category,'')							as Stock_Category
	, coalesce(SKU.Item_Type_Attribute,'')						as Item_Type_Attribute
	, SKU.Item_Status											as Item_Status
	, dbo.udf_SPD_PackItemLeft2([Item_Type])					as Item_Type
	, 0															as Is_Pack_Parent			-- filled in later
	, 0															as Independent_Editable		-- filled in later
	, convert(varchar(10),'')									as Pack_SKU					-- filled in later
	, 0															as Vendor_Type				-- filled in later
	, coalesce(SKU.QuoteReferenceNumber, '')					as QuoteReferenceNumber
	,sku.Hybrid_Type 
	,sku.Hybrid_Source_DC
	,CASE WHEN sku.Hybrid_Conversion_Date > '1900-01-01 00:00:00.000' THEN sku.Hybrid_Conversion_Date Else null END as Hybrid_Conversion_Date
	, Row_Number() Over ( ORDER BY
			CASE WHEN @SortCol = 'DeptNo' and @SortDir = 'D' then SKU.[Department_Num] END DESC,
			CASE WHEN @SortCol = 'DeptNo' and @SortDir != 'D' then SKU.[Department_Num] END,
			CASE WHEN @SortCol = 'DeptName' and @SortDir = 'D' then D.DEPT_Name END DESC,
			CASE WHEN @SortCol = 'DeptName' and @SortDir != 'D' then D.DEPT_Name END,
			CASE WHEN @SortCol = 'SKU' and @SortDir = 'D' then SKU.Michaels_SKU END DESC,
			CASE WHEN @SortCol = 'SKU' and @SortDir != 'D' then SKU.Michaels_SKU END,
			CASE WHEN @SortCol = 'ClassNum' and @SortDir = 'D' then SKU.[Class_Num] END DESC,
			CASE WHEN @SortCol = 'ClassNum' and @SortDir != 'D' then SKU.[Class_Num] END,
			CASE WHEN @SortCol = 'SubClassNum' and @SortDir = 'D' then SKU.[Sub_Class_Num] END DESC,
			CASE WHEN @SortCol = 'SubClassNum' and @SortDir != 'D' then SKU.[Sub_Class_Num] END,
			CASE WHEN @SortCol = 'ItemDesc' and @SortDir = 'D' then SKU.[Item_Desc] END DESC,
			CASE WHEN @SortCol = 'ItemDesc' and @SortDir != 'D' then SKU.[Item_Desc] END,
			CASE WHEN @SortCol = 'VendorNumber' and @SortDir = 'D' then V.Vendor_Number END DESC,
			CASE WHEN @SortCol = 'VendorNumber' and @SortDir != 'D' then V.Vendor_Number END,
			CASE WHEN @SortCol = 'VendorName' and @SortDir = 'D' then V.Vendor_Number END DESC,
			CASE WHEN @SortCol = 'VendorName' and @SortDir != 'D' then V.Vendor_Number END,
			CASE WHEN @SortCol = 'VendorStyleNum' and @SortDir = 'D' then V.Vendor_Style_Num END DESC,
			CASE WHEN @SortCol = 'VendorStyleNum' and @SortDir != 'D' then V.Vendor_Style_Num END,
			CASE WHEN @SortCol = 'StockCategory' and @SortDir = 'D' then SKU.Stock_Category END DESC,
			CASE WHEN @SortCol = 'StockCategory' and @SortDir != 'D' then SKU.Stock_Category END,
			CASE WHEN @SortCol = 'ItemTypeAttribute' and @SortDir = 'D' then SKU.Item_Type_Attribute END DESC,
			CASE WHEN @SortCol = 'ItemTypeAttribute' and @SortDir != 'D' then SKU.Item_Type_Attribute END,
			CASE WHEN @SortCol = 'ItemStatus' and @SortDir = 'D' then SKU.Item_Status END DESC,
			CASE WHEN @SortCol = 'ItemStatus' and @SortDir != 'D' then SKU.Item_Status END,
			CASE WHEN @SortCol = 'ItemType' and @SortDir = 'D' then [Item_Type] END DESC,
			CASE WHEN @SortCol = 'ItemType' and @SortDir != 'D' then [Item_Type] END,
			CASE WHEN @SortCol = 'UPC' and @SortDir = 'D' then UPC.UPC END DESC,
			CASE WHEN @SortCol = 'UPC' and @SortDir != 'D' then UPC.UPC END,
			CASE WHEN @SortCol = 'HybridType' and @SortDir = 'D' then SKU.Hybrid_Type END DESC,
			CASE WHEN @SortCol = 'HybridType' and @SortDir != 'D' then SKU.Hybrid_Type END,
			CASE WHEN @SortCol = 'HybridSourceDC' and @SortDir = 'D' then SKU.Hybrid_Source_DC END DESC,
			CASE WHEN @SortCol = 'HybridSourceDC' and @SortDir != 'D' then SKU.Hybrid_Source_DC END,
			CASE WHEN @SortCol = 'ConversionDate' and @SortDir = 'D' then SKU.Hybrid_Conversion_Date END DESC,
			CASE WHEN @SortCol = 'ConversionDate' and @SortDir != 'D' then SKU.Hybrid_Conversion_Date END
			-- Add CASE Pairs as necessary to handle additional sort columns. All have comma's at the end except the last one
		)														as RowNumber
INTO #Results
FROM SPD_Item_Master_SKU					SKU
	join SPD_Item_Master_Vendor				V	on SKU.ID = V.SKU_ID
	left join SPD_Item_Master_Vendor_UPCs	UPC	on V.Michaels_SKU = UPC.Michaels_SKU 
													and V.Vendor_Number = UPC.Vendor_Number
	left join SPD_FineLine_Dept				D	on SKU.Department_Num = D.Dept
													and D.[enabled] = 1
WHERE ( V.Vendor_Number = @VendorNumber
		and ( @ItemStatus is NULL OR SKU.Item_Status = @ItemStatus )
		and ( @DeptNum is NULL OR SKU.Department_Num = @DeptNum )
		and ( @ClassNo is NULL OR SKU.[Class_Num] = @ClassNo )
		and ( @SubClassNo is NULL OR SKU.Sub_Class_Num = @SubClassNo )
		and ( @SKU is NULL OR SKU.Michaels_SKU = @SKU )
		and ( ( @UPC is NULL and UPC.Primary_Indicator = 1 ) 
			OR ( UPC.UPC = @UPC )
			OR ( UPC.UPC is NULL ) )
		and ( @VPN is NULL OR V.Vendor_Style_Num like ('%' + @VPN + '%') )
		and ( @ItemDesc is NULL OR SKU.Item_Desc like ('%' + @ItemDesc + '%') )
		and ( @StockCat is NULL OR SKU.Stock_Category = @StockCat )
		and ( @ItemTypeAttr is NULL OR SKU.Item_Type_Attribute = @ItemTypeAttr )
		and ( @QuoteRefNum is NULL OR SKU.QuoteReferenceNumber like('%'+ @QuoteRefNum +'%'))
	) 
	
SET @totalRows = @@RowCount;	-- Grid needs to know how many total rows there are
--Print 'Total Rows Selected ' + convert(varchar(20),@totalRows)

-- Get the Paged results and update the fields with subquery lookups
SELECT 
	R.SKU	
	, R.SKU_ID 
	, R.Dept_No
	, R.Dept_Name
	, R.Class_Num 
	, R.Sub_Class_Num
	, R.Item_Desc 
	, R.Vendor_Number 
	, Vendor_Name = coalesce( ( Select VL.Vendor_Name From SPD_Vendor VL Where R.Vendor_Number = VL.Vendor_Number )
			, 'Unknown Vendor')
	, R.VPI 
	, R.Vendor_Style_Num 
	, R.UPC 
	, R.UPCPI 
	, Batch_ID =  dbo.udf_SPD_FindBatchID(R.SKU_ID, R.SKU) 
	, R.Stock_Category 
	, R.Item_Type_Attribute 
	, R.Item_Status 
	, R.Item_Type 
	, Is_Pack_Parent = case 
			WHEN dbo.udf_SPD_PackItemLeft2(R.Item_Type) in ('D','DP','SB') 
				THEN 1 
			ELSE 0 END
	, Independent_Editable = case 
			WHEN R.Item_Type = 'C' and Exists( 
				  Select SKU2.[Item_Type] 
				  From SPD_Item_Master_PackItems PKI
					join SPD_Item_Master_SKU SKU2	on PKI.Pack_SKU = SKU2.Michaels_SKU
														and PKI.Child_SKU = R.SKU
				  Where dbo.udf_SPD_PackItemLeft2(SKU2.[Item_Type]) = 'DP' 
					and SKU2.Item_Status = 'A' ) 
				 THEN 0
			ELSE 1 END
	, Pack_SKU = coalesce(case
			WHEN R.Item_Type ='C' 
				THEN (  
						Select top 1 PI2.Pack_SKU 
						From SPD_Item_Master_PackItems PI2, SPD_Item_Master_SKU SKU3
						Where PI2.Child_SKU = R.SKU
						and PI2.Pack_SKU = SKU3.Michaels_SKU
						and SKU3.Item_Status = 'A'
						order by dbo.udf_SPD_PackItemLeft2(SKU3.[Item_Type]) desc
					)				
			ELSE '' END
			, '' )
	, Vendor_Type = coalesce( (
			Select case VL2.Vendor_Type
				WHEN 110 then 1 
				WHEN 300 then 2 
				ELSE 0 END		
			From SPD_Vendor VL2 Where R.Vendor_Number = VL2.Vendor_Number )
		, 0)
	, R.QuoteReferenceNumber
	, R.Hybrid_Type
	, R.Hybrid_Source_DC
	, R.Hybrid_Conversion_Date
FROM ( Select * 
	   From #Results
	   WHERE RowNumber Between @StartRow and @EndRow ) As R
Order By R.RowNumber asc

--Print 'Total Rows Selected ' + convert(varchar(20),@@RowCount)

DROP table #Results

RETURN @totalRows

GO


/*
==================================================================
Proc:	[usp_SPD_ItemMaster_SearchRecords_VendorDept]
Author:	J. Littlefield
Date:	May 2010
Desc:	Used by Item Maintenance Application. Search for SKU Records and DP Pack Item records
	
Test Code

[usp_SPD_ItemMaster_SearchRecords] @userID=1473, @vendorID=0, @SKU = '10143822'
[usp_SPD_ItemMaster_SearchRecords] @userID=1473, @vendorID=0, @VendorNumber=128
[usp_SPD_ItemMaster_SearchRecords] @userID=1473, @vendorID=0, @DeptNum = 18, @SortCol = 'Item_Desc', @SortDir='D', @RowIndex=30, @MaxRows=20 
[usp_SPD_ItemMaster_SearchRecords] @userID=1473, @vendorID=0, @DeptNum = 18, @ItemDesc = 'Refill'
[usp_SPD_ItemMaster_SearchRecords] @userID=1473, @vendorID=0, @DeptNum = 18, @VPN = '4'
[usp_SPD_ItemMaster_SearchRecords] @userID=1473, @vendorID=0, @DeptNum = 18, @ClassNo = 81, @SubClassNo=1337

Change Log
FJL 7/28/10 - per KH / MV : comment out special search filters on D / DP
FJL 8/23/10 - Add logic to ensure that Item Type returns first 1 or two chars of the Item Type
FJL 8/25/10 - Add logic to check Batch info from New Item and Item Maint.  Moved to filter table for performance sake
FJL 9/09/10 - Commented out Pack Searches as the Where clause is the same on all 3
JC  2/24/11 - Added support for QuoteReferenceNumber
==================================================================
*/
ALTER Procedure [dbo].[usp_SPD_ItemMaster_SearchRecords_VendorDept]
	@UserID bigint			-- required
	, @VendorID bigint		-- required
	, @DeptNum  int = null
	, @VendorNumber int = null
	, @ClassNo int = null
	, @SubClassNo int = null
	, @VPN varchar(50) = null
	, @UPC varchar(20) = null
	, @SKU varchar(20) = null
	, @ItemDesc varchar(250) = null
	, @StockCat varchar(10) = null
	, @ItemTypeAttr varchar(10) = null
	, @ItemStatus varchar(1) = null
	, @PackSearch varchar(5) = null
	, @PackSKU varchar(20) = null
	, @SortCol varchar(255) = null
	, @SortDir char(1) = 'A'
	, @RowIndex int = 0
	, @MaxRows int = null	
	, @QuoteRefNum varchar(50) = null
AS

set NOCOUNT on

-- for D / DP queries
--declare @HybridType varchar(5)
--	, @HybridSourceDC varchar(10)
--	, @DeptNo1 int
--	, @StockCat1 varchar(5)  
--	, @ClassNo1 int
--	, @SubClassNo1 int
--	, @ItemTypeAttr1 varchar(5)
--	, @PackVendorNumber bigint

-- for paging
DECLARE @StartRow int
	, @EndRow int
	, @totalRows int


SET @StartRow = @RowIndex + 1;		-- Grid call is zero based but Row_Number() is 1 based

IF @MaxRows is NULL
	SET @EndRow = 2147483647	-- Max int size
ELSE
	SET @EndRow = @RowIndex + @MaxRows;

	
-- Get the subset of data Sorted with a RowNumber to Page it	
-- Certain fields just have a place holder to minimize subqueries. NOTE: Can be done on non-sortable fields only
SELECT
	SKU.Michaels_SKU											as SKU
	, SKU.ID													as SKU_ID
	, coalesce(SKU.[Department_Num], 0)							as Dept_No
	, ''														as Dept_Name				-- filled in later
	, coalesce(SKU.[Class_Num], 0)								as Class_Num
	, coalesce(SKU.[Sub_Class_Num], 0)							as Sub_Class_Num
	, coalesce(SKU.[Item_Desc],'')								as Item_Desc
	, V.Vendor_Number											as Vendor_Number
	, ''														as Vendor_Name				-- filled in later
	, case V.Primary_Indicator WHEN 1 then '*' ELSE '' end		as VPI
	, coalesce(V.Vendor_Style_Num,'')							as Vendor_Style_Num
	, coalesce(UPC.UPC,'Not Defined')							as UPC
	, CASE coalesce(UPC.Primary_Indicator,0) 
		WHEN 1 THEN '*' ELSE '' END								as UPCPI
	, convert(bigint,-1)										as Batch_ID					-- filled in later
	, coalesce(SKU.Stock_Category,'')							as Stock_Category
	, coalesce(SKU.Item_Type_Attribute,'')						as Item_Type_Attribute
	, SKU.Item_Status											as Item_Status
	, dbo.udf_SPD_PackItemLeft2([Item_Type])					as Item_Type
	, 0															as Is_Pack_Parent			-- filled in later
	, 0															as Independent_Editable		-- filled in later
	, convert(varchar(10),'')									as Pack_SKU					-- filled in later
	, 0															as Vendor_Type				-- filled in later
	, coalesce(SKU.QuoteReferenceNumber, '')					as QuoteReferenceNumber
	,sku.Hybrid_Type 
	,sku.Hybrid_Source_DC
	,CASE WHEN sku.Hybrid_Conversion_Date > '1900-01-01 00:00:00.000' THEN sku.Hybrid_Conversion_Date Else null END as Hybrid_Conversion_Date
	, Row_Number() Over ( ORDER BY
			CASE WHEN @SortCol = 'DeptNo' and @SortDir = 'D' then SKU.[Department_Num] END DESC,
			CASE WHEN @SortCol = 'DeptNo' and @SortDir != 'D' then SKU.[Department_Num] END,
			CASE WHEN @SortCol = 'DeptName' and @SortDir = 'D' then SKU.[Department_Num] END DESC,
			CASE WHEN @SortCol = 'DeptName' and @SortDir != 'D' then SKU.[Department_Num] END,
			CASE WHEN @SortCol = 'SKU' and @SortDir = 'D' then SKU.Michaels_SKU END DESC,
			CASE WHEN @SortCol = 'SKU' and @SortDir != 'D' then SKU.Michaels_SKU END,
			CASE WHEN @SortCol = 'ClassNum' and @SortDir = 'D' then SKU.[Class_Num] END DESC,
			CASE WHEN @SortCol = 'ClassNum' and @SortDir != 'D' then SKU.[Class_Num] END,
			CASE WHEN @SortCol = 'SubClassNum' and @SortDir = 'D' then SKU.[Sub_Class_Num] END DESC,
			CASE WHEN @SortCol = 'SubClassNum' and @SortDir != 'D' then SKU.[Sub_Class_Num] END,
			CASE WHEN @SortCol = 'ItemDesc' and @SortDir = 'D' then SKU.[Item_Desc] END DESC,
			CASE WHEN @SortCol = 'ItemDesc' and @SortDir != 'D' then SKU.[Item_Desc] END,
			CASE WHEN @SortCol = 'VendorNumber' and @SortDir = 'D' then V.Vendor_Number END DESC,
			CASE WHEN @SortCol = 'VendorNumber' and @SortDir != 'D' then V.Vendor_Number END,
			CASE WHEN @SortCol = 'VendorName' and @SortDir = 'D' then V.Vendor_Number END DESC,
			CASE WHEN @SortCol = 'VendorName' and @SortDir != 'D' then V.Vendor_Number END,
			CASE WHEN @SortCol = 'VendorStyleNum' and @SortDir = 'D' then V.Vendor_Style_Num END DESC,
			CASE WHEN @SortCol = 'VendorStyleNum' and @SortDir != 'D' then V.Vendor_Style_Num END,
			CASE WHEN @SortCol = 'StockCategory' and @SortDir = 'D' then SKU.Stock_Category END DESC,
			CASE WHEN @SortCol = 'StockCategory' and @SortDir != 'D' then SKU.Stock_Category END,
			CASE WHEN @SortCol = 'ItemTypeAttribute' and @SortDir = 'D' then SKU.Item_Type_Attribute END DESC,
			CASE WHEN @SortCol = 'ItemTypeAttribute' and @SortDir != 'D' then SKU.Item_Type_Attribute END,
			CASE WHEN @SortCol = 'ItemStatus' and @SortDir = 'D' then SKU.Item_Status END DESC,
			CASE WHEN @SortCol = 'ItemStatus' and @SortDir != 'D' then SKU.Item_Status END,
			CASE WHEN @SortCol = 'ItemType' and @SortDir = 'D' then [Item_Type] END DESC,
			CASE WHEN @SortCol = 'ItemType' and @SortDir != 'D' then [Item_Type] END,
			CASE WHEN @SortCol = 'UPC' and @SortDir = 'D' then UPC.UPC END DESC,
			CASE WHEN @SortCol = 'UPC' and @SortDir != 'D' then UPC.UPC END,
			CASE WHEN @SortCol = 'HybridType' and @SortDir = 'D' then SKU.Hybrid_Type END DESC,
			CASE WHEN @SortCol = 'HybridType' and @SortDir != 'D' then SKU.Hybrid_Type END,
			CASE WHEN @SortCol = 'HybridSourceDC' and @SortDir = 'D' then SKU.Hybrid_Source_DC END DESC,
			CASE WHEN @SortCol = 'HybridSourceDC' and @SortDir != 'D' then SKU.Hybrid_Source_DC END,
			CASE WHEN @SortCol = 'ConversionDate' and @SortDir = 'D' then SKU.Hybrid_Conversion_Date END DESC,
			CASE WHEN @SortCol = 'ConversionDate' and @SortDir != 'D' then SKU.Hybrid_Conversion_Date END
			-- Add CASE Pairs as necessary to handle additional sort columns. All have comma's at the end except the last one
		)														as RowNumber
INTO #Results
FROM SPD_Item_Master_SKU					SKU
	join SPD_Item_Master_Vendor				V	on SKU.ID = V.SKU_ID
	left join SPD_Item_Master_Vendor_UPCs	UPC	on V.Michaels_SKU = UPC.Michaels_SKU 
													and V.Vendor_Number = UPC.Vendor_Number
WHERE ( V.Vendor_Number = @VendorNumber
		and SKU.Department_Num = @DeptNum
		and ( @ItemStatus is NULL OR SKU.Item_Status = @ItemStatus )
		and ( @ClassNo is NULL OR SKU.[Class_Num] = @ClassNo )
		and ( @SubClassNo is NULL OR SKU.Sub_Class_Num = @SubClassNo )
		and ( @SKU is NULL OR SKU.Michaels_SKU = @SKU )
		and ( ( @UPC is NULL and UPC.Primary_Indicator = 1 ) 
			OR ( UPC.UPC = @UPC )
			OR ( UPC.UPC is NULL ) )
		and ( @VPN is NULL OR V.Vendor_Style_Num like ('%' + @VPN + '%') )
		and ( @ItemDesc is NULL OR SKU.Item_Desc like ('%' + @ItemDesc + '%') )
		and ( @StockCat is NULL OR SKU.Stock_Category = @StockCat )
		and ( @ItemTypeAttr is NULL OR SKU.Item_Type_Attribute = @ItemTypeAttr )
		and ( @QuoteRefNum is NULL OR SKU.QuoteReferenceNumber like('%'+ @QuoteRefNum +'%'))
	) 
	
SET @totalRows = @@RowCount;	-- Grid needs to know how many total rows there are
--Print 'Total Rows Selected ' + convert(varchar(20),@totalRows)

-- Get the Paged results and update the fields with subquery lookups
SELECT 
	R.SKU	
	, R.SKU_ID 
	, R.Dept_No
	, Dept_Name = Coalesce( ( Select D.DEPT_Name From SPD_FineLine_Dept	D Where	R.Dept_No = D.Dept and D.[enabled] = 1 )
				, 'Unknown Department') 
	, R.Class_Num 
	, R.Sub_Class_Num
	, R.Item_Desc 
	, R.Vendor_Number 
	, Vendor_Name = coalesce( ( Select VL.Vendor_Name From SPD_Vendor VL Where R.Vendor_Number = VL.Vendor_Number )
			, 'Unknown Vendor')
	, R.VPI 
	, R.Vendor_Style_Num 
	, R.UPC 
	, R.UPCPI 
	, Batch_ID =  dbo.udf_SPD_FindBatchID(R.SKU_ID, R.SKU) 
	, R.Stock_Category 
	, R.Item_Type_Attribute 
	, R.Item_Status 
	, R.Item_Type 
	, Is_Pack_Parent = case 
			WHEN dbo.udf_SPD_PackItemLeft2(R.Item_Type) in ('D','DP','SB') 
				THEN 1 
			ELSE 0 END
	, Independent_Editable = case 
			WHEN R.Item_Type = 'C' and Exists( 
				  Select SKU2.[Item_Type] 
				  From SPD_Item_Master_PackItems PKI
					join SPD_Item_Master_SKU SKU2	on PKI.Pack_SKU = SKU2.Michaels_SKU
														and PKI.Child_SKU = R.SKU
				  Where dbo.udf_SPD_PackItemLeft2(SKU2.[Item_Type]) = 'DP' 
					and SKU2.Item_Status = 'A' ) 
				 THEN 0
			ELSE 1 END
	, Pack_SKU = coalesce(case
			WHEN R.Item_Type ='C' 
				THEN (  
						Select top 1 PI2.Pack_SKU 
						From SPD_Item_Master_PackItems PI2, SPD_Item_Master_SKU SKU3
						Where PI2.Child_SKU = R.SKU
						and PI2.Pack_SKU = SKU3.Michaels_SKU
						and SKU3.Item_Status = 'A'
						order by dbo.udf_SPD_PackItemLeft2(SKU3.[Item_Type]) desc
					)				
			ELSE '' END
			, '' )
	, Vendor_Type = coalesce( (
					  Select case VL2.Vendor_Type
						WHEN 110 then 1 
						WHEN 300 then 2 
						ELSE 0 END
					  From SPD_Vendor VL2 Where R.Vendor_Number = VL2.Vendor_Number )
					, 0)
	, R.QuoteReferenceNumber
	, R.Hybrid_Type
	, R.Hybrid_Source_DC
	, R.Hybrid_Conversion_Date
FROM ( Select *
	   From #Results
	   WHERE RowNumber Between @StartRow and @EndRow ) as R
Order By R.RowNumber asc

--Print 'Total Rows Selected ' + convert(varchar(20),@@RowCount)

DROP table #Results

RETURN @totalRows		

GO


ALTER PROCEDURE [dbo].[usp_SPD_MQComm_UpdateItemMaster] 
	@BatchID bigint
	, @LTS datetime = null
	, @debug int
AS
BEGIN

	IF  @LTS is NULL
		SET @LTS = getdate()
		
	Declare @BatchType int
		, @rows int
		, @msg varchar(1000)
		, @vcBatchID varchar(20)
		, @Error bit
		, @CurDate datetime
	
	Set @vcBatchID = convert(varchar(20),@BatchID)
	Set @Error = 0
	Set @CurDate = getdate()
	
	Select @BatchType = Batch_Type_ID
	From SPD_Batch 
	Where ID = @BatchID
	
	

	DECLARE @SCFH table
	(
		Michaels_SKU varchar(10),
		Metadata_Column_ID int,
		New_Value varchar(max)
	)

	DECLARE @PhytoCertID int = 0
	DECLARE @PhytoTempShipID int = 0


	BEGIN TRAN
	IF @BatchType = 1
	BEGIN
		-- ****************************************************************************
		-- From Domestic Update
		-- ****************************************************************************
	
		-- Update SKU Level Info
		Set @msg = 'Updating Item Master SKU from Domestic New Item. Batch: ' + @vcBatchID
		IF @Debug=1  Print @msg
		EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg

		Select @PhytoCertID = isNull(id,0) from spd_metadata_column mc 
		where MC.MetaData_table_id = 3 and MC.Column_Name = 'PhytoSanitaryCertificate'
		and isNull(MC.Track_History,0) = 1

		Select @PhytoTempShipID = isNull(id,0) from spd_metadata_column mc 
		where MC.MetaData_table_id = 3 and MC.Column_Name = 'PhytoTemporaryShipment'
		and isNull(MC.Track_History,0) = 1


		BEGIN TRY

			--insert history columns
			if @PhytoCertID > 0
			BEGIN
				Insert into @SCFH
				(Michaels_SKU, 
				Metadata_Column_ID, 
				New_Value)
				Select distinct
				SKU.Michaels_SKU, 
				@PhytoCertID, 
				DI.[PhytoSanitaryCertificate]
				FROM [SPD_Item_Master_SKU] SKU
					Join SPD_Items DI			on SKU.[Michaels_SKU] = DI.Michaels_SKU
					join SPD_Item_Headers DH	on DI.Item_Header_ID = DH.ID
					join SPD_Batch B			on DH.Batch_ID = B.ID
					join SPD_Workflow_Stage WS	on B.Workflow_Stage_ID = WS.ID
				WHERE 	B.ID = @BatchID
					and DI.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
					and WS.Stage_Type_id = 4	-- ONLY COMPLETED BATCHES PLEASE
			END

			--insert history columns
			if @PhytoTempShipID > 0
			BEGIN
				Insert into @SCFH
				(Michaels_SKU, 
				Metadata_Column_ID, 
				New_Value)
				Select distinct
				SKU.Michaels_SKU, 
				@PhytoTempShipID, 
				DI.[PhytoTemporaryShipment]
				FROM [SPD_Item_Master_SKU] SKU
					Join SPD_Items DI			on SKU.[Michaels_SKU] = DI.Michaels_SKU
					join SPD_Item_Headers DH	on DI.Item_Header_ID = DH.ID
					join SPD_Batch B			on DH.Batch_ID = B.ID
					join SPD_Workflow_Stage WS	on B.Workflow_Stage_ID = WS.ID
				WHERE 	B.ID = @BatchID
					and DI.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
					and WS.Stage_Type_id = 4	-- ONLY COMPLETED BATCHES PLEASE
			END


			Insert into  SPD_Change_Field_History
			(Michaels_SKU, Batch_ID, Metadata_Column_ID, Old_Value, New_Value)
			Select Distinct
			Michaels_SKU, @BatchID, Metadata_Column_ID, Null, New_Value
			from @SCFH SCFH
			where not exists
			(
				Select 1 from SPD_Change_Field_History SCFH2
				where SCFH2.Michaels_SKU = SCFH.Michaels_SKU
				and SCFH2.Batch_ID = @BatchID
				and SCFH2.Metadata_Column_ID = SCFH.Metadata_Column_ID
			) and New_Value is not null

			UPDATE [SPD_Item_Master_SKU]
				SET 
				Date_Last_Modified = @CurDate
				, Update_User_ID = 0
				, Buyer = DH.[Buyer_Approval] 
				,[RMS_Sellable] = DH.[RMS_Sellable]
				,[RMS_Orderable] = DH.[RMS_Orderable]
				,[RMS_Inventory] = DH.[RMS_Inventory]
				,[Store_Total] = DH.[Store_Total]
				,[Item_Type] = DI.[Pack_Item_Indicator]
				,[Customs_Description] = DI.[Customs_Description]
				, [Pack_Item_Indicator] = Case 
					WHEN dbo.udf_SPD_PackItemLeft2(DI.[Pack_Item_Indicator]) in ('D','DP','SB')
					THEN 'Y' 
					ELSE 'N' end
				,Updated_From_NewItem = 1	-- now just for informational purposes since an item can go through new item more than once
				,[Fumigation_Certificate] = DI.[PhytoSanitaryCertificate]
				,[PhytoTemporaryShipment] = DI.[PhytoTemporaryShipment]
			FROM [SPD_Item_Master_SKU] SKU
				Join SPD_Items DI			on SKU.[Michaels_SKU] = DI.Michaels_SKU
				join SPD_Item_Headers DH	on DI.Item_Header_ID = DH.ID
				join SPD_Batch B			on DH.Batch_ID = B.ID
				join SPD_Workflow_Stage WS	on B.Workflow_Stage_ID = WS.ID
			WHERE 	B.ID = @BatchID
				and DI.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and WS.Stage_Type_id = 4	-- ONLY COMPLETED BATCHES PLEASE

			set @rows = @@Rowcount
			set @msg = '    Records Updated: ' + convert(varchar(20),@rows)
			IF @Debug=1  Print @msg
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
		END TRY
		
		BEGIN CATCH
			set @msg = 'Updating Item Master SKU from Domestic... Error Occurred in Update' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			Rollback Tran
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			RETURN
		END CATCH
		
		-- Update UDA Level Data.  This should be an Insert as the data is not returned
		-- Update.  Since a New Item Batch can be done twice
		Set @msg = 'Updating Item Master UDA from Domestic New Item. Batch: ' + @vcBatchID
		IF @Debug=1  Print @msg
		EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg

		BEGIN TRY
			-- **********************************************************************************************
			-- First the Tax info: Update / Insert
			IF @Debug=1  Print 'Domestic Tax UDA'
			UPDATE SPD_Item_Master_UDA
				Set 
					UDA_ID = I.Tax_UDA
					, UDA_Value = I.Tax_Value_UDA
			FROM SPD_Items I
				Join SPD_Item_Master_UDA UDA		on I.Michaels_SKU = UDA.Michaels_SKU 
														and UDA.UDA_ID between 1 and 9 
				Join SPD_Item_Headers H				on I.Item_Header_ID = H.ID
				Join SPD_Batch B					on H.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
			WHERE B.ID = @BatchID
				and I.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE

			INSERT SPD_Item_Master_UDA ( Michaels_SKU, UDA_ID, UDA_Value )
			Select  
				I.Michaels_SKU
				, I.Tax_UDA
				, I.Tax_Value_UDA
			FROM SPD_Items I
				Join SPD_Item_Headers H				on I.Item_Header_ID = H.ID
				Join SPD_Batch B					on H.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Left Join SPD_Item_Master_UDA UDA	on I.Michaels_SKU = UDA.Michaels_SKU 
													and UDA.UDA_ID between 1 and 9 
			WHERE 	B.ID = @BatchID
				and I.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and UDA.UDA_ID is NULL

			-- **********************************************************************************************
			-- Now the PrePriced: Update, Insert, Delete
			IF @Debug=1  Print 'Domestic PrePriced UDA'
			UPDATE SPD_Item_Master_UDA
				Set UDA_Value = I.Pre_Priced_UDA
			FROM SPD_Items I
				Join SPD_Item_Headers H				on I.Item_Header_ID = H.ID
				Join SPD_Batch B					on H.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Join SPD_Item_Master_UDA UDA		on I.Michaels_SKU = UDA.Michaels_SKU 
														and UDA.UDA_ID = 10
			WHERE B.ID = @BatchID			
				and I.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and I.Pre_Priced ='Y'			-- UDA defined in Item
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
			
			INSERT SPD_Item_Master_UDA ( Michaels_SKU, UDA_ID, UDA_Value )
			Select  
				I.Michaels_SKU
				, 10
				, I.Pre_Priced_UDA
			FROM SPD_Items I
				Join SPD_Item_Headers H				on I.Item_Header_ID = H.ID
				Join SPD_Batch B					on H.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Left Join SPD_Item_Master_UDA UDA	on I.Michaels_SKU = UDA.Michaels_SKU 
														and UDA.UDA_ID = 10
			WHERE 	B.ID = @BatchID
				and I.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and I.Pre_Priced ='Y'			-- UDA defined in Item
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and UDA.UDA_ID is NULL			-- Does not exist in UDA Table
				
			DELETE UDA		-- Most likely this will never fire as New Items that are dups should be from Existing SKUs
			FROM SPD_Items I
				Join SPD_Item_Headers H				on I.Item_Header_ID = H.ID
				Join SPD_Batch B					on H.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Join SPD_Item_Master_UDA UDA		on I.Michaels_SKU = UDA.Michaels_SKU 
														and UDA.UDA_ID = 10
			WHERE B.ID = @BatchID			
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and I.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and I.Pre_Priced ='N'			-- UDA defined in Item as NO	
					
			-- **********************************************************************************************
			-- Now the Private Brand Label: Update and Insert
			IF @Debug=1  Print 'Domestic PBL UDA'
			UPDATE SPD_Item_Master_UDA
				Set 
					UDA_Value = coalesce(I.Private_Brand_Label,12)
			FROM SPD_Items I
				Join SPD_Item_Headers H				on I.Item_Header_ID = H.ID
				Join SPD_Batch B					on H.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Join SPD_Item_Master_UDA UDA		on I.Michaels_SKU = UDA.Michaels_SKU 
														and UDA.UDA_ID = 11
			WHERE B.ID = @BatchID
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and I.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
							
			INSERT SPD_Item_Master_UDA ( Michaels_SKU, UDA_ID, UDA_Value )
			Select  
				I.Michaels_SKU
				, 11
				, coalesce(I.Private_Brand_Label,12)
			FROM SPD_Items I
				Join SPD_Item_Headers H				on I.Item_Header_ID = H.ID
				Join SPD_Batch B					on H.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Left Join SPD_Item_Master_UDA UDA	on I.Michaels_SKU = UDA.Michaels_SKU 
														and UDA.UDA_ID = 11
			WHERE 	B.ID = @BatchID
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and I.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and UDA.UDA_ID is NULL			-- Does not exist in UDA Table
		END TRY
		
		BEGIN CATCH
			set @msg = 'Updating Item Master UDA from Domestic... Error Occurred in Insert' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			Rollback Tran
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			RETURN
		END CATCH
		
		-- **********************************************************************************************
		-- Update Vendor Level Info - Use temp table to hold all the skus assoc with the batch
		BEGIN TRY
			set @msg = 'Updating Item Master VENDOR from Domestic New Item. Batch ID: ' + @vcBatchID
			IF @Debug=1  Print @msg
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg

			SELECT
				DI.ID													as Item_ID
				, DI.Item_Header_ID										as Item_Header_ID	  
				, DI.[Michaels_SKU]										as Michaels_SKU
				, coalesce(DH.US_Vendor_Num, DH.Canadian_Vendor_Num,0)	as Vendor_Number
			INTO #DI_SKURecs
			FROM SPD_Items DI
				join SPD_Item_Headers DH	on DI.Item_Header_ID = DH.ID
				join SPD_Batch B			on DH.Batch_ID = B.ID
				join SPD_Workflow_Stage WS	on B.Workflow_Stage_ID = WS.ID
			WHERE B.ID = @BatchID
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and DI.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master

			UPDATE SPD_Item_Master_Vendor
				SET
				Date_Last_Modified = @CurDate
				, Update_User_ID = 0
				,[Harmonized_CodeNumber] = DI.[Harmonized_Code_Number]
				,[Canada_Harmonized_CodeNumber] = DI.[Canada_Harmonized_Code_Number]
				,[Detail_Invoice_Customs_Desc0] = DI.[Detail_Invoice_Customs_Desc]
				,[Component_Material_Breakdown0] = DI.[Component_Material_Breakdown]
				,[Hazardous_Manufacturer_Name] = DI.[Hazardous_Manufacturer_Name]
				,[Hazardous_Manufacturer_City] = DI.[Hazardous_Manufacturer_City]
				,[Hazardous_Manufacturer_State] = DI.[Hazardous_Manufacturer_State]
				,[Hazardous_Manufacturer_Phone] = DI.[Hazardous_Manufacturer_Phone]
				,[Hazardous_Manufacturer_Country] = DI.[Hazardous_Manufacturer_Country]
				, Image_ID = (	Select [File_ID] 
								From [SPD_Items_Files]
								Where item_id = DI.ID and [Item_Type] in( 'D' ,'SB') and [File_Type] = 'IMG' )
				, MSDS_ID = (	Select [File_ID] 
								From [SPD_Items_Files]
								Where item_id = DI.ID and [Item_Type] in( 'D' ,'SB')  and [File_Type] = 'MSDS' )
				, Updated_From_NewItem = 1
			FROM SPD_Item_Master_Vendor V
				Join #DI_SKURecs LU			on  V.Michaels_SKU = LU.Michaels_SKU 
												and V.Vendor_Number = LU.Vendor_Number
				Join SPD_Items DI			on LU.Item_ID = DI.ID

			set @rows = @@Rowcount
			set @msg = '    Records Updated: ' + convert(varchar(20),@rows)
			IF @Debug=1  Print @msg
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
		END TRY
		
		BEGIN CATCH
			set @msg = 'Updating Item Master Vendor from Domestic... Error Occurred in Update' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			Rollback Tran
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			RETURN	
		END CATCH
		
		-- Update Vendor Country Level Info
		BEGIN TRY
			set @msg = 'Updating Item Master Vendor Countries from Domestic New Item. Batch ID: ' + @vcBatchID
			IF @Debug=1  Print @msg
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg

			UPDATE SPD_Item_Master_Vendor_Countries
			SET
				Date_Last_Modified = @CurDate
				, Update_User_ID = 0
				, [Each_Case_Height] = DI.[Each_Case_Height]
				, [Each_Case_Width] = DI.[Each_Case_Width]
				, [Each_Case_Length] = DI.[Each_Case_Length]
				, [Each_Case_Weight] = DI.[Each_Case_Weight]
				, [Each_LWH_UOM] = 'IN'
				, [Each_Weight_UOM] = 'LB'
				, [Inner_Case_Height] = DI.[inner_case_height]
				, [Inner_Case_Width] = DI.[inner_case_width]
				, [Inner_Case_Length] = DI.[inner_case_length]
				, [Inner_Case_Weight] = DI.[inner_case_weight]
				, [Inner_LWH_UOM] = 'IN'
				, [Inner_Weight_UOM] = 'LB'
				, [Master_Case_Height] = DI.[master_case_height]
				, [Master_Case_Width] = DI.[master_case_width]
				, [Master_Case_Length] = DI.[master_case_length]
				, [Master_Case_Weight] = DI.[master_case_weight]
				, [Master_LWH_UOM] = 'IN'
				, [Master_Weight_UOM] = 'LB'
				, Updated_From_NewItem = 1
			FROM SPD_Item_Master_Vendor_Countries VC
				Join #DI_SKURecs LU			on  VC.Michaels_SKU = LU.Michaels_SKU 
												and VC.Vendor_Number = LU.Vendor_Number
				Join SPD_Items DI			on LU.Item_ID = DI.ID
												and VC.Country_Of_Origin = DI.[country_of_origin]
		END TRY

		BEGIN CATCH
			set @msg = 'Updating Item Master Vendor Countries from Domestic... Error Occurred in Update' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			Rollback Tran
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			RETURN	
		END CATCH
		
		Drop table #DI_SKURecs
		
		-- **********************************************************************************************
		-- Update Multilingual Info pt 1
		BEGIN TRY
			set @msg = 'Updating Item Master Languages from Domestic Item Languages Table. Batch ID: ' + @vcBatchID
			IF @Debug=1  Print @msg
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg

			-- FIRST, Update the Langauge table, in case the languages already exist.
			-- This should never be the case, but adding the code here in case we need to support it later.
			UPDATE SPD_Item_Master_Languages
			SET Translation_Indicator = SIL.Translation_Indicator,
				Description_Short = SIL.Description_Short,
				Description_Long = SIL.Description_Long,
				Modified_User_ID = 0,
				Date_Requested = getDate(),
				Date_Last_Modified = getDate()
			FROM SPD_Item_Master_Languages as SIML
			INNER JOIN SPD_Items as DI on SIML.Michaels_SKU = DI.Michaels_SKU
			INNER JOIN SPD_Item_Headers DH	on DI.Item_Header_ID = DH.ID
			INNER JOIN SPD_Item_Languages SIL on DI.ID = SIL.Item_ID and SIML.Language_Type_ID = SIL.Language_Type_ID
			WHERE DH.Batch_ID = @BatchID

			-- INSERT new records into the Langauge table
			INSERT INTO SPD_Item_Master_Languages (Michaels_SKU, Language_Type_ID, Translation_Indicator, Description_Short, Description_Long, Date_Requested, Created_User_ID, Date_Created, Modified_User_ID, Date_Last_Modified)
			Select DI.Michaels_SKU, SIL.Language_Type_ID, SIL.Translation_Indicator, SIL.Description_Short, SIL.Description_Long, GetDate(), 0, GetDate(), 0, GetDate()
			FROM SPD_Items as DI
			INNER JOIN SPD_Item_Headers as DH on DI.Item_Header_ID = DH.ID
			INNER JOIN SPD_Item_Languages as SIL on DI.ID = SIL.Item_ID
			LEFT JOIN SPD_Item_Master_Languages as SIML on SIML.Michaels_SKU = DI.Michaels_SKU AND SIML.Language_Type_ID = SIL.Language_Type_ID
			WHERE SIML.ID is null AND DH.Batch_ID = @BatchID
			
		END TRY
		
		BEGIN CATCH
			set @msg = 'Updating Item Master Languages from Domestic Item Languages Table pt 1... Error Occurred in Update' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			Rollback Tran
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			RETURN	
		END CATCH
		
		-- **********************************************************************************************
		-- Update Multilingual Info pt 2
		BEGIN TRY
			set @msg = 'Updating Item Master Languages from Domestic Item Languages Table pt 2. Batch ID: ' + @vcBatchID
			IF @Debug=1  Print @msg
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg

			-- FIRST, Update the Langauge table, in case the languages already exist.
			-- This should never be the case, but adding the code here in case we need to support it later.
			UPDATE SPD_Item_Master_Languages_Supplier
			SET Package_Language_Indicator = SIL.Package_Language_Indicator,
				Modified_User_ID = 0,
				Date_Last_Modified = getDate()
			FROM SPD_Item_Master_Languages_Supplier as SIML
			INNER JOIN SPD_Items as DI on SIML.Michaels_SKU = DI.Michaels_SKU
			INNER JOIN SPD_Item_Headers DH	on DI.Item_Header_ID = DH.ID
			INNER JOIN SPD_Item_Languages SIL on DI.ID = SIL.Item_ID and SIML.Language_Type_ID = SIL.Language_Type_ID AND SIML.Vendor_Number = coalesce(DH.US_Vendor_Num, DH.Canadian_Vendor_Num,0)
			WHERE DH.Batch_ID = @BatchID

			-- INSERT new records into the Langauge table
			INSERT INTO SPD_Item_Master_Languages_Supplier (Michaels_SKU, Vendor_Number, Language_Type_ID, Package_Language_Indicator, Created_User_ID, Date_Created, Modified_User_ID, Date_Last_Modified)
			Select DI.Michaels_SKU, coalesce(DH.US_Vendor_Num, DH.Canadian_Vendor_Num,0), SIL.Language_Type_ID, SIL.Package_Language_Indicator, 0, GetDate(), 0, GetDate()
			FROM SPD_Items as DI
			INNER JOIN SPD_Item_Headers as DH on DI.Item_Header_ID = DH.ID
			INNER JOIN SPD_Item_Languages as SIL on DI.ID = SIL.Item_ID
			LEFT JOIN SPD_Item_Master_Languages_Supplier as SIML on SIML.Michaels_SKU = DI.Michaels_SKU AND SIML.Vendor_Number = coalesce(DH.US_Vendor_Num, DH.Canadian_Vendor_Num,0) AND SIML.Language_Type_ID = SIL.Language_Type_ID
			WHERE SIML.ID is null AND DH.Batch_ID = @BatchID
			
		END TRY
		
		BEGIN CATCH
			set @msg = 'Updating Item Master Languages from Domestic Item Languages Table pt 2... Error Occurred in Update' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			Rollback Tran
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			RETURN	
		END CATCH

		--MWM:LCR
		---- Update SPD_Item_Translation_Required
		--Set @msg = 'Adding items to SPD_Item_Translation_Required from Domestic New Item. Batch: ' + @vcBatchID
		--IF @Debug=1  Print @msg
		--EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
		--BEGIN TRY
		--	Insert into SPD_Item_Translation_Required
		--	(Michaels_SKU)
		--	Select distinct sku.Michaels_SKU
		--	FROM [SPD_Item_Master_SKU] SKU
		--		Join SPD_Items DI			on SKU.[Michaels_SKU] = DI.Michaels_SKU
		--		join SPD_Item_Headers DH	on DI.Item_Header_ID = DH.ID
		--		join SPD_Batch B			on DH.Batch_ID = B.ID
		--		join SPD_Workflow_Stage WS	on B.Workflow_Stage_ID = WS.ID
		--	WHERE 	B.ID = @BatchID
		--		and DI.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
		--		and WS.Stage_Type_id = 4	-- ONLY COMPLETED BATCHES PLEASE
		--		and ltrim(rtrim(SKU.SKU_Group)) In ('US AND CANADA','CANADA ONLY')
		--		and sku.POG_Start_Date is not null
		--		and not exists
		--		(
		--			Select 1 from SPD_Item_Translation_Required R where R.Michaels_SKU = sku.Michaels_SKU
		--		)

		--	set @rows = @@Rowcount
		--	set @msg = '    Records Inserted: ' + convert(varchar(20),@rows)
		--	IF @Debug=1  Print @msg
		--	EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
		--END TRY
		
		--BEGIN CATCH
		--	set @msg = 'Adding items to SPD_Item_Translation_Required SKU from Domestic... Error Occurred in Insert' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
		--	Rollback Tran
		--	EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
		--	EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
		--	RETURN
		--END CATCH

	END
	
	ELSE
	
	BEGIN
		-- ****************************************************************************
		-- From Import Update
		-- ****************************************************************************
		-- Update SKU Level Info
		Set @msg = 'Updating Item Master SKU from Import New Item. Batch: ' + @vcBatchID
		IF @Debug=1  Print @msg
		EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg

		Select @PhytoCertID = isNull(id,0) from spd_metadata_column mc 
		where MC.MetaData_table_id = 1 and MC.Column_Name = 'FumigationCertificate'
		and isNull(MC.Track_History,0) = 1

		Select @PhytoTempShipID = isNull(id,0) from spd_metadata_column mc 
		where MC.MetaData_table_id = 1 and MC.Column_Name = 'PhytoTemporaryShipment'
		and isNull(MC.Track_History,0) = 1



		BEGIN TRY


					--insert history columns
			if @PhytoCertID > 0
			BEGIN
				Insert into @SCFH
				(Michaels_SKU, 
				Metadata_Column_ID, 
				New_Value)
				Select distinct
				SKU.Michaels_SKU, 
				@PhytoCertID, 
				II.[FumigationCertificate]
				FROM [SPD_Item_Master_SKU] SKU
					Join SPD_Import_Items II	on SKU.[Michaels_SKU] = II.MichaelsSKU
					join SPD_Batch B			on II.Batch_ID = B.ID
					join SPD_Workflow_Stage WS	on B.Workflow_Stage_ID = WS.ID
				WHERE B.ID = @BatchID
					and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
					and II.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
			END

			--insert history columns
			if @PhytoTempShipID > 0
			BEGIN
				Insert into @SCFH
				(Michaels_SKU, 
				Metadata_Column_ID, 
				New_Value)
				Select distinct
				SKU.Michaels_SKU, 
				@PhytoTempShipID, 
				II.[PhytoTemporaryShipment]
				FROM [SPD_Item_Master_SKU] SKU
					Join SPD_Import_Items II	on SKU.[Michaels_SKU] = II.MichaelsSKU
					join SPD_Batch B			on II.Batch_ID = B.ID
					join SPD_Workflow_Stage WS	on B.Workflow_Stage_ID = WS.ID
				WHERE B.ID = @BatchID
					and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
					and II.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
			END


			Insert into  SPD_Change_Field_History
			(Michaels_SKU, Batch_ID, Metadata_Column_ID, Old_Value, New_Value)
			Select Distinct
			Michaels_SKU, @BatchID, Metadata_Column_ID, Null, New_Value
			from @SCFH SCFH
			where not exists
			(
				Select 1 from SPD_Change_Field_History SCFH2
				where SCFH2.Michaels_SKU = SCFH.Michaels_SKU
				and SCFH2.Batch_ID = @BatchID
				and SCFH2.Metadata_Column_ID = SCFH.Metadata_Column_ID
			)
			and New_Value is not null

			UPDATE [SPD_Item_Master_SKU]
				SET 
				Date_Last_Modified = @CurDate
				, Update_User_ID = 0
				, Planogram_Name = II.PlanogramName
				,[Buyer] = II.[Buyer]
				,[Buyer_Fax] = II.[Fax]
				,[Buyer_Email] = II.[Email]
				,[Season] = II.[Season]
				,CoinBattery = II.CoinBattery
				,[TSSA] = II.TSSA
				,[CSA] = II.CSA
				,[UL] = II.UL
				,[Licence_Agreement] = II.[LicenceAgreement]
				,[Fumigation_Certificate] = II.[FumigationCertificate]
				,[PhytoTemporaryShipment] = II.[PhytoTemporaryShipment]
				,[KILN_Dried_Certificate] = II.[KILNDriedCertificate]
				,[China_Com_Inspec_Num_And_CCIB_Stickers] = II.[ChinaComInspecNumAndCCIBStickers]
				,[Original_Visa] = II.[OriginalVisa]
				,[Textile_Declaration_Mid_Code] = II.[TextileDeclarationMidCode]
				,[Quota_Charge_Statement] = II.[QuotaChargeStatement]
				,[MSDS] = II.[MSDS]
				,[TSCA] = II.[TSCA]
				,[Drop_Bal_lTest_Cert] = II.[DropBallTestCert]
				,[Man_Medical_Device_Listing] = II.[ManMedicalDeviceListing]
				,[Man_FDA_Registration] = II.[ManFDARegistration]
				,[Copy_Right_Indemnification] = II.[CopyRightIndemnification]
				,[Fish_Wild_Life_Cert] = II.[FishWildLifeCert]
				,[Proposition_65_Label_Req] = II.[Proposition65LabelReq]
				,[CCCR] = II.[CCCR]
				,[Formaldehyde_Compliant] = II.[FormaldehydeCompliant]
				,[RMS_Sellable] = II.[RMS_Sellable]
				,[RMS_Orderable] = II.[RMS_Orderable]
				,[RMS_Inventory] = II.[RMS_Inventory]
				,[Store_Total] = II.[Store_Total]
				,[Displayer_Cost] = II.[Displayer_Cost]
				,Product_Cost = II.Product_Cost
				,[Item_Type] = II.[PackItemIndicator]
				,[Pack_Item_Indicator] = Case WHEN dbo.udf_SPD_PackItemLeft2(II.[PackItemIndicator]) in ('D','DP','SB')
												THEN 'Y' ELSE 'N' end
				,QuoteReferenceNumber = II.QuoteReferenceNumber
				,Customs_Description = II.Customs_Description
				, Updated_From_NewItem = 1
			FROM [SPD_Item_Master_SKU] SKU
				Join SPD_Import_Items II	on SKU.[Michaels_SKU] = II.MichaelsSKU
				join SPD_Batch B			on II.Batch_ID = B.ID
				join SPD_Workflow_Stage WS	on B.Workflow_Stage_ID = WS.ID
			WHERE B.ID = @BatchID
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and II.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master

			set @rows = @@Rowcount
			set @msg = '    Records Updated: ' + convert(varchar(20),@rows)
			IF @Debug=1  Print @msg
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
		END TRY

		BEGIN CATCH
			set @msg = 'Updating Item Master SKU from Import... Error Occurred in Update' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			Rollback Tran
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			RETURN	
		END CATCH

		-- Update UDA Level Data.  This should be an Insert as the data is not returned
		Set @msg = 'Updating Item Master UDA from Import New Item. Batch: ' + @vcBatchID
		IF @Debug=1  Print @msg
		EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
		BEGIN TRY
			-- ***************************************************************************
			-- First the Tax info: Update / Insert
			IF @Debug=1  Print 'Import Tax UDA'
			UPDATE SPD_Item_Master_UDA
				Set 
					UDA_ID = I.TaxUDA
					, UDA_Value = I.TaxValueUDA
			From SPD_Import_Items I
				Join SPD_Item_Master_UDA UDA		on I.MichaelsSKU = UDA.Michaels_SKU 
														and UDA.UDA_ID between 1 and 9 
				Join SPD_Batch B					on I.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
			WHERE B.ID = @BatchID
				and I.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE

			INSERT SPD_Item_Master_UDA ( Michaels_SKU, UDA_ID, UDA_Value )
			Select  
				I.MichaelsSKU
				, I.TaxUDA
				, I.TaxValueUDA
			From SPD_Import_Items I
				Join SPD_Batch B					on I.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Left Join SPD_Item_Master_UDA UDA	on I.MichaelsSKU = UDA.Michaels_SKU 
													and UDA.UDA_ID between 1 and 9 
			WHERE 	B.ID = @BatchID
				and I.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and UDA.UDA_ID is NULL

			-- ***************************************************************************
			-- Now the PrePriced: Update, Insert, Delete
			IF @Debug=1  Print 'Import PrePriced UDA'
			UPDATE SPD_Item_Master_UDA
				Set UDA_Value = I.PrePricedUDA
			FROM SPD_Import_Items I
				Join SPD_Batch B					on I.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Join SPD_Item_Master_UDA UDA		on I.MichaelsSKU = UDA.Michaels_SKU 
														and UDA.UDA_ID = 10
			WHERE B.ID = @BatchID			
				and I.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and I.PrePriced ='Y'			-- UDA defined in Item
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
																		
			INSERT SPD_Item_Master_UDA ( Michaels_SKU, UDA_ID, UDA_Value )
			Select  
				I.MichaelsSKU
				, 10
				, I.PrePricedUDA
			FROM SPD_Import_Items I
				Join SPD_Batch B					on I.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Left Join SPD_Item_Master_UDA UDA	on I.MichaelsSKU = UDA.Michaels_SKU 
														and UDA.UDA_ID = 10
			WHERE 	B.ID = @BatchID
				and I.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and I.PrePriced ='Y'			-- UDA defined in Item
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and UDA.UDA_ID is NULL			-- Does not exist in UDA Table

			DELETE UDA		-- Most likely this will never fire as New Items that are dups should be from Existing SKUs
			FROM SPD_Import_Items I
				Join SPD_Batch B					on I.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Join SPD_Item_Master_UDA UDA		on I.MichaelsSKU = UDA.Michaels_SKU 
														and UDA.UDA_ID = 10
			WHERE B.ID = @BatchID			
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and I.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and I.PrePriced ='N'			-- UDA defined in Item as NO	
							
			-- ***************************************************************************
			-- Now the Private Brand Label: Update and Insert
			IF @Debug=1  Print 'Import PBL UDA'
			UPDATE SPD_Item_Master_UDA
				Set 
					UDA_Value = coalesce(I.Private_Brand_Label,12)
			FROM SPD_Import_Items I
				Join SPD_Batch B					on I.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Join SPD_Item_Master_UDA UDA		on I.MichaelsSKU = UDA.Michaels_SKU 
														and UDA.UDA_ID = 11
			WHERE B.ID = @BatchID
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and I.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master

			INSERT SPD_Item_Master_UDA ( Michaels_SKU, UDA_ID, UDA_Value )
			Select  
				I.MichaelsSKU
				, 11
				, coalesce(I.Private_Brand_Label,12)
			From SPD_Import_Items I
				Join SPD_Batch B					on I.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Left Join SPD_Item_Master_UDA UDA	on I.MichaelsSKU = UDA.Michaels_SKU 
														and UDA.UDA_ID = 11
			WHERE 	B.ID = @BatchID
				and I.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and UDA.UDA_ID is NULL			-- Does not exist in UDA Table
		END TRY
		
		BEGIN CATCH
			set @msg = 'Updating Item Master UDA from Import... Error Occurred in Insert' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			Rollback Tran
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			RETURN
		END CATCH
		
		-- ***************************************************************************
		-- Update Vendor Level Info
		Set @msg = 'Updating Item Master Vendor from Import New Item. Batch: ' + @vcBatchID
		IF @Debug=1  Print @msg
		EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
		BEGIN TRY
			UPDATE SPD_Item_Master_Vendor
				SET
				Date_Last_Modified = @CurDate
				, Update_User_ID = 0
				, Hazardous_Manufacturer_Name = II.HazMatMFGName
				, Hazardous_Manufacturer_City = II.HazMatMFGCity
				, Hazardous_Manufacturer_State = II.HazMatMFGState
				, Hazardous_Manufacturer_Phone = II.HazMatMFGPhone
				, Hazardous_Manufacturer_Country = II.HazMatMFGCountry
				, Image_ID = (	Select [File_ID] 
								From [SPD_Items_Files]
								Where item_id = II.ID and [Item_Type] = 'I' and [File_Type] = 'IMG' )
				, MSDS_ID = (	Select [File_ID] 
								From [SPD_Items_Files]
								Where item_id = II.ID and [Item_Type] = 'I' and [File_Type] = 'MSDS' )
				,[PaymentTerms] = II.[PaymentTerms]
				,[Days] = II.[Days]
				,[Vendor_Min_Order_Amount] = case when isNumeric(II.[VendorMinOrderAmount]) = 1 then II.[VendorMinOrderAmount] else NULL END
				,[Vendor_Name] = II.[VendorName]
				,[Vendor_Address1] = II.[VendorAddress1]
				,[Vendor_Address2] = II.[VendorAddress2]
				,[Vendor_Address3] = II.[VendorAddress3]
				,[Vendor_Address4] = II.[VendorAddress4]
				,[Vendor_Contact_Name] = II.[VendorContactName]
				,[Vendor_Contact_Phone] = II.[VendorContactPhone]
				,[Vendor_Contact_Email] = II.[VendorContactEmail]
				,[Vendor_Contact_Fax] = II.[VendorContactFax]
				,[Manufacture_Name] = II.[ManufactureName]
				,[Manufacture_Address1] = II.[ManufactureAddress1]
				,[Manufacture_Address2] = II.[ManufactureAddress2]
				,[Manufacture_Contact] = II.[ManufactureContact]
				,[Manufacture_Phone] = II.[ManufacturePhone]
				,[Manufacture_Email] = II.[ManufactureEmail]
				,[Manufacture_Fax] = II.[ManufactureFax]
				,[Agent_Contact] = II.[AgentContact]
				,[Agent_Phone] = II.[AgentPhone]
				,[Agent_Email] = II.[AgentEmail]
				,[Agent_Fax] = II.[AgentFax]
				,[Harmonized_CodeNumber] = II.[HarmonizedCodeNumber]
				,[Detail_Invoice_Customs_Desc] = II.[DetailInvoiceCustomsDesc]
				,[Component_Material_Breakdown] = II.[ComponentMaterialBreakdown]
				,[Component_Construction_Method] = II.[ComponentConstructionMethod]
				,[Individual_Item_Packaging] = II.[IndividualItemPackaging]
				,[FOB_Shipping_Point] =  case when isNumeric(II.[FOBShippingPoint]) = 1 then II.[FOBShippingPoint] else NULL END
				,[Duty_Percent] = case when isNumeric(II.[DutyPercent]) = 1 then II.[DutyPercent] else NULL END
				,[Duty_Amount] = case when isNumeric(II.[DutyAmount]) = 1 then II.[DutyAmount] else NULL END
				,[Supp_Tariff_Percent] = case when isNumeric(II.[SuppTariffPercent]) = 1 then II.[SuppTariffPercent] else NULL END
				,[Supp_Tariff_Amount] = case when isNumeric(II.[SuppTariffAmount]) = 1 then II.[SuppTariffAmount] else NULL END
				,[Additional_Duty_Comment] = II.[AdditionalDutyComment]
				,[Additional_Duty_Amount] = case when isNumeric(II.[AdditionalDutyAmount]) = 1 and II.[AdditionalDutyAmount] not like '-79228%' then II.[AdditionalDutyAmount] else NULL END
				,[Ocean_Freight_Amount] = case when isNumeric(II.[OceanFreightAmount]) = 1 then II.[OceanFreightAmount] else NULL END
				,[Ocean_Freight_Computed_Amount] = case when isNumeric(II.[OceanFreightComputedAmount]) = 1 then II.[OceanFreightComputedAmount] else NULL END
				,[Agent_Commission_Percent] = case when isNumeric(II.[AgentCommissionPercent]) = 1 then II.[AgentCommissionPercent] else NULL END
				,[Agent_Commission_Amount] = case when isNumeric(II.[AgentCommissionAmount]) = 1 then II.[AgentCommissionAmount] else NULL END
				,[Other_Import_Costs_Percent] = case when isNumeric(II.[OtherImportCostsPercent]) = 1 then II.[OtherImportCostsPercent] else NULL END
				,[Other_Import_Costs_Amount] = case when isNumeric(II.[OtherImportCostsAmount]) = 1 then II.[OtherImportCostsAmount] else NULL END
				,[Packaging_Cost_Amount] = case when isNumeric(II.[PackagingCostAmount]) = 1 then II.[PackagingCostAmount] else NULL END
				,[Warehouse_Landed_Cost] = case when isNumeric(II.[WarehouseLandedCost]) = 1 then II.[WarehouseLandedCost] else NULL END
				,[Purchase_Order_Issued_To] = II.[PurchaseOrderIssuedTo]
				,[Shipping_Point] = Upper(II.[ShippingPoint])
				,[Vendor_Comments] = II.[VendorComments]
				,[Freight_Terms] = II.[FreightTerms]
				,[Outbound_Freight] = case when isNumeric(II.[OutboundFreight]) = 1 then II.[OutboundFreight] else NULL END
				,[Nine_Percent_Whse_Charge] = case when isNumeric(II.[NinePercentWhseCharge]) = 1 then II.[NinePercentWhseCharge] else NULL END
				,[Total_Store_Landed_Cost] = case when isNumeric(II.[TotalStoreLandedCost]) = 1 then II.[TotalStoreLandedCost] else NULL END
				,Vendor_Or_Agent = Case when A.Vendor_Number is NULL then 'V' else 'A' end
				,Agent_Type = Case when A.Vendor_Number is NULL then NULL else A.Agent end			
				,Updated_From_NewItem = 1
				--,MinimumOrderQuantity = case when isNumeric(II.[MinimumOrderQuantity]) = 1 then II.[MinimumOrderQuantity] else NULL END
				,ProductIdentifiesAsCosmetic = II.[ProductIdentifiesAsCosmetic]
			FROM SPD_Item_Master_Vendor V
				Join SPD_Import_Items II	on V.[Michaels_SKU] = II.MichaelsSKU
											and V.Vendor_Number = II.VendorNumber
				join SPD_Batch B			on II.Batch_ID = B.ID
				join SPD_Workflow_Stage WS	on B.Workflow_Stage_ID = WS.ID
				left join SPD_Item_Master_Vendor_Agent A on V.Vendor_Number =  A.Vendor_Number
			WHERE B.ID = @BatchID
				and II.Valid_Existing_SKU = 0		-- Make sure that Item is new and not loaded initially from the Item Master
				and WS.Stage_Type_id = 4			-- ONLY COMPLETED BATCHES PLEASE

			set @rows = @@Rowcount
			IF @Debug=1  Print 'Records Updated'
			set @msg = '    Records Updated: ' + convert(varchar(20),@rows)
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
		END TRY
		BEGIN CATCH
			set @msg = 'Updating Item Master Vendor from Import... Error Occurred in Update' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			Rollback Tran
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			RETURN		
		END CATCH

		-- Update Vendor Country Level Info
		BEGIN TRY
			set @msg = 'Updating Item Master Vendor Countries from Import New Item. Batch ID: ' + @vcBatchID
			IF @Debug=1  Print @msg
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg

			UPDATE SPD_Item_Master_Vendor_Countries
			SET
				Date_Last_Modified = @CurDate
				, Update_User_ID = 0
				, [Each_Case_Height] = II.[eachheight]
				, [Each_Case_Width] = II.[eachwidth]
				, [Each_Case_Length] = II.[eachlength]
				, [Each_Case_Weight] = II.[eachweight]
				, [Each_LWH_UOM] = 'IN'
				, [Each_Weight_UOM] = 'LB'
				, [Each_Case_Cube] = II.[cubicfeeteach]
				, [Inner_Case_Height] = II.[reshippableinnercartonheight]
				, [Inner_Case_Width] = II.[reshippableinnercartonwidth]
				, [Inner_Case_Length] = II.[reshippableinnercartonlength]
				--, [Inner_Case_Weight] = II.[eachpiecenetweightlbsperounce]
				, [Inner_Case_Weight] = II.ReshippableInnerCartonWeight
				, [Inner_LWH_UOM] = 'IN'
				, [Inner_Weight_UOM] = 'LB'
				, [Master_Case_Height] = II.[mastercartondimensionsheight]
				, [Master_Case_Width] = II.[mastercartondimensionswidth]
				, [Master_Case_Length] = II.[mastercartondimensionslength]
				, [Master_Case_Weight] = II.[weightmastercarton]
				, [Master_LWH_UOM] = 'IN'
				, [Master_Weight_UOM] = 'LB'
				, Updated_From_NewItem = 1
			FROM SPD_Item_Master_Vendor_Countries VC
				Join SPD_Import_Items II	on VC.[Michaels_SKU] = II.MichaelsSKU
												and VC.Vendor_Number = II.VendorNumber
												and VC.Country_Of_Origin = II.[CountryOfOrigin]
				join SPD_Batch B			on II.Batch_ID = B.ID
				join SPD_Workflow_Stage WS	on B.Workflow_Stage_ID = WS.ID
			WHERE B.ID = @BatchID
				and II.Valid_Existing_SKU = 0		-- Make sure that Item is new and not loaded initially from the Item Master
				and WS.Stage_Type_id = 4			-- ONLY COMPLETED BATCHES PLEASE
		END TRY

		BEGIN CATCH
			set @msg = 'Updating Item Master Vendor Countries from Import... Error Occurred in Update' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			Rollback Tran
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			RETURN	
		END CATCH
		
		/* ******************************************************************************************************************* */
		-- Update Vendor Multiline info for above records where its the Updated_From_NewItem is at 1
		/* ******************************************************************************************************************* */
		BEGIN TRY
			declare @desc varchar(max), @SKU varchar(30), @VendorNo bigint, @break varchar(max), @method varchar(max)
			declare @r0 varchar(1000), @r1 varchar(1000), @r2 varchar(1000), @r3 varchar(1000), @r4 varchar(1000), @r5 varchar(1000)
			declare @t1 table  (ElementID int, Element varchar(max) )
			declare @c1 int, @c2 int, @c3 int
			select @c1= 0, @c2=0, @c3=0

			DECLARE row CURSOR FOR 
				SELECT 
					V.[Michaels_SKU]
					,V.[Vendor_Number]
					,V.[Detail_Invoice_Customs_Desc]
					,V.[Component_Material_Breakdown]
					,V.[Component_Construction_Method]
				FROM [dbo].[SPD_Item_Master_Vendor] V
					Join SPD_Import_Items II	on V.[Michaels_SKU] = II.MichaelsSKU
													and V.Vendor_Number = II.VendorNumber
													and II.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
					join SPD_Batch B			on II.Batch_ID = B.ID
					join SPD_Workflow_Stage WS	on B.Workflow_Stage_ID = WS.ID
				WHERE WS.Stage_Type_id = 4	-- ONLY COMPLETED BATCHES PLEASE
					and B.ID = @BatchID
					and (  [Detail_Invoice_Customs_Desc] is not null
						or [Component_Material_Breakdown] is not null
						or [Component_Construction_Method] is not null
						)
					and Updated_From_NewItem = 1	-- Been Update from New Item
					
			OPEN row
			FETCH NEXT FROM row INTO @SKU, @VendorNo, @desc, @break, @method;
			WHILE @@FETCH_STATUS = 0
			BEGIN
				UPDATE [SPD_Item_Master_Vendor]
					SET Updated_From_NewItem = 2	-- Flag that we have updated the multiline fields
				WHERE [Michaels_SKU] = @SKU and [Vendor_Number] = @VendorNo
					
				IF @desc is not NULL
				BEGIN 
					INSERT @t1
						Select ElementID, Element FROM SPLIT(@desc, '<MULTILINEDELIMITER>')
					
					-- Force the variables to be '' for each pass
					select @r0 = '',@r1 = '',@r2 = '',@r3 = '',@r4 = '',@r5 = ''
					Select @r0 = left(Element,1000) from @t1 where ElementID = 1
					Select @r1 = left(Element,1000) from @t1 where ElementID = 2
					Select @r2 = left(Element,1000) from @t1 where ElementID = 3
					Select @r3 = left(Element,1000) from @t1 where ElementID = 4
					Select @r4 = left(Element,1000) from @t1 where ElementID = 5
					Select @r5 = left(Element,1000) from @t1 where ElementID = 6

					DELETE FROM @t1

					Update [SPD_Item_Master_Vendor] 
						SET 
						  [Detail_Invoice_Customs_Desc0] = left(Coalesce(@r0,''), 1000)
						, [Detail_Invoice_Customs_Desc1] = left(Coalesce(@r1,''), 1000)
						, [Detail_Invoice_Customs_Desc2] = left(Coalesce(@r2,''), 1000)
						, [Detail_Invoice_Customs_Desc3] = left(Coalesce(@r3,''), 1000)
						, [Detail_Invoice_Customs_Desc4] = left(Coalesce(@r4,''), 1000)
						, [Detail_Invoice_Customs_Desc5] = left(Coalesce(@r5,''), 1000)
					--FROM [SPD_Item_Master_Vendor]
					WHERE [Michaels_SKU] = @SKU and [Vendor_Number] = @VendorNo
					SET @c1 = @c1 + 1	
				END
				
				IF @break is not NULL
				BEGIN

					INSERT @t1
						Select ElementID, Element FROM SPLIT(@break, '<MULTILINEDELIMITER>')

					select @r0 = '',@r1 = '',@r2 = '',@r3 = '',@r4 = '',@r5 = ''
					Select @r0 = left(Element,1000) from @t1 where ElementID = 1
					Select @r1 = left(Element,1000) from @t1 where ElementID = 2
					Select @r2 = left(Element,1000) from @t1 where ElementID = 3
					Select @r3 = left(Element,1000) from @t1 where ElementID = 4
					Select @r4 = left(Element,1000) from @t1 where ElementID = 5

					DELETE FROM @t1
					
					Update [SPD_Item_Master_Vendor] 
						SET 
  						  [Component_Material_Breakdown0] = left(coalesce(@r0,''), 1000)
						, [Component_Material_Breakdown1] = left(coalesce(@r1,''), 1000)
						, [Component_Material_Breakdown2] = left(coalesce(@r2,''), 1000)
						, [Component_Material_Breakdown3] = left(coalesce(@r3,''), 1000)
						, [Component_Material_Breakdown4] = left(coalesce(@r4,''), 1000)
					--FROM [SPD_Item_Master_Vendor]
					WHERE [Michaels_SKU] = @SKU and [Vendor_Number] = @VendorNo
					SET @c2 = @c2 + 1	
				END		

				IF @method is not NULL
				BEGIN
					Insert @t1
						Select ElementID, Element FROM SPLIT(@method, '<MULTILINEDELIMITER>')

					select @r0 = '',@r1 = '',@r2 = '',@r3 = '',@r4 = '',@r5 = ''
					Select @r0 = left(Element,1000) from @t1 where ElementID = 1
					Select @r1 = left(Element,1000) from @t1 where ElementID = 2
					Select @r2 = left(Element,1000) from @t1 where ElementID = 3
					Select @r3 = left(Element,1000) from @t1 where ElementID = 4
					delete from @t1
					
					Update [SPD_Item_Master_Vendor] 
						SET 
						  [Component_Construction_Method0] = left(coalesce(@r0,''), 1000)
						, [Component_Construction_Method1] = left(coalesce(@r1,''), 1000)
						, [Component_Construction_Method2] = left(coalesce(@r2,''), 1000)
						, [Component_Construction_Method3] = left(coalesce(@r3,''), 1000)
					--FROM [SPD_Item_Master_Vendor]
					WHERE [Michaels_SKU] = @SKU and [Vendor_Number] = @VendorNo
					SET @c3 = @c3 + 1	
				END	
				
				FETCH NEXT FROM row INTO @SKU, @VendorNo, @desc, @break, @method;
			END	
			CLOSE row;
			DEALLOCATE row;
			DELETE FROM @t1

			IF @Debug=1  Print 'MultiLines were Updated'
			set @msg = '   Total Count of Multiline Updates: ' + convert(varchar(20),(@c1 + @c2 + @c3))
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
		END TRY
		BEGIN CATCH
			set @msg = 'Updating Item Master Vendor MultiLines... Error Occurred in Update' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			IF @Debug=1  Print @msg
			Rollback Tran
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			CLOSE row;
			DEALLOCATE row;
			RETURN	
		END CATCH
		
		
		-- **********************************************************************************************
		-- Update Multilingual Info
		BEGIN TRY
			set @msg = 'Updating Item Master Languages from Import Item Languages Table pt 1. Batch ID: ' + @vcBatchID
			IF @Debug=1  Print @msg
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg

			-- FIRST, Update the Langauge table, in case the languages already exist.
			-- This should never be the case, but adding the code here in case we need to support it later.
			UPDATE SPD_Item_Master_Languages
			SET Translation_Indicator = SIIL.Translation_Indicator,
				Description_Short = SIIL.Description_Short,
				Description_Long = SIIL.Description_Long,
				Modified_User_ID = 0,
				Date_Requested = getDate(),
				Date_Last_Modified = getDate()
			FROM SPD_Item_Master_Languages as SIML
			INNER JOIN SPD_Import_Items as II on SIML.Michaels_SKU = II.MichaelsSKU
			INNER JOIN SPD_Import_Item_Languages SIIL on II.ID = SIIL.Import_Item_ID and SIML.Language_Type_ID = SIIL.Language_Type_ID
			WHERE II.Batch_ID = @BatchID

			-- INSERT new records into the Langauge table
			INSERT INTO SPD_Item_Master_Languages (Michaels_SKU, Language_Type_ID, Translation_Indicator, Description_Short, Description_Long, Date_Requested, Created_User_ID, Date_Created, Modified_User_ID, Date_Last_Modified)
			Select II.MichaelsSKU, SIIL.Language_Type_ID, SIIL.Translation_Indicator, SIIL.Description_Short, SIIL.Description_Long, GetDate(), 0, GetDate(), 0, GetDate()
			FROM SPD_Import_Items as II
			INNER JOIN SPD_Import_Item_Languages as SIIL on II.ID = SIIL.Import_Item_ID
			LEFT JOIN SPD_Item_Master_Languages as SIML on SIML.Michaels_SKU = II.MichaelsSKU AND SIML.Language_Type_ID = SIIL.Language_Type_ID
			WHERE SIML.ID is null AND II.Batch_ID = @BatchID

		END TRY
		
		BEGIN CATCH
			set @msg = 'Updating Item Master Languages from Import Item Languages Table pt 1... Error Occurred in Update' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			Rollback Tran
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			RETURN	
		END CATCH
		
		-- **********************************************************************************************
		-- Update Multilingual Info
		BEGIN TRY
			set @msg = 'Updating Item Master Languages from Import Item Languages Table pt 2. Batch ID: ' + @vcBatchID
			IF @Debug=1  Print @msg
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg

			-- FIRST, Update the Langauge table, in case the languages already exist.
			-- This should never be the case, but adding the code here in case we need to support it later.
			UPDATE SPD_Item_Master_Languages_Supplier
			SET Package_Language_Indicator = SIIL.Package_Language_Indicator,
				Modified_User_ID = 0,
				Date_Last_Modified = getDate()
			FROM SPD_Item_Master_Languages_Supplier as SIML
			INNER JOIN SPD_Import_Items as II on SIML.Michaels_SKU = II.MichaelsSKU
			INNER JOIN SPD_Import_Item_Languages SIIL on II.ID = SIIL.Import_Item_ID and SIML.Language_Type_ID = SIIL.Language_Type_ID and SIML.Vendor_Number = II.VendorNumber
			WHERE II.Batch_ID = @BatchID

			-- INSERT new records into the Langauge table
			INSERT INTO SPD_Item_Master_Languages_Supplier (Michaels_SKU, Vendor_Number, Language_Type_ID, Package_Language_Indicator, Created_User_ID, Date_Created, Modified_User_ID, Date_Last_Modified)
			Select II.MichaelsSKU, II.VendorNumber, SIIL.Language_Type_ID, SIIL.Package_Language_Indicator, 0, GetDate(), 0, GetDate()
			FROM SPD_Import_Items as II
			INNER JOIN SPD_Import_Item_Languages as SIIL on II.ID = SIIL.Import_Item_ID
			LEFT JOIN SPD_Item_Master_Languages_supplier as SIML on SIML.Michaels_SKU = II.MichaelsSKU AND SIML.Language_Type_ID = SIIL.Language_Type_ID and SIML.Vendor_Number = II.VendorNumber
			WHERE SIML.ID is null AND II.Batch_ID = @BatchID

		END TRY
		
		BEGIN CATCH
			set @msg = 'Updating Item Master Languages from Import Item Languages Table pt 2... Error Occurred in Update' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			Rollback Tran
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			RETURN	
		END CATCH		
		
		--MWM:LCR
		---- Update SPD_Item_Translation_Required
		--Set @msg = 'Adding items to SPD_Item_Translation_Required from Import New Item. Batch: ' + @vcBatchID
		--IF @Debug=1  Print @msg
		--EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
		--BEGIN TRY
		--	Insert into SPD_Item_Translation_Required
		--	(Michaels_SKU)
		--	Select distinct sku.Michaels_SKU
		--	FROM [SPD_Item_Master_SKU] SKU
		--		Join SPD_Import_Items II	on SKU.[Michaels_SKU] = II.MichaelsSKU
		--		join SPD_Batch B			on II.Batch_ID = B.ID
		--		join SPD_Workflow_Stage WS	on B.Workflow_Stage_ID = WS.ID
		--	WHERE B.ID = @BatchID
		--		and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
		--		and II.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
		--		and ltrim(rtrim(SKU.SKU_Group)) In ('US AND CANADA','CANADA ONLY')
		--		and sku.POG_Start_Date is not null
		--		and not exists
		--		(
		--			Select 1 from SPD_Item_Translation_Required R where R.Michaels_SKU = sku.Michaels_SKU
		--		)

		--	set @rows = @@Rowcount
		--	set @msg = '    Records Inserted: ' + convert(varchar(20),@rows)
		--	IF @Debug=1  Print @msg
		--	EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
		--END TRY
		
		--BEGIN CATCH
		--	set @msg = 'Adding items to SPD_Item_Translation_Required SKU from Import... Error Occurred in Insert' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
		--	Rollback Tran
		--	EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
		--	EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
		--	RETURN
		--END CATCH

	END	
	
	Commit Tran
	IF @Debug=1  Print 'Updating Item Master Proc Ends'
	EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M='Updating Item Master From New Item Proc Ends'


END


GO


/*
	this is a variation of usp_SPD_MQComm_UpdateItemMaster
	the original works by batchid and is called when a batch completes
	
	this version is intended for use when a SKU is purged and then recreated in SPEDY
*/
ALTER PROCEDURE [dbo].[usp_SPD_MQComm_UpdateItemMaster_BySKU] 
	@RepairSKU varchar(10)
	, @debug int = 0
AS
BEGIN

  if @debug = 0
  begin
    set NOCOUNT on;
  end

	Declare @BatchType int
		, @BatchID bigint
		, @rows int
		, @msg varchar(1000)
		, @vcBatchID varchar(20)
		, @Error bit
		, @CurDate datetime
		
	select @BatchID = b.id from spd_items it, spd_item_headers ith, spd_batch b where it.michaels_sku = @RepairSKU
			and it.item_header_id = ith.id and ith.batch_id = b.id and b.enabled = 1
			
	if @BatchID is null
	begin
		select @BatchID = b.id from spd_import_items it, spd_batch b where it.michaelssku = @RepairSKU
			and b.id = it.batch_id and b.enabled = 1
	end
	
	if @BatchID is null
  begin
    print 'batch not found'
		return
  end
	
	Set @vcBatchID = convert(varchar(20),@BatchID)
	Set @Error = 0
	Set @CurDate = getdate()
	
	Select @BatchType = Batch_Type_ID
	From SPD_Batch 
	Where ID = @BatchID
	
	BEGIN TRAN
	IF @BatchType = 1
	BEGIN
	
		-- ****************************************************************************
		-- From Domestic Update
		-- ****************************************************************************
	
		-- Update SKU Level Info
		Set @msg = 'Updating Item Master SKU from Domestic New Item. Batch: ' + @vcBatchID
		IF @Debug=1  Print @msg

		BEGIN TRY
			UPDATE [SPD_Item_Master_SKU]
				SET 
				Date_Last_Modified = @CurDate
				, Update_User_ID = 0
				, Buyer = DH.[Buyer_Approval] 
				,[RMS_Sellable] = DH.[RMS_Sellable]
				,[RMS_Orderable] = DH.[RMS_Orderable]
				,[RMS_Inventory] = DH.[RMS_Inventory]
				,[Store_Total] = DH.[Store_Total]
				,[Item_Type] = DI.[Pack_Item_Indicator]
				, [Pack_Item_Indicator] = Case 
					WHEN dbo.udf_SPD_PackItemLeft2(DI.[Pack_Item_Indicator]) in ('D','DP','SB')
					THEN 'Y' 
					ELSE 'N' end
				,Updated_From_NewItem = 1	-- now just for informational purposes since an item can go through new item more than once
			FROM [SPD_Item_Master_SKU] SKU
				Join SPD_Items DI			on SKU.[Michaels_SKU] = DI.Michaels_SKU
				join SPD_Item_Headers DH	on DI.Item_Header_ID = DH.ID
				join SPD_Batch B			on DH.Batch_ID = B.ID
				join SPD_Workflow_Stage WS	on B.Workflow_Stage_ID = WS.ID
			WHERE 	B.ID = @BatchID
				and SKU.Michaels_SKU = @RepairSKU
				and DI.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and WS.Stage_Type_id = 4	-- ONLY COMPLETED BATCHES PLEASE

			set @rows = @@Rowcount
			set @msg = '    Records Updated: ' + convert(varchar(20),@rows)
			IF @Debug=1  Print @msg
		END TRY
		
		BEGIN CATCH
			set @msg = 'Updating Item Master SKU from Domestic... Error Occurred in Update' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			print @msg
			Rollback Tran
			RETURN
		END CATCH
		
		-- Update UDA Level Data.  This should be an Insert as the data is not returned
		-- Update.  Since a New Item Batch can be done twice
		Set @msg = 'Updating Item Master UDA from Domestic New Item. Batch: ' + @vcBatchID
		IF @Debug=1  Print @msg

		BEGIN TRY
			-- **********************************************************************************************
			-- First the Tax info: Update / Insert
			IF @Debug=1  Print 'Domestic Tax UDA'
			UPDATE SPD_Item_Master_UDA
				Set 
					UDA_ID = I.Tax_UDA
					, UDA_Value = I.Tax_Value_UDA
			FROM SPD_Items I
				Join SPD_Item_Master_UDA UDA		on I.Michaels_SKU = UDA.Michaels_SKU 
														and UDA.UDA_ID between 1 and 9 
				Join SPD_Item_Headers H				on I.Item_Header_ID = H.ID
				Join SPD_Batch B					on H.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
			WHERE B.ID = @BatchID
				and isnull(I.Valid_Existing_SKU,0) = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and I.Michaels_SKU = @RepairSKU

			INSERT SPD_Item_Master_UDA ( Michaels_SKU, UDA_ID, UDA_Value )
			Select  
				I.Michaels_SKU
				, I.Tax_UDA
				, I.Tax_Value_UDA
			FROM SPD_Items I
				Join SPD_Item_Headers H				on I.Item_Header_ID = H.ID
				Join SPD_Batch B					on H.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Left Join SPD_Item_Master_UDA UDA	on I.Michaels_SKU = UDA.Michaels_SKU 
													and UDA.UDA_ID between 1 and 9 
			WHERE 	B.ID = @BatchID
				and isnull(I.Valid_Existing_SKU,0) = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and UDA.UDA_ID is NULL
				and I.Michaels_SKU = @RepairSKU
				and not exists (select null from SPD_Item_Master_UDA where Michaels_SKU = I.Michaels_SKU and UDA_ID = I.Tax_UDA and UDA_Value = I.Tax_Value_UDA)
			

			-- **********************************************************************************************
			-- Now the PrePriced: Update, Insert, Delete
			IF @Debug=1  Print 'Domestic PrePriced UDA'
			UPDATE SPD_Item_Master_UDA
				Set UDA_Value = I.Pre_Priced_UDA
			FROM SPD_Items I
				Join SPD_Item_Headers H				on I.Item_Header_ID = H.ID
				Join SPD_Batch B					on H.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Join SPD_Item_Master_UDA UDA		on I.Michaels_SKU = UDA.Michaels_SKU 
														and UDA.UDA_ID = 10
			WHERE B.ID = @BatchID			
				and isnull(I.Valid_Existing_SKU,0) = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and I.Pre_Priced ='Y'			-- UDA defined in Item
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and I.Michaels_SKU = @RepairSKU
			
			INSERT SPD_Item_Master_UDA ( Michaels_SKU, UDA_ID, UDA_Value )
			Select  
				I.Michaels_SKU
				, 10
				, I.Pre_Priced_UDA
			FROM SPD_Items I
				Join SPD_Item_Headers H				on I.Item_Header_ID = H.ID
				Join SPD_Batch B					on H.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Left Join SPD_Item_Master_UDA UDA	on I.Michaels_SKU = UDA.Michaels_SKU 
														and UDA.UDA_ID = 10
			WHERE 	B.ID = @BatchID
				and isnull(I.Valid_Existing_SKU,0) = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and I.Pre_Priced ='Y'			-- UDA defined in Item
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and UDA.UDA_ID is NULL			-- Does not exist in UDA Table
				and I.Michaels_SKU = @RepairSKU
				and not exists (select null from SPD_Item_Master_UDA where Michaels_SKU = I.Michaels_SKU and UDA_ID = 10 and UDA_Value = I.Pre_Priced_UDA)
				
			DELETE UDA		-- Most likely this will never fire as New Items that are dups should be from Existing SKUs
			FROM SPD_Items I
				Join SPD_Item_Headers H				on I.Item_Header_ID = H.ID
				Join SPD_Batch B					on H.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Join SPD_Item_Master_UDA UDA		on I.Michaels_SKU = UDA.Michaels_SKU 
														and UDA.UDA_ID = 10
			WHERE B.ID = @BatchID			
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and isnull(I.Valid_Existing_SKU,0) = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and I.Pre_Priced ='N'			-- UDA defined in Item as NO	
				and I.Michaels_SKU = @RepairSKU
					
			-- **********************************************************************************************
			-- Now the Private Brand Label: Update and Insert
			IF @Debug=1  Print 'Domestic PBL UDA'
			UPDATE SPD_Item_Master_UDA
				Set 
					UDA_Value = coalesce(I.Private_Brand_Label,12)
			FROM SPD_Items I
				Join SPD_Item_Headers H				on I.Item_Header_ID = H.ID
				Join SPD_Batch B					on H.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Join SPD_Item_Master_UDA UDA		on I.Michaels_SKU = UDA.Michaels_SKU 
														and UDA.UDA_ID = 11
			WHERE B.ID = @BatchID
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and isnull(I.Valid_Existing_SKU,0) = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and I.Michaels_SKU = @RepairSKU
							
			INSERT SPD_Item_Master_UDA ( Michaels_SKU, UDA_ID, UDA_Value )
			Select  
				I.Michaels_SKU
				, 11
				, coalesce(I.Private_Brand_Label,12)
			FROM SPD_Items I
				Join SPD_Item_Headers H				on I.Item_Header_ID = H.ID
				Join SPD_Batch B					on H.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Left Join SPD_Item_Master_UDA UDA	on I.Michaels_SKU = UDA.Michaels_SKU 
														and UDA.UDA_ID = 11
			WHERE 	B.ID = @BatchID
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and isnull(I.Valid_Existing_SKU,0) = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and UDA.UDA_ID is NULL			-- Does not exist in UDA Table
				and I.Michaels_SKU = @RepairSKU
				and not exists (select null from SPD_Item_Master_UDA where Michaels_SKU = I.Michaels_SKU and UDA_ID = 11 and UDA_Value = coalesce(I.Private_Brand_Label,12))
		END TRY
		
		BEGIN CATCH
			set @msg = 'Updating Item Master UDA from Domestic... Error Occurred in Insert' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			print @msg
			Rollback Tran
			RETURN
		END CATCH
		
		-- **********************************************************************************************
		-- Update Vendor Level Info - Use temp table to hold all the skus assoc with the batch
		BEGIN TRY
			set @msg = 'Updating Item Master VENDOR from Domestic New Item. Batch ID: ' + @vcBatchID
			IF @Debug=1  Print @msg

			SELECT
				DI.ID													as Item_ID
				, DI.Item_Header_ID										as Item_Header_ID	  
				, DI.[Michaels_SKU]										as Michaels_SKU
				, coalesce(DH.US_Vendor_Num, DH.Canadian_Vendor_Num,0)	as Vendor_Number
			INTO #DI_SKURecs
			FROM SPD_Items DI
				join SPD_Item_Headers DH	on DI.Item_Header_ID = DH.ID
				join SPD_Batch B			on DH.Batch_ID = B.ID
				join SPD_Workflow_Stage WS	on B.Workflow_Stage_ID = WS.ID
			WHERE B.ID = @BatchID
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and DI.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and DI.Michaels_SKU = @RepairSKU

			UPDATE SPD_Item_Master_Vendor
				SET
				Date_Last_Modified = @CurDate
				, Update_User_ID = 0
				,[Hazardous_Manufacturer_Name] = DI.[Hazardous_Manufacturer_Name]
				,[Hazardous_Manufacturer_City] = DI.[Hazardous_Manufacturer_City]
				,[Hazardous_Manufacturer_State] = DI.[Hazardous_Manufacturer_State]
				,[Hazardous_Manufacturer_Phone] = DI.[Hazardous_Manufacturer_Phone]
				,[Hazardous_Manufacturer_Country] = DI.[Hazardous_Manufacturer_Country]
				, Image_ID = (	Select [File_ID] 
								From [SPD_Items_Files]
								Where item_id = DI.ID and [Item_Type] in ('D','SB') and [File_Type] = 'IMG' )
				, MSDS_ID = (	Select [File_ID] 
								From [SPD_Items_Files]
								Where item_id = DI.ID and [Item_Type] in ('D','SB') and [File_Type] = 'MSDS' )
				, Updated_From_NewItem = 1
			FROM SPD_Item_Master_Vendor V
				Join #DI_SKURecs LU			on  V.Michaels_SKU = LU.Michaels_SKU 
												and V.Vendor_Number = LU.Vendor_Number
				Join SPD_Items DI			on LU.Item_ID = DI.ID

			set @rows = @@Rowcount
			set @msg = '    Records Updated: ' + convert(varchar(20),@rows)
			IF @Debug=1  Print @msg
		END TRY

		BEGIN CATCH
			set @msg = 'Updating Item Master Vendor from Domestic... Error Occurred in Update' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			print @msg
			Rollback Tran
			RETURN	
		END CATCH
		
		-- Update Vendor Country Level Info
		BEGIN TRY
			set @msg = 'Updating Item Master Vendor Countries from Domestic New Item. Batch ID: ' + @vcBatchID
			IF @Debug=1  Print @msg

			UPDATE SPD_Item_Master_Vendor_Countries
			SET
				Date_Last_Modified = @CurDate
				, Update_User_ID = 0
				, [Each_Case_Height] = DI.[Each_Case_Height]
				, [Each_Case_Width] = DI.[Each_Case_Width]
				, [Each_Case_Length] = DI.[Each_Case_Length]
				, [Each_Case_Weight] = DI.[Each_Case_Weight]
				, [Each_LWH_UOM] = 'IN'
				, [Each_Weight_UOM] = 'LB'
				, [Inner_Case_Height] = DI.[inner_case_height]
				, [Inner_Case_Width] = DI.[inner_case_width]
				, [Inner_Case_Length] = DI.[inner_case_length]
				, [Inner_Case_Weight] = case when isnumeric(DI.[inner_case_weight])=1 then convert(decimal(18,6),DI.[inner_case_weight]) else 0.00 end
				, [Inner_LWH_UOM] = 'IN'
				, [Inner_Weight_UOM] = 'LB'
				, [Master_Case_Height] = DI.[master_case_height]
				, [Master_Case_Width] = DI.[master_case_width]
				, [Master_Case_Length] = DI.[master_case_length]
				, [Master_Case_Weight] = DI.[master_case_weight]
				, [Master_LWH_UOM] = 'IN'
				, [Master_Weight_UOM] = 'LB'
				, Updated_From_NewItem = 1
			FROM SPD_Item_Master_Vendor_Countries VC
				Join #DI_SKURecs LU			on  VC.Michaels_SKU = LU.Michaels_SKU 
												and VC.Vendor_Number = LU.Vendor_Number
				Join SPD_Items DI			on LU.Item_ID = DI.ID
												and VC.Country_Of_Origin = DI.[country_of_origin]
		END TRY

		BEGIN CATCH
			set @msg = 'Updating Item Master Vendor Countries from Domestic... Error Occurred in Update' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			print @msg
			Rollback Tran
			RETURN	
		END CATCH
		
		Drop table #DI_SKURecs
	END
	
	IF @BatchType = 2
	BEGIN
		-- ****************************************************************************
		-- From Import Update
		-- ****************************************************************************
		-- Update SKU Level Info
		Set @msg = 'Updating Item Master SKU from Import New Item. Batch: ' + @vcBatchID
		IF @Debug=1  Print @msg
		BEGIN TRY
			UPDATE [SPD_Item_Master_SKU]
				SET 
				Date_Last_Modified = @CurDate
				, Update_User_ID = 0
				, Planogram_Name = II.PlanogramName
				,[Buyer] = II.[Buyer]
				,[Buyer_Fax] = II.[Fax]
				,[Buyer_Email] = II.[Email]
				,[Season] = II.[Season]
				,CoinBattery = II.CoinBattery
				,[TSSA] = II.TSSA
				,[CSA] = II.CSA
				,[UL] = II.UL
				,[Licence_Agreement] = II.[LicenceAgreement]
				,[Fumigation_Certificate] = II.[FumigationCertificate]
				,[KILN_Dried_Certificate] = II.[KILNDriedCertificate]
				,[China_Com_Inspec_Num_And_CCIB_Stickers] = II.[ChinaComInspecNumAndCCIBStickers]
				,[Original_Visa] = II.[OriginalVisa]
				,[Textile_Declaration_Mid_Code] = II.[TextileDeclarationMidCode]
				,[Quota_Charge_Statement] = II.[QuotaChargeStatement]
				,[MSDS] = II.[MSDS]
				,[TSCA] = II.[TSCA]
				,[Drop_Bal_lTest_Cert] = II.[DropBallTestCert]
				,[Man_Medical_Device_Listing] = II.[ManMedicalDeviceListing]
				,[Man_FDA_Registration] = II.[ManFDARegistration]
				,[Copy_Right_Indemnification] = II.[CopyRightIndemnification]
				,[Fish_Wild_Life_Cert] = II.[FishWildLifeCert]
				,[Proposition_65_Label_Req] = II.[Proposition65LabelReq]
				,[CCCR] = II.[CCCR]
				,[Formaldehyde_Compliant] = II.[FormaldehydeCompliant]
				,[RMS_Sellable] = II.[RMS_Sellable]
				,[RMS_Orderable] = II.[RMS_Orderable]
				,[RMS_Inventory] = II.[RMS_Inventory]
				,[Store_Total] = II.[Store_Total]
				,[Displayer_Cost] = II.[Displayer_Cost]
				,[Item_Type] = II.[PackItemIndicator]
				,[Pack_Item_Indicator] = Case WHEN dbo.udf_SPD_PackItemLeft2(II.[PackItemIndicator]) in ('D','DP','SB')
												THEN 'Y' ELSE 'N' end
				, Updated_From_NewItem = 1
			FROM [SPD_Item_Master_SKU] SKU
				Join SPD_Import_Items II	on SKU.[Michaels_SKU] = II.MichaelsSKU
				join SPD_Batch B			on II.Batch_ID = B.ID
				join SPD_Workflow_Stage WS	on B.Workflow_Stage_ID = WS.ID
			WHERE B.ID = @BatchID
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and isnull(II.Valid_Existing_SKU,0) = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and SKU.Michaels_SKU = @RepairSKU

			set @rows = @@Rowcount
			set @msg = '    Records Updated: ' + convert(varchar(20),@rows)
			IF @Debug=1  Print @msg
		END TRY

		BEGIN CATCH
			set @msg = 'Updating Item Master SKU from Import... Error Occurred in Update' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			print @msg
			Rollback Tran
			RETURN	
		END CATCH

		-- Update UDA Level Data.  This should be an Insert as the data is not returned
		Set @msg = 'Updating Item Master UDA from Import New Item. Batch: ' + @vcBatchID
		IF @Debug=1  Print @msg
		
		BEGIN TRY
			-- ***************************************************************************
			-- First the Tax info: Update / Insert
			IF @Debug=1  Print 'Import Tax UDA'
			
			UPDATE SPD_Item_Master_UDA
				Set 
					UDA_ID = I.TaxUDA
					, UDA_Value = I.TaxValueUDA
			From SPD_Import_Items I
				Join SPD_Item_Master_UDA UDA		on I.MichaelsSKU = UDA.Michaels_SKU 
														and UDA.UDA_ID between 1 and 9 
				Join SPD_Batch B					on I.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
			WHERE B.ID = @BatchID
				and isnull(I.Valid_Existing_SKU,0) = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and I.MichaelsSKU = @RepairSKU

			INSERT SPD_Item_Master_UDA ( Michaels_SKU, UDA_ID, UDA_Value )
			Select  
				I.MichaelsSKU
				, I.TaxUDA
				, I.TaxValueUDA
			From SPD_Import_Items I
				Join SPD_Batch B					on I.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Left Join SPD_Item_Master_UDA UDA	on I.MichaelsSKU = UDA.Michaels_SKU 
													and UDA.UDA_ID between 1 and 9 
			WHERE 	B.ID = @BatchID
				and isnull(I.Valid_Existing_SKU,0) = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and UDA.UDA_ID is NULL
				and I.MichaelsSKU = @RepairSKU
				and not exists (select null from SPD_Item_Master_UDA where Michaels_SKU = I.MichaelsSKU and UDA_ID = I.TaxUDA and UDA_Value = I.TaxValueUDA)

			-- ***************************************************************************
			-- Now the PrePriced: Update, Insert, Delete
			IF @Debug=1  Print 'Import PrePriced UDA'
			UPDATE SPD_Item_Master_UDA
				Set UDA_Value = I.PrePricedUDA
			FROM SPD_Import_Items I
				Join SPD_Batch B					on I.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Join SPD_Item_Master_UDA UDA		on I.MichaelsSKU = UDA.Michaels_SKU 
														and UDA.UDA_ID = 10
			WHERE B.ID = @BatchID			
				and isnull(I.Valid_Existing_SKU,0) = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and I.PrePriced ='Y'			-- UDA defined in Item
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and I.MichaelsSKU = @RepairSKU
																		
			INSERT SPD_Item_Master_UDA ( Michaels_SKU, UDA_ID, UDA_Value )
			Select  
				I.MichaelsSKU
				, 10
				, I.PrePricedUDA
			FROM SPD_Import_Items I
				Join SPD_Batch B					on I.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Left Join SPD_Item_Master_UDA UDA	on I.MichaelsSKU = UDA.Michaels_SKU 
														and UDA.UDA_ID = 10
			WHERE 	B.ID = @BatchID
				and isnull(I.Valid_Existing_SKU,0) = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and I.PrePriced ='Y'			-- UDA defined in Item
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and UDA.UDA_ID is NULL			-- Does not exist in UDA Table
				and I.MichaelsSKU = @RepairSKU
				and not exists (select null from SPD_Item_Master_UDA where Michaels_SKU = I.MichaelsSKU and UDA_ID = 10 and UDA_Value = I.PrePricedUDA)

			DELETE UDA		-- Most likely this will never fire as New Items that are dups should be from Existing SKUs
			FROM SPD_Import_Items I
				Join SPD_Batch B					on I.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Join SPD_Item_Master_UDA UDA		on I.MichaelsSKU = UDA.Michaels_SKU 
														and UDA.UDA_ID = 10
			WHERE B.ID = @BatchID			
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and isnull(I.Valid_Existing_SKU,0) = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and I.PrePriced ='N'			-- UDA defined in Item as NO	
				and I.MichaelsSKU = @RepairSKU
							
			-- ***************************************************************************
			-- Now the Private Brand Label: Update and Insert
			IF @Debug=1  Print 'Import PBL UDA'
			UPDATE SPD_Item_Master_UDA
				Set 
					UDA_Value = coalesce(I.Private_Brand_Label,12)
			FROM SPD_Import_Items I
				Join SPD_Batch B					on I.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Join SPD_Item_Master_UDA UDA		on I.MichaelsSKU = UDA.Michaels_SKU 
														and UDA.UDA_ID = 11
			WHERE B.ID = @BatchID
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and isnull(I.Valid_Existing_SKU,0) = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and I.MichaelsSKU = @RepairSKU

			INSERT SPD_Item_Master_UDA ( Michaels_SKU, UDA_ID, UDA_Value )
			Select  
				I.MichaelsSKU
				, 11
				, coalesce(I.Private_Brand_Label,12)
			From SPD_Import_Items I
				Join SPD_Batch B					on I.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Left Join SPD_Item_Master_UDA UDA	on I.MichaelsSKU = UDA.Michaels_SKU 
														and UDA.UDA_ID = 11
			WHERE 	B.ID = @BatchID
				and isnull(I.Valid_Existing_SKU,0) = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and UDA.UDA_ID is NULL			-- Does not exist in UDA Table
				and I.MichaelsSKU = @RepairSKU
				and not exists (select null from SPD_Item_Master_UDA where Michaels_SKU = I.MichaelsSKU and UDA_ID = 11 and UDA_Value = coalesce(I.Private_Brand_Label,12))
		END TRY
		
		BEGIN CATCH
			set @msg = 'Updating Item Master UDA from Import... Error Occurred in Insert' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			print @msg
			Rollback Tran
			RETURN
		END CATCH
		
		-- ***************************************************************************
		-- Update Vendor Level Info
		Set @msg = 'Updating Item Master Vendor from Import New Item. Batch: ' + @vcBatchID
		IF @Debug=1  Print @msg
		BEGIN TRY
			UPDATE SPD_Item_Master_Vendor
				SET
				Date_Last_Modified = @CurDate
				, Update_User_ID = 0
				, Hazardous_Manufacturer_Name = II.HazMatMFGName
				, Hazardous_Manufacturer_City = II.HazMatMFGCity
				, Hazardous_Manufacturer_State = II.HazMatMFGState
				, Hazardous_Manufacturer_Phone = II.HazMatMFGPhone
				, Hazardous_Manufacturer_Country = II.HazMatMFGCountry
				, Image_ID = (	Select [File_ID] 
								From [SPD_Items_Files]
								Where item_id = II.ID and [Item_Type] = 'I' and [File_Type] = 'IMG' )
				, MSDS_ID = (	Select [File_ID] 
								From [SPD_Items_Files]
								Where item_id = II.ID and [Item_Type] = 'I' and [File_Type] = 'MSDS' )
				,[PaymentTerms] = II.[PaymentTerms]
				,[Days] = II.[Days]
				,[Vendor_Min_Order_Amount] = case when isNumeric(II.[VendorMinOrderAmount]) = 1 then II.[VendorMinOrderAmount] else NULL END
				,[Vendor_Name] = II.[VendorName]
				,[Vendor_Address1] = II.[VendorAddress1]
				,[Vendor_Address2] = II.[VendorAddress2]
				,[Vendor_Address3] = II.[VendorAddress3]
				,[Vendor_Address4] = II.[VendorAddress4]
				,[Vendor_Contact_Name] = II.[VendorContactName]
				,[Vendor_Contact_Phone] = II.[VendorContactPhone]
				,[Vendor_Contact_Email] = II.[VendorContactEmail]
				,[Vendor_Contact_Fax] = II.[VendorContactFax]
				,[Manufacture_Name] = II.[ManufactureName]
				,[Manufacture_Address1] = II.[ManufactureAddress1]
				,[Manufacture_Address2] = II.[ManufactureAddress2]
				,[Manufacture_Contact] = II.[ManufactureContact]
				,[Manufacture_Phone] = II.[ManufacturePhone]
				,[Manufacture_Email] = II.[ManufactureEmail]
				,[Manufacture_Fax] = II.[ManufactureFax]
				,[Agent_Contact] = II.[AgentContact]
				,[Agent_Phone] = II.[AgentPhone]
				,[Agent_Email] = II.[AgentEmail]
				,[Agent_Fax] = II.[AgentFax]
				,[Harmonized_CodeNumber] = II.[HarmonizedCodeNumber]
				,[Detail_Invoice_Customs_Desc] = II.[DetailInvoiceCustomsDesc]
				,[Component_Material_Breakdown] = II.[ComponentMaterialBreakdown]
				,[Component_Construction_Method] = II.[ComponentConstructionMethod]
				,[Individual_Item_Packaging] = II.[IndividualItemPackaging]
				,[FOB_Shipping_Point] =  case when isNumeric(II.[FOBShippingPoint]) = 1 then II.[FOBShippingPoint] else NULL END
				,[Duty_Percent] = case when isNumeric(II.[DutyPercent]) = 1 then II.[DutyPercent] else NULL END
				,[Duty_Amount] = case when isNumeric(II.[DutyAmount]) = 1 then II.[DutyAmount] else NULL END
				,[Additional_Duty_Comment] = II.[AdditionalDutyComment]
				,[Additional_Duty_Amount] = case when isNumeric(II.[AdditionalDutyAmount]) = 1 and II.[AdditionalDutyAmount] not like '-79228%' then II.[AdditionalDutyAmount] else NULL END
				,[Ocean_Freight_Amount] = case when isNumeric(II.[OceanFreightAmount]) = 1 then II.[OceanFreightAmount] else NULL END
				,[Ocean_Freight_Computed_Amount] = case when isNumeric(II.[OceanFreightComputedAmount]) = 1 then II.[OceanFreightComputedAmount] else NULL END
				,[Agent_Commission_Percent] = case when isNumeric(II.[AgentCommissionPercent]) = 1 then II.[AgentCommissionPercent] else NULL END
				,[Agent_Commission_Amount] = case when isNumeric(II.[AgentCommissionAmount]) = 1 then II.[AgentCommissionAmount] else NULL END
				,[Other_Import_Costs_Percent] = case when isNumeric(II.[OtherImportCostsPercent]) = 1 then II.[OtherImportCostsPercent] else NULL END
				,[Other_Import_Costs_Amount] = case when isNumeric(II.[OtherImportCostsAmount]) = 1 then II.[OtherImportCostsAmount] else NULL END
				,[Packaging_Cost_Amount] = case when isNumeric(II.[PackagingCostAmount]) = 1 then II.[PackagingCostAmount] else NULL END
				,[Warehouse_Landed_Cost] = case when isNumeric(II.[WarehouseLandedCost]) = 1 then II.[WarehouseLandedCost] else NULL END
				,[Purchase_Order_Issued_To] = II.[PurchaseOrderIssuedTo]
				,[Shipping_Point] = Upper(II.[ShippingPoint])
				,[Vendor_Comments] = II.[VendorComments]
				,[Freight_Terms] = II.[FreightTerms]
				,[Outbound_Freight] = case when isNumeric(II.[OutboundFreight]) = 1 then II.[OutboundFreight] else NULL END
				,[Nine_Percent_Whse_Charge] = case when isNumeric(II.[NinePercentWhseCharge]) = 1 then II.[NinePercentWhseCharge] else NULL END
				,[Total_Store_Landed_Cost] = case when isNumeric(II.[TotalStoreLandedCost]) = 1 then II.[TotalStoreLandedCost] else NULL END
				,Vendor_Or_Agent = Case when A.Vendor_Number is NULL then 'V' else 'A' end
				,Agent_Type = Case when A.Vendor_Number is NULL then NULL else A.Agent end			
				,Updated_From_NewItem = 1
				,ProductIdentifiesAsCosmetic = II.[ProductIdentifiesAsCosmetic]
			FROM SPD_Item_Master_Vendor V
				Join SPD_Import_Items II	on V.[Michaels_SKU] = II.MichaelsSKU
											and V.Vendor_Number = II.VendorNumber
				join SPD_Batch B			on II.Batch_ID = B.ID
				join SPD_Workflow_Stage WS	on B.Workflow_Stage_ID = WS.ID
				left join SPD_Item_Master_Vendor_Agent A on V.Vendor_Number =  A.Vendor_Number
			WHERE B.ID = @BatchID
				and isnull(II.Valid_Existing_SKU,0) = 0		-- Make sure that Item is new and not loaded initially from the Item Master
				and WS.Stage_Type_id = 4			-- ONLY COMPLETED BATCHES PLEASE
				and II.MichaelsSKU = @RepairSKU

			set @rows = @@Rowcount
			IF @Debug=1  Print 'Records Updated'
			set @msg = '    Records Updated: ' + convert(varchar(20),@rows)
		END TRY
		BEGIN CATCH
			set @msg = 'Updating Item Master Vendor from Import... Error Occurred in Update' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			print @msg
			Rollback Tran
			RETURN		
		END CATCH

		-- Update Vendor Country Level Info
		BEGIN TRY
			set @msg = 'Updating Item Master Vendor Countries from Import New Item. Batch ID: ' + @vcBatchID
			IF @Debug=1  Print @msg

			UPDATE SPD_Item_Master_Vendor_Countries
			SET
				Date_Last_Modified = @CurDate
				, Update_User_ID = 0
				, [Each_Case_Height] = II.[eachheight]
				, [Each_Case_Width] = II.[eachwidth]
				, [Each_Case_Length] = II.[eachlength]
				, [Each_Case_Weight] = II.[eachweight]
				, [Each_LWH_UOM] = 'IN'
				, [Each_Weight_UOM] = 'LB'
				, [Each_Case_Cube] = II.[cubicfeeteach]
				, [Inner_Case_Height] = II.[reshippableinnercartonheight]
				, [Inner_Case_Width] = II.[reshippableinnercartonwidth]
				, [Inner_Case_Length] = II.[reshippableinnercartonlength]
				--, [Inner_Case_Weight] = case when isnumeric(II.[eachpiecenetweightlbsperounce])=1 then convert(decimal(18,6),II.[eachpiecenetweightlbsperounce]) else 0.00 end
				, [Inner_Case_Weight] = case when isnumeric(II.[ReshippableInnerCartonWeight])=1 then convert(decimal(18,6),II.[ReshippableInnerCartonWeight]) else 0.00 end
				, [Inner_LWH_UOM] = 'IN'
				, [Inner_Weight_UOM] = 'LB'
				, [Master_Case_Height] = II.[mastercartondimensionsheight]
				, [Master_Case_Width] = II.[mastercartondimensionswidth]
				, [Master_Case_Length] = II.[mastercartondimensionslength]
				, [Master_Case_Weight] = II.[weightmastercarton]
				, [Master_LWH_UOM] = 'IN'
				, [Master_Weight_UOM] = 'LB'
				, Updated_From_NewItem = 1
			FROM SPD_Item_Master_Vendor_Countries VC
				Join SPD_Import_Items II	on VC.[Michaels_SKU] = II.MichaelsSKU
												and VC.Vendor_Number = II.VendorNumber
												and VC.Country_Of_Origin = II.[CountryOfOrigin]
				join SPD_Batch B			on II.Batch_ID = B.ID
				join SPD_Workflow_Stage WS	on B.Workflow_Stage_ID = WS.ID
			WHERE B.ID = @BatchID
				and isnull(II.Valid_Existing_SKU,0) = 0		-- Make sure that Item is new and not loaded initially from the Item Master
				and WS.Stage_Type_id = 4					-- ONLY COMPLETED BATCHES PLEASE
				and II.MichaelsSKU = @RepairSKU
		END TRY

		BEGIN CATCH
			set @msg = 'Updating Item Master Vendor Countries from Import... Error Occurred in Update' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			print @msg
			Rollback Tran
			RETURN	
		END CATCH
		
		/* ******************************************************************************************************************* */
		-- Update Vendor Multiline info for above records where its the Updated_From_NewItem is at 1
		/* ******************************************************************************************************************* */
		BEGIN TRY
			declare @desc varchar(max), @SKU varchar(30), @VendorNo bigint, @break varchar(max), @method varchar(max)
			declare @r0 varchar(1000), @r1 varchar(1000), @r2 varchar(1000), @r3 varchar(1000), @r4 varchar(1000), @r5 varchar(1000)
			declare @t1 table  (ElementID int, Element varchar(max) )
			declare @c1 int, @c2 int, @c3 int
			select @c1= 0, @c2=0, @c3=0

			DECLARE row CURSOR FOR 
				SELECT 
					V.[Michaels_SKU]
					,V.[Vendor_Number]
					,V.[Detail_Invoice_Customs_Desc]
					,V.[Component_Material_Breakdown]
					,V.[Component_Construction_Method]
				FROM [dbo].[SPD_Item_Master_Vendor] V
					Join SPD_Import_Items II	on V.[Michaels_SKU] = II.MichaelsSKU
													and V.Vendor_Number = II.VendorNumber
													and isnull(II.Valid_Existing_SKU,0) = 0	-- Make sure that Item is new and not loaded initially from the Item Master
					join SPD_Batch B			on II.Batch_ID = B.ID
					join SPD_Workflow_Stage WS	on B.Workflow_Stage_ID = WS.ID
				WHERE WS.Stage_Type_id = 4	-- ONLY COMPLETED BATCHES PLEASE
					and B.ID = @BatchID
					and (  [Detail_Invoice_Customs_Desc] is not null
						or [Component_Material_Breakdown] is not null
						or [Component_Construction_Method] is not null
						)
					and Updated_From_NewItem = 1	-- Been Update from New Item
					and II.MichaelsSKU = @RepairSKU
					
			OPEN row
			FETCH NEXT FROM row INTO @SKU, @VendorNo, @desc, @break, @method;
			WHILE @@FETCH_STATUS = 0
			BEGIN
				UPDATE [SPD_Item_Master_Vendor]
					SET Updated_From_NewItem = 2	-- Flag that we have updated the multiline fields
				WHERE [Michaels_SKU] = @SKU and [Vendor_Number] = @VendorNo
					
				IF @desc is not NULL
				BEGIN 
					INSERT @t1
						Select ElementID, Element FROM SPLIT(@desc, '<MULTILINEDELIMITER>')
					
					-- Force the variables to be '' for each pass
					select @r0 = '',@r1 = '',@r2 = '',@r3 = '',@r4 = '',@r5 = ''
					Select @r0 = Element from @t1 where ElementID = 1
					Select @r1 = Element from @t1 where ElementID = 2
					Select @r2 = Element from @t1 where ElementID = 3
					Select @r3 = Element from @t1 where ElementID = 4
					Select @r4 = Element from @t1 where ElementID = 5
					Select @r5 = Element from @t1 where ElementID = 6

					DELETE FROM @t1
					
					Update [SPD_Item_Master_Vendor] 
						SET 
						  [Detail_Invoice_Customs_Desc0] = Coalesce(@r0,'')
						, [Detail_Invoice_Customs_Desc1] = Coalesce(@r1,'')
						, [Detail_Invoice_Customs_Desc2] = Coalesce(@r2,'')
						, [Detail_Invoice_Customs_Desc3] = Coalesce(@r3,'')
						, [Detail_Invoice_Customs_Desc4] = Coalesce(@r4,'')
						, [Detail_Invoice_Customs_Desc5] = Coalesce(@r5,'')
					--FROM [SPD_Item_Master_Vendor]
					WHERE [Michaels_SKU] = @SKU and [Vendor_Number] = @VendorNo
					SET @c1 = @c1 + 1	
				END
				
				IF @break is not NULL
				BEGIN
					INSERT @t1
						Select ElementID, Element FROM SPLIT(@break, '<MULTILINEDELIMITER>')

					select @r0 = '',@r1 = '',@r2 = '',@r3 = '',@r4 = '',@r5 = ''
					Select @r0 = Element from @t1 where ElementID = 1
					Select @r1 = Element from @t1 where ElementID = 2
					Select @r2 = Element from @t1 where ElementID = 3
					Select @r3 = Element from @t1 where ElementID = 4
					Select @r4 = Element from @t1 where ElementID = 5

					DELETE FROM @t1
					
					Update [SPD_Item_Master_Vendor] 
						SET 
  						  [Component_Material_Breakdown0] = coalesce(@r0,'')
						, [Component_Material_Breakdown1] = coalesce(@r1,'')
						, [Component_Material_Breakdown2] = coalesce(@r2,'')
						, [Component_Material_Breakdown3] = coalesce(@r3,'')
						, [Component_Material_Breakdown4] = coalesce(@r4,'')
					--FROM [SPD_Item_Master_Vendor]
					WHERE [Michaels_SKU] = @SKU and [Vendor_Number] = @VendorNo
					SET @c2 = @c2 + 1	
				END		

				IF @method is not NULL
				BEGIN
					Insert @t1
						Select ElementID, Element FROM SPLIT(@method, '<MULTILINEDELIMITER>')

					select @r0 = '',@r1 = '',@r2 = '',@r3 = '',@r4 = '',@r5 = ''
					Select @r0 = Element from @t1 where ElementID = 1
					Select @r1 = Element from @t1 where ElementID = 2
					Select @r2 = Element from @t1 where ElementID = 3
					Select @r3 = Element from @t1 where ElementID = 4
					delete from @t1
					
					Update [SPD_Item_Master_Vendor] 
						SET 
						  [Component_Construction_Method0] = coalesce(@r0,'')
						, [Component_Construction_Method1] = coalesce(@r1,'')
						, [Component_Construction_Method2] = coalesce(@r2,'')
						, [Component_Construction_Method3] = coalesce(@r3,'')
					--FROM [SPD_Item_Master_Vendor]
					WHERE [Michaels_SKU] = @SKU and [Vendor_Number] = @VendorNo
					SET @c3 = @c3 + 1	
				END	
				
				FETCH NEXT FROM row INTO @SKU, @VendorNo, @desc, @break, @method;
			END	
			CLOSE row;
			DEALLOCATE row;
			DELETE FROM @t1

			IF @Debug=1  Print 'MultiLines were Updated'
			set @msg = '   Total Count of Multiline Updates: ' + convert(varchar(20),(@c1 + @c2 + @c3))
		END TRY
		BEGIN CATCH
			set @msg = 'Updating Item Master Vendor MultiLines... Error Occurred in Update' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			print @msg
			Rollback Tran
			CLOSE row;
			DEALLOCATE row;
			RETURN	
		END CATCH
	END	
	
	Commit Tran
	IF @Debug=1
  begin
    Print 'Updating Item Master Proc Ends'
  end

  print 'SUCCESS ' + @RepairSKU

END


GO


ALTER PROCEDURE [dbo].[usp_SPD_MQComm_UpdateItemMaster2] 
	@BatchID bigint
	, @LTS datetime = null
	, @debug int
AS
BEGIN

	IF  @LTS is NULL
		SET @LTS = getdate()
		
	Declare @BatchType int
		, @rows int
		, @msg varchar(1000)
		, @vcBatchID varchar(20)
		, @Error bit
		, @CurDate datetime
	
	Set @vcBatchID = convert(varchar(20),@BatchID)
	Set @Error = 0
	Set @CurDate = getdate()
	
	Select @BatchType = Batch_Type_ID
	From SPD_Batch 
	Where ID = @BatchID
	
	BEGIN TRAN
	IF @BatchType = 1
	BEGIN
		-- ****************************************************************************
		-- From Domestic Update
		-- ****************************************************************************
	
		-- Update SKU Level Info
		Set @msg = 'Updating Item Master SKU from Domestic New Item. Batch: ' + @vcBatchID
		IF @Debug=1  Print @msg
		EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
		BEGIN TRY
			UPDATE [SPD_Item_Master_SKU]
				SET 
				Date_Last_Modified = @CurDate
				, Update_User_ID = 0
				, Buyer = DH.[Buyer_Approval] 
				,[RMS_Sellable] = DH.[RMS_Sellable]
				,[RMS_Orderable] = DH.[RMS_Orderable]
				,[RMS_Inventory] = DH.[RMS_Inventory]
				,[Store_Total] = DH.[Store_Total]
				,[Item_Type] = DI.[Pack_Item_Indicator]
				,[Customs_Description] = DI.[Customs_Description]
				, [Pack_Item_Indicator] = Case 
					WHEN dbo.udf_SPD_PackItemLeft2(DI.[Pack_Item_Indicator]) in ('D','DP','SB')
					THEN 'Y' 
					ELSE 'N' end
				,Updated_From_NewItem = 1	-- now just for informational purposes since an item can go through new item more than once
			FROM [SPD_Item_Master_SKU] SKU
				Join SPD_Items DI			on SKU.[Michaels_SKU] = DI.Michaels_SKU
				join SPD_Item_Headers DH	on DI.Item_Header_ID = DH.ID
				join SPD_Batch B			on DH.Batch_ID = B.ID
				join SPD_Workflow_Stage WS	on B.Workflow_Stage_ID = WS.ID
			WHERE 	B.ID = @BatchID
				and DI.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and WS.Stage_Type_id = 4	-- ONLY COMPLETED BATCHES PLEASE

			set @rows = @@Rowcount
			set @msg = '    Records Updated: ' + convert(varchar(20),@rows)
			IF @Debug=1  Print @msg
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
		END TRY
		
		BEGIN CATCH
			set @msg = 'Updating Item Master SKU from Domestic... Error Occurred in Update' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			Rollback Tran
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			RETURN
		END CATCH
		
		-- Update UDA Level Data.  This should be an Insert as the data is not returned
		-- Update.  Since a New Item Batch can be done twice
		Set @msg = 'Updating Item Master UDA from Domestic New Item. Batch: ' + @vcBatchID
		IF @Debug=1  Print @msg
		EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg

		BEGIN TRY
			-- **********************************************************************************************
			-- First the Tax info: Update / Insert
			IF @Debug=1  Print 'Domestic Tax UDA'
			UPDATE SPD_Item_Master_UDA
				Set 
					UDA_ID = I.Tax_UDA
					, UDA_Value = I.Tax_Value_UDA
			FROM SPD_Items I
				Join SPD_Item_Master_UDA UDA		on I.Michaels_SKU = UDA.Michaels_SKU 
														and UDA.UDA_ID between 1 and 9 
				Join SPD_Item_Headers H				on I.Item_Header_ID = H.ID
				Join SPD_Batch B					on H.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
			WHERE B.ID = @BatchID
				and I.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE

			INSERT SPD_Item_Master_UDA ( Michaels_SKU, UDA_ID, UDA_Value )
			Select  
				I.Michaels_SKU
				, I.Tax_UDA
				, I.Tax_Value_UDA
			FROM SPD_Items I
				Join SPD_Item_Headers H				on I.Item_Header_ID = H.ID
				Join SPD_Batch B					on H.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Left Join SPD_Item_Master_UDA UDA	on I.Michaels_SKU = UDA.Michaels_SKU 
													and UDA.UDA_ID between 1 and 9 
			WHERE 	B.ID = @BatchID
				and I.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and UDA.UDA_ID is NULL

			-- **********************************************************************************************
			-- Now the PrePriced: Update, Insert, Delete
			IF @Debug=1  Print 'Domestic PrePriced UDA'
			UPDATE SPD_Item_Master_UDA
				Set UDA_Value = I.Pre_Priced_UDA
			FROM SPD_Items I
				Join SPD_Item_Headers H				on I.Item_Header_ID = H.ID
				Join SPD_Batch B					on H.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Join SPD_Item_Master_UDA UDA		on I.Michaels_SKU = UDA.Michaels_SKU 
														and UDA.UDA_ID = 10
			WHERE B.ID = @BatchID			
				and I.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and I.Pre_Priced ='Y'			-- UDA defined in Item
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
			
			INSERT SPD_Item_Master_UDA ( Michaels_SKU, UDA_ID, UDA_Value )
			Select  
				I.Michaels_SKU
				, 10
				, I.Pre_Priced_UDA
			FROM SPD_Items I
				Join SPD_Item_Headers H				on I.Item_Header_ID = H.ID
				Join SPD_Batch B					on H.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Left Join SPD_Item_Master_UDA UDA	on I.Michaels_SKU = UDA.Michaels_SKU 
														and UDA.UDA_ID = 10
			WHERE 	B.ID = @BatchID
				and I.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and I.Pre_Priced ='Y'			-- UDA defined in Item
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and UDA.UDA_ID is NULL			-- Does not exist in UDA Table
				
			DELETE UDA		-- Most likely this will never fire as New Items that are dups should be from Existing SKUs
			FROM SPD_Items I
				Join SPD_Item_Headers H				on I.Item_Header_ID = H.ID
				Join SPD_Batch B					on H.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Join SPD_Item_Master_UDA UDA		on I.Michaels_SKU = UDA.Michaels_SKU 
														and UDA.UDA_ID = 10
			WHERE B.ID = @BatchID			
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and I.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and I.Pre_Priced ='N'			-- UDA defined in Item as NO	
					
			-- **********************************************************************************************
			-- Now the Private Brand Label: Update and Insert
			IF @Debug=1  Print 'Domestic PBL UDA'
			UPDATE SPD_Item_Master_UDA
				Set 
					UDA_Value = coalesce(I.Private_Brand_Label,12)
			FROM SPD_Items I
				Join SPD_Item_Headers H				on I.Item_Header_ID = H.ID
				Join SPD_Batch B					on H.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Join SPD_Item_Master_UDA UDA		on I.Michaels_SKU = UDA.Michaels_SKU 
														and UDA.UDA_ID = 11
			WHERE B.ID = @BatchID
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and I.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
							
			INSERT SPD_Item_Master_UDA ( Michaels_SKU, UDA_ID, UDA_Value )
			Select  
				I.Michaels_SKU
				, 11
				, coalesce(I.Private_Brand_Label,12)
			FROM SPD_Items I
				Join SPD_Item_Headers H				on I.Item_Header_ID = H.ID
				Join SPD_Batch B					on H.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Left Join SPD_Item_Master_UDA UDA	on I.Michaels_SKU = UDA.Michaels_SKU 
														and UDA.UDA_ID = 11
			WHERE 	B.ID = @BatchID
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and I.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and UDA.UDA_ID is NULL			-- Does not exist in UDA Table
		END TRY
		
		BEGIN CATCH
			set @msg = 'Updating Item Master UDA from Domestic... Error Occurred in Insert' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			Rollback Tran
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			RETURN
		END CATCH
		
		-- **********************************************************************************************
		-- Update Vendor Level Info - Use temp table to hold all the skus assoc with the batch
		BEGIN TRY
			set @msg = 'Updating Item Master VENDOR from Domestic New Item. Batch ID: ' + @vcBatchID
			IF @Debug=1  Print @msg
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg

			SELECT
				DI.ID													as Item_ID
				, DI.Item_Header_ID										as Item_Header_ID	  
				, DI.[Michaels_SKU]										as Michaels_SKU
				, coalesce(DH.US_Vendor_Num, DH.Canadian_Vendor_Num,0)	as Vendor_Number
			INTO #DI_SKURecs
			FROM SPD_Items DI
				join SPD_Item_Headers DH	on DI.Item_Header_ID = DH.ID
				join SPD_Batch B			on DH.Batch_ID = B.ID
				join SPD_Workflow_Stage WS	on B.Workflow_Stage_ID = WS.ID
			WHERE B.ID = @BatchID
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and DI.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master

			UPDATE SPD_Item_Master_Vendor
				SET
				Date_Last_Modified = @CurDate
				, Update_User_ID = 0
				,[Harmonized_CodeNumber] = DI.[Harmonized_Code_Number]
				,[Canada_Harmonized_CodeNumber] = DI.[Canada_Harmonized_Code_Number]
				,[Detail_Invoice_Customs_Desc0] = DI.[Detail_Invoice_Customs_Desc]
				,[Component_Material_Breakdown0] = DI.[Component_Material_Breakdown]
				,[Hazardous_Manufacturer_Name] = DI.[Hazardous_Manufacturer_Name]
				,[Hazardous_Manufacturer_City] = DI.[Hazardous_Manufacturer_City]
				,[Hazardous_Manufacturer_State] = DI.[Hazardous_Manufacturer_State]
				,[Hazardous_Manufacturer_Phone] = DI.[Hazardous_Manufacturer_Phone]
				,[Hazardous_Manufacturer_Country] = DI.[Hazardous_Manufacturer_Country]
				, Image_ID = (	Select [File_ID] 
								From [SPD_Items_Files]
								Where item_id = DI.ID and [Item_Type] in ('D','SB') and [File_Type] = 'IMG' )
				, MSDS_ID = (	Select [File_ID] 
								From [SPD_Items_Files]
								Where item_id = DI.ID and [Item_Type] in ('D','SB') and [File_Type] = 'MSDS' )
				, Updated_From_NewItem = 1
			FROM SPD_Item_Master_Vendor V
				Join #DI_SKURecs LU			on  V.Michaels_SKU = LU.Michaels_SKU 
												and V.Vendor_Number = LU.Vendor_Number
				Join SPD_Items DI			on LU.Item_ID = DI.ID

			set @rows = @@Rowcount
			set @msg = '    Records Updated: ' + convert(varchar(20),@rows)
			IF @Debug=1  Print @msg
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
		END TRY
		
		BEGIN CATCH
			set @msg = 'Updating Item Master Vendor from Domestic... Error Occurred in Update' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			Rollback Tran
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			RETURN	
		END CATCH
		
		-- Update Vendor Country Level Info
		BEGIN TRY
			set @msg = 'Updating Item Master Vendor Countries from Domestic New Item. Batch ID: ' + @vcBatchID
			IF @Debug=1  Print @msg
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg

			UPDATE SPD_Item_Master_Vendor_Countries
			SET
				Date_Last_Modified = @CurDate
				, Update_User_ID = 0
				, [Each_Case_Height] = DI.[Each_Case_Height]
				, [Each_Case_Width] = DI.[Each_Case_Width]
				, [Each_Case_Length] = DI.[Each_Case_Length]
				, [Each_Case_Weight] = DI.[Each_Case_Weight]
				, [Each_LWH_UOM] = 'IN'
				, [Each_Weight_UOM] = 'LB'
				, [Inner_Case_Height] = DI.[inner_case_height]
				, [Inner_Case_Width] = DI.[inner_case_width]
				, [Inner_Case_Length] = DI.[inner_case_length]
				, [Inner_Case_Weight] = DI.[inner_case_weight]
				, [Inner_LWH_UOM] = 'IN'
				, [Inner_Weight_UOM] = 'LB'
				, [Master_Case_Height] = DI.[master_case_height]
				, [Master_Case_Width] = DI.[master_case_width]
				, [Master_Case_Length] = DI.[master_case_length]
				, [Master_Case_Weight] = DI.[master_case_weight]
				, [Master_LWH_UOM] = 'IN'
				, [Master_Weight_UOM] = 'LB'
				, Updated_From_NewItem = 1
			FROM SPD_Item_Master_Vendor_Countries VC
				Join #DI_SKURecs LU			on  VC.Michaels_SKU = LU.Michaels_SKU 
												and VC.Vendor_Number = LU.Vendor_Number
				Join SPD_Items DI			on LU.Item_ID = DI.ID
												and VC.Country_Of_Origin = DI.[country_of_origin]
		END TRY

		BEGIN CATCH
			set @msg = 'Updating Item Master Vendor Countries from Domestic... Error Occurred in Update' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			Rollback Tran
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			RETURN	
		END CATCH
		
		Drop table #DI_SKURecs
		
		-- **********************************************************************************************
		-- Update Multilingual Info pt 1
		BEGIN TRY
			set @msg = 'Updating Item Master Languages from Domestic Item Languages Table. Batch ID: ' + @vcBatchID
			IF @Debug=1  Print @msg
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg

			-- FIRST, Update the Langauge table, in case the languages already exist.
			-- This should never be the case, but adding the code here in case we need to support it later.
			UPDATE SPD_Item_Master_Languages
			SET Translation_Indicator = SIL.Translation_Indicator,
				Description_Short = SIL.Description_Short,
				Description_Long = SIL.Description_Long,
				Modified_User_ID = 0,
				Date_Requested = getDate(),
				Date_Last_Modified = getDate()
			FROM SPD_Item_Master_Languages as SIML
			INNER JOIN SPD_Items as DI on SIML.Michaels_SKU = DI.Michaels_SKU
			INNER JOIN SPD_Item_Headers DH	on DI.Item_Header_ID = DH.ID
			INNER JOIN SPD_Item_Languages SIL on DI.ID = SIL.Item_ID and SIML.Language_Type_ID = SIL.Language_Type_ID
			WHERE DH.Batch_ID = @BatchID

			-- INSERT new records into the Langauge table
			INSERT INTO SPD_Item_Master_Languages (Michaels_SKU, Language_Type_ID, Translation_Indicator, Description_Short, Description_Long, Date_Requested, Created_User_ID, Date_Created, Modified_User_ID, Date_Last_Modified)
			Select DI.Michaels_SKU, SIL.Language_Type_ID, SIL.Translation_Indicator, SIL.Description_Short, SIL.Description_Long, GetDate(), 0, GetDate(), 0, GetDate()
			FROM SPD_Items as DI
			INNER JOIN SPD_Item_Headers as DH on DI.Item_Header_ID = DH.ID
			INNER JOIN SPD_Item_Languages as SIL on DI.ID = SIL.Item_ID
			LEFT JOIN SPD_Item_Master_Languages as SIML on SIML.Michaels_SKU = DI.Michaels_SKU AND SIML.Language_Type_ID = SIL.Language_Type_ID
			WHERE SIML.ID is null AND DH.Batch_ID = @BatchID
			
		END TRY
		
		BEGIN CATCH
			set @msg = 'Updating Item Master Languages from Domestic Item Languages Table pt 1... Error Occurred in Update' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			Rollback Tran
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			RETURN	
		END CATCH
		
		-- **********************************************************************************************
		-- Update Multilingual Info pt 2
		BEGIN TRY
			set @msg = 'Updating Item Master Languages from Domestic Item Languages Table pt 2. Batch ID: ' + @vcBatchID
			IF @Debug=1  Print @msg
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg

			-- FIRST, Update the Langauge table, in case the languages already exist.
			-- This should never be the case, but adding the code here in case we need to support it later.
			UPDATE SPD_Item_Master_Languages_Supplier
			SET Package_Language_Indicator = SIL.Package_Language_Indicator,
				Modified_User_ID = 0,
				Date_Last_Modified = getDate()
			FROM SPD_Item_Master_Languages_Supplier as SIML
			INNER JOIN SPD_Items as DI on SIML.Michaels_SKU = DI.Michaels_SKU
			INNER JOIN SPD_Item_Headers DH	on DI.Item_Header_ID = DH.ID
			INNER JOIN SPD_Item_Languages SIL on DI.ID = SIL.Item_ID and SIML.Language_Type_ID = SIL.Language_Type_ID AND SIML.Vendor_Number = coalesce(DH.US_Vendor_Num, DH.Canadian_Vendor_Num,0)
			WHERE DH.Batch_ID = @BatchID

			-- INSERT new records into the Langauge table
			INSERT INTO SPD_Item_Master_Languages_Supplier (Michaels_SKU, Vendor_Number, Language_Type_ID, Package_Language_Indicator, Created_User_ID, Date_Created, Modified_User_ID, Date_Last_Modified)
			Select DI.Michaels_SKU, coalesce(DH.US_Vendor_Num, DH.Canadian_Vendor_Num,0), SIL.Language_Type_ID, SIL.Package_Language_Indicator, 0, GetDate(), 0, GetDate()
			FROM SPD_Items as DI
			INNER JOIN SPD_Item_Headers as DH on DI.Item_Header_ID = DH.ID
			INNER JOIN SPD_Item_Languages as SIL on DI.ID = SIL.Item_ID
			LEFT JOIN SPD_Item_Master_Languages_Supplier as SIML on SIML.Michaels_SKU = DI.Michaels_SKU AND SIML.Vendor_Number = coalesce(DH.US_Vendor_Num, DH.Canadian_Vendor_Num,0) AND SIML.Language_Type_ID = SIL.Language_Type_ID
			WHERE SIML.ID is null AND DH.Batch_ID = @BatchID
			
		END TRY
		
		BEGIN CATCH
			set @msg = 'Updating Item Master Languages from Domestic Item Languages Table pt 2... Error Occurred in Update' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			Rollback Tran
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			RETURN	
		END CATCH
		
	END
	
	ELSE
	
	BEGIN
		-- ****************************************************************************
		-- From Import Update
		-- ****************************************************************************
		-- Update SKU Level Info
		Set @msg = 'Updating Item Master SKU from Import New Item. Batch: ' + @vcBatchID
		IF @Debug=1  Print @msg
		EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
		BEGIN TRY
			UPDATE [SPD_Item_Master_SKU]
				SET 
				Date_Last_Modified = @CurDate
				, Update_User_ID = 0
				, Planogram_Name = II.PlanogramName
				,[Buyer] = II.[Buyer]
				,[Buyer_Fax] = II.[Fax]
				,[Buyer_Email] = II.[Email]
				,[Season] = II.[Season]
				,CoinBattery = II.CoinBattery
				,[TSSA] = II.TSSA
				,[CSA] = II.CSA
				,[UL] = II.UL
				,[Licence_Agreement] = II.[LicenceAgreement]
				,[Fumigation_Certificate] = II.[FumigationCertificate]
				,[KILN_Dried_Certificate] = II.[KILNDriedCertificate]
				,[China_Com_Inspec_Num_And_CCIB_Stickers] = II.[ChinaComInspecNumAndCCIBStickers]
				,[Original_Visa] = II.[OriginalVisa]
				,[Textile_Declaration_Mid_Code] = II.[TextileDeclarationMidCode]
				,[Quota_Charge_Statement] = II.[QuotaChargeStatement]
				,[MSDS] = II.[MSDS]
				,[TSCA] = II.[TSCA]
				,[Drop_Bal_lTest_Cert] = II.[DropBallTestCert]
				,[Man_Medical_Device_Listing] = II.[ManMedicalDeviceListing]
				,[Man_FDA_Registration] = II.[ManFDARegistration]
				,[Copy_Right_Indemnification] = II.[CopyRightIndemnification]
				,[Fish_Wild_Life_Cert] = II.[FishWildLifeCert]
				,[Proposition_65_Label_Req] = II.[Proposition65LabelReq]
				,[CCCR] = II.[CCCR]
				,[Formaldehyde_Compliant] = II.[FormaldehydeCompliant]
				,[RMS_Sellable] = II.[RMS_Sellable]
				,[RMS_Orderable] = II.[RMS_Orderable]
				,[RMS_Inventory] = II.[RMS_Inventory]
				,[Store_Total] = II.[Store_Total]
				,[Displayer_Cost] = II.[Displayer_Cost]
				,Product_Cost = II.Product_Cost
				,[Item_Type] = II.[PackItemIndicator]
				,[Pack_Item_Indicator] = Case WHEN dbo.udf_SPD_PackItemLeft2(II.[PackItemIndicator]) in ('D','DP','SB')
												THEN 'Y' ELSE 'N' end
				,QuoteReferenceNumber = II.QuoteReferenceNumber
				,Customs_Description = II.Customs_Description
				, Updated_From_NewItem = 1
			FROM [SPD_Item_Master_SKU] SKU
				Join SPD_Import_Items II	on SKU.[Michaels_SKU] = II.MichaelsSKU
				join SPD_Batch B			on II.Batch_ID = B.ID
				join SPD_Workflow_Stage WS	on B.Workflow_Stage_ID = WS.ID
			WHERE B.ID = @BatchID
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and II.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master

			set @rows = @@Rowcount
			set @msg = '    Records Updated: ' + convert(varchar(20),@rows)
			IF @Debug=1  Print @msg
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
		END TRY

		BEGIN CATCH
			set @msg = 'Updating Item Master SKU from Import... Error Occurred in Update' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			Rollback Tran
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			RETURN	
		END CATCH

		-- Update UDA Level Data.  This should be an Insert as the data is not returned
		Set @msg = 'Updating Item Master UDA from Import New Item. Batch: ' + @vcBatchID
		IF @Debug=1  Print @msg
		EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
		BEGIN TRY
			-- ***************************************************************************
			-- First the Tax info: Update / Insert
			IF @Debug=1  Print 'Import Tax UDA'
			UPDATE SPD_Item_Master_UDA
				Set 
					UDA_ID = I.TaxUDA
					, UDA_Value = I.TaxValueUDA
			From SPD_Import_Items I
				Join SPD_Item_Master_UDA UDA		on I.MichaelsSKU = UDA.Michaels_SKU 
														and UDA.UDA_ID between 1 and 9 
				Join SPD_Batch B					on I.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
			WHERE B.ID = @BatchID
				and I.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE

			INSERT SPD_Item_Master_UDA ( Michaels_SKU, UDA_ID, UDA_Value )
			Select  
				I.MichaelsSKU
				, I.TaxUDA
				, I.TaxValueUDA
			From SPD_Import_Items I
				Join SPD_Batch B					on I.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Left Join SPD_Item_Master_UDA UDA	on I.MichaelsSKU = UDA.Michaels_SKU 
													and UDA.UDA_ID between 1 and 9 
			WHERE 	B.ID = @BatchID
				and I.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and UDA.UDA_ID is NULL

			-- ***************************************************************************
			-- Now the PrePriced: Update, Insert, Delete
			IF @Debug=1  Print 'Import PrePriced UDA'
			UPDATE SPD_Item_Master_UDA
				Set UDA_Value = I.PrePricedUDA
			FROM SPD_Import_Items I
				Join SPD_Batch B					on I.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Join SPD_Item_Master_UDA UDA		on I.MichaelsSKU = UDA.Michaels_SKU 
														and UDA.UDA_ID = 10
			WHERE B.ID = @BatchID			
				and I.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and I.PrePriced ='Y'			-- UDA defined in Item
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
																		
			INSERT SPD_Item_Master_UDA ( Michaels_SKU, UDA_ID, UDA_Value )
			Select  
				I.MichaelsSKU
				, 10
				, I.PrePricedUDA
			FROM SPD_Import_Items I
				Join SPD_Batch B					on I.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Left Join SPD_Item_Master_UDA UDA	on I.MichaelsSKU = UDA.Michaels_SKU 
														and UDA.UDA_ID = 10
			WHERE 	B.ID = @BatchID
				and I.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and I.PrePriced ='Y'			-- UDA defined in Item
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and UDA.UDA_ID is NULL			-- Does not exist in UDA Table

			DELETE UDA		-- Most likely this will never fire as New Items that are dups should be from Existing SKUs
			FROM SPD_Import_Items I
				Join SPD_Batch B					on I.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Join SPD_Item_Master_UDA UDA		on I.MichaelsSKU = UDA.Michaels_SKU 
														and UDA.UDA_ID = 10
			WHERE B.ID = @BatchID			
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and I.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and I.PrePriced ='N'			-- UDA defined in Item as NO	
							
			-- ***************************************************************************
			-- Now the Private Brand Label: Update and Insert
			IF @Debug=1  Print 'Import PBL UDA'
			UPDATE SPD_Item_Master_UDA
				Set 
					UDA_Value = coalesce(I.Private_Brand_Label,12)
			FROM SPD_Import_Items I
				Join SPD_Batch B					on I.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Join SPD_Item_Master_UDA UDA		on I.MichaelsSKU = UDA.Michaels_SKU 
														and UDA.UDA_ID = 11
			WHERE B.ID = @BatchID
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and I.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master

			INSERT SPD_Item_Master_UDA ( Michaels_SKU, UDA_ID, UDA_Value )
			Select  
				I.MichaelsSKU
				, 11
				, coalesce(I.Private_Brand_Label,12)
			From SPD_Import_Items I
				Join SPD_Batch B					on I.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Left Join SPD_Item_Master_UDA UDA	on I.MichaelsSKU = UDA.Michaels_SKU 
														and UDA.UDA_ID = 11
			WHERE 	B.ID = @BatchID
				and I.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and UDA.UDA_ID is NULL			-- Does not exist in UDA Table
		END TRY
		
		BEGIN CATCH
			set @msg = 'Updating Item Master UDA from Import... Error Occurred in Insert' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			Rollback Tran
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			RETURN
		END CATCH
		
		-- ***************************************************************************
		-- Update Vendor Level Info
		Set @msg = 'Updating Item Master Vendor from Import New Item. Batch: ' + @vcBatchID
		IF @Debug=1  Print @msg
		EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
		BEGIN TRY
			UPDATE SPD_Item_Master_Vendor
				SET
				Date_Last_Modified = @CurDate
				, Update_User_ID = 0
				, Hazardous_Manufacturer_Name = II.HazMatMFGName
				, Hazardous_Manufacturer_City = II.HazMatMFGCity
				, Hazardous_Manufacturer_State = II.HazMatMFGState
				, Hazardous_Manufacturer_Phone = II.HazMatMFGPhone
				, Hazardous_Manufacturer_Country = II.HazMatMFGCountry
				, Image_ID = (	Select [File_ID] 
								From [SPD_Items_Files]
								Where item_id = II.ID and [Item_Type] = 'I' and [File_Type] = 'IMG' )
				, MSDS_ID = (	Select [File_ID] 
								From [SPD_Items_Files]
								Where item_id = II.ID and [Item_Type] = 'I' and [File_Type] = 'MSDS' )
				,[PaymentTerms] = II.[PaymentTerms]
				,[Days] = II.[Days]
				,[Vendor_Min_Order_Amount] = case when isNumeric(II.[VendorMinOrderAmount]) = 1 then II.[VendorMinOrderAmount] else NULL END
				,[Vendor_Name] = II.[VendorName]
				,[Vendor_Address1] = II.[VendorAddress1]
				,[Vendor_Address2] = II.[VendorAddress2]
				,[Vendor_Address3] = II.[VendorAddress3]
				,[Vendor_Address4] = II.[VendorAddress4]
				,[Vendor_Contact_Name] = II.[VendorContactName]
				,[Vendor_Contact_Phone] = II.[VendorContactPhone]
				,[Vendor_Contact_Email] = II.[VendorContactEmail]
				,[Vendor_Contact_Fax] = II.[VendorContactFax]
				,[Manufacture_Name] = II.[ManufactureName]
				,[Manufacture_Address1] = II.[ManufactureAddress1]
				,[Manufacture_Address2] = II.[ManufactureAddress2]
				,[Manufacture_Contact] = II.[ManufactureContact]
				,[Manufacture_Phone] = II.[ManufacturePhone]
				,[Manufacture_Email] = II.[ManufactureEmail]
				,[Manufacture_Fax] = II.[ManufactureFax]
				,[Agent_Contact] = II.[AgentContact]
				,[Agent_Phone] = II.[AgentPhone]
				,[Agent_Email] = II.[AgentEmail]
				,[Agent_Fax] = II.[AgentFax]
				,[Harmonized_CodeNumber] = II.[HarmonizedCodeNumber]
				,[Detail_Invoice_Customs_Desc] = II.[DetailInvoiceCustomsDesc]
				,[Component_Material_Breakdown] = II.[ComponentMaterialBreakdown]
				,[Component_Construction_Method] = II.[ComponentConstructionMethod]
				,[Individual_Item_Packaging] = II.[IndividualItemPackaging]
				,[FOB_Shipping_Point] =  case when isNumeric(II.[FOBShippingPoint]) = 1 then II.[FOBShippingPoint] else NULL END
				,[Duty_Percent] = case when isNumeric(II.[DutyPercent]) = 1 then II.[DutyPercent] else NULL END
				,[Duty_Amount] = case when isNumeric(II.[DutyAmount]) = 1 then II.[DutyAmount] else NULL END
				,[Additional_Duty_Comment] = II.[AdditionalDutyComment]
				,[Additional_Duty_Amount] = case when isNumeric(II.[AdditionalDutyAmount]) = 1 and II.[AdditionalDutyAmount] not like '-79228%' then II.[AdditionalDutyAmount] else NULL END
				,[Ocean_Freight_Amount] = case when isNumeric(II.[OceanFreightAmount]) = 1 then II.[OceanFreightAmount] else NULL END
				,[Ocean_Freight_Computed_Amount] = case when isNumeric(II.[OceanFreightComputedAmount]) = 1 then II.[OceanFreightComputedAmount] else NULL END
				,[Agent_Commission_Percent] = case when isNumeric(II.[AgentCommissionPercent]) = 1 then II.[AgentCommissionPercent] else NULL END
				,[Agent_Commission_Amount] = case when isNumeric(II.[AgentCommissionAmount]) = 1 then II.[AgentCommissionAmount] else NULL END
				,[Other_Import_Costs_Percent] = case when isNumeric(II.[OtherImportCostsPercent]) = 1 then II.[OtherImportCostsPercent] else NULL END
				,[Other_Import_Costs_Amount] = case when isNumeric(II.[OtherImportCostsAmount]) = 1 then II.[OtherImportCostsAmount] else NULL END
				,[Packaging_Cost_Amount] = case when isNumeric(II.[PackagingCostAmount]) = 1 then II.[PackagingCostAmount] else NULL END
				,[Warehouse_Landed_Cost] = case when isNumeric(II.[WarehouseLandedCost]) = 1 then II.[WarehouseLandedCost] else NULL END
				,[Purchase_Order_Issued_To] = II.[PurchaseOrderIssuedTo]
				,[Shipping_Point] = Upper(II.[ShippingPoint])
				,[Vendor_Comments] = II.[VendorComments]
				,[Freight_Terms] = II.[FreightTerms]
				,[Outbound_Freight] = case when isNumeric(II.[OutboundFreight]) = 1 then II.[OutboundFreight] else NULL END
				,[Nine_Percent_Whse_Charge] = case when isNumeric(II.[NinePercentWhseCharge]) = 1 then II.[NinePercentWhseCharge] else NULL END
				,[Total_Store_Landed_Cost] = case when isNumeric(II.[TotalStoreLandedCost]) = 1 then II.[TotalStoreLandedCost] else NULL END
				,Vendor_Or_Agent = Case when A.Vendor_Number is NULL then 'V' else 'A' end
				,Agent_Type = Case when A.Vendor_Number is NULL then NULL else A.Agent end			
				,Updated_From_NewItem = 1
			FROM SPD_Item_Master_Vendor V
				Join SPD_Import_Items II	on V.[Michaels_SKU] = II.MichaelsSKU
											and V.Vendor_Number = II.VendorNumber
				join SPD_Batch B			on II.Batch_ID = B.ID
				join SPD_Workflow_Stage WS	on B.Workflow_Stage_ID = WS.ID
				left join SPD_Item_Master_Vendor_Agent A on V.Vendor_Number =  A.Vendor_Number
			WHERE B.ID = @BatchID
				and II.Valid_Existing_SKU = 0		-- Make sure that Item is new and not loaded initially from the Item Master
				and WS.Stage_Type_id = 4			-- ONLY COMPLETED BATCHES PLEASE

			set @rows = @@Rowcount
			IF @Debug=1  Print 'Records Updated'
			set @msg = '    Records Updated: ' + convert(varchar(20),@rows)
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
		END TRY
		BEGIN CATCH
			set @msg = 'Updating Item Master Vendor from Import... Error Occurred in Update' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			Rollback Tran
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			RETURN		
		END CATCH

		-- Update Vendor Country Level Info
		BEGIN TRY
			set @msg = 'Updating Item Master Vendor Countries from Import New Item. Batch ID: ' + @vcBatchID
			IF @Debug=1  Print @msg
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg

			UPDATE SPD_Item_Master_Vendor_Countries
			SET
				Date_Last_Modified = @CurDate
				, Update_User_ID = 0
				, [Each_Case_Height] = II.[eachheight]
				, [Each_Case_Width] = II.[eachwidth]
				, [Each_Case_Length] = II.[eachlength]
				, [Each_Case_Weight] = II.[eachweight]
				, [Each_LWH_UOM] = 'IN'
				, [Each_Weight_UOM] = 'LB'
				, [Each_Case_Cube] = II.[cubicfeeteach]
				, [Inner_Case_Height] = II.[reshippableinnercartonheight]
				, [Inner_Case_Width] = II.[reshippableinnercartonwidth]
				, [Inner_Case_Length] = II.[reshippableinnercartonlength]
				--, [Inner_Case_Weight] = II.[eachpiecenetweightlbsperounce]
				, [Inner_Case_Weight] = II.ReshippableInnerCartonWeight
				, [Inner_LWH_UOM] = 'IN'
				, [Inner_Weight_UOM] = 'LB'
				, [Master_Case_Height] = II.[mastercartondimensionsheight]
				, [Master_Case_Width] = II.[mastercartondimensionswidth]
				, [Master_Case_Length] = II.[mastercartondimensionslength]
				, [Master_Case_Weight] = II.[weightmastercarton]
				, [Master_LWH_UOM] = 'IN'
				, [Master_Weight_UOM] = 'LB'
				, Updated_From_NewItem = 1
			FROM SPD_Item_Master_Vendor_Countries VC
				Join SPD_Import_Items II	on VC.[Michaels_SKU] = II.MichaelsSKU
												and VC.Vendor_Number = II.VendorNumber
												and VC.Country_Of_Origin = II.[CountryOfOrigin]
				join SPD_Batch B			on II.Batch_ID = B.ID
				join SPD_Workflow_Stage WS	on B.Workflow_Stage_ID = WS.ID
			WHERE B.ID = @BatchID
				and II.Valid_Existing_SKU = 0		-- Make sure that Item is new and not loaded initially from the Item Master
				and WS.Stage_Type_id = 4			-- ONLY COMPLETED BATCHES PLEASE
		END TRY

		BEGIN CATCH
			set @msg = 'Updating Item Master Vendor Countries from Import... Error Occurred in Update' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			Rollback Tran
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			RETURN	
		END CATCH
		
		/* ******************************************************************************************************************* */
		-- Update Vendor Multiline info for above records where its the Updated_From_NewItem is at 1
		/* ******************************************************************************************************************* */
		BEGIN TRY
			declare @desc varchar(max), @SKU varchar(30), @VendorNo bigint, @break varchar(max), @method varchar(max)
			declare @r0 varchar(1000), @r1 varchar(1000), @r2 varchar(1000), @r3 varchar(1000), @r4 varchar(1000), @r5 varchar(1000)
			declare @t1 table  (ElementID int, Element varchar(max) )
			declare @c1 int, @c2 int, @c3 int
			select @c1= 0, @c2=0, @c3=0

			DECLARE row CURSOR FOR 
				SELECT 
					V.[Michaels_SKU]
					,V.[Vendor_Number]
					,V.[Detail_Invoice_Customs_Desc]
					,V.[Component_Material_Breakdown]
					,V.[Component_Construction_Method]
				FROM [dbo].[SPD_Item_Master_Vendor] V
					Join SPD_Import_Items II	on V.[Michaels_SKU] = II.MichaelsSKU
													and V.Vendor_Number = II.VendorNumber
													and II.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
					join SPD_Batch B			on II.Batch_ID = B.ID
					join SPD_Workflow_Stage WS	on B.Workflow_Stage_ID = WS.ID
				WHERE WS.Stage_Type_id = 4	-- ONLY COMPLETED BATCHES PLEASE
					and B.ID = @BatchID
					and (  [Detail_Invoice_Customs_Desc] is not null
						or [Component_Material_Breakdown] is not null
						or [Component_Construction_Method] is not null
						)
					and Updated_From_NewItem = 1	-- Been Update from New Item
					
			OPEN row
			FETCH NEXT FROM row INTO @SKU, @VendorNo, @desc, @break, @method;
			WHILE @@FETCH_STATUS = 0
			BEGIN
				UPDATE [SPD_Item_Master_Vendor]
					SET Updated_From_NewItem = 2	-- Flag that we have updated the multiline fields
				WHERE [Michaels_SKU] = @SKU and [Vendor_Number] = @VendorNo
					
				IF @desc is not NULL
				BEGIN 
					INSERT @t1
						Select ElementID, Element FROM SPLIT(@desc, '<MULTILINEDELIMITER>')
					
					-- Force the variables to be '' for each pass
					select @r0 = '',@r1 = '',@r2 = '',@r3 = '',@r4 = '',@r5 = ''
					Select @r0 = left(Element,1000) from @t1 where ElementID = 1
					Select @r1 = left(Element,1000) from @t1 where ElementID = 2
					Select @r2 = left(Element,1000) from @t1 where ElementID = 3
					Select @r3 = left(Element,1000) from @t1 where ElementID = 4
					Select @r4 = left(Element,1000) from @t1 where ElementID = 5
					Select @r5 = left(Element,1000) from @t1 where ElementID = 6

					DELETE FROM @t1

					Update [SPD_Item_Master_Vendor] 
						SET 
						  [Detail_Invoice_Customs_Desc0] = left(Coalesce(@r0,''), 1000)
						, [Detail_Invoice_Customs_Desc1] = left(Coalesce(@r1,''), 1000)
						, [Detail_Invoice_Customs_Desc2] = left(Coalesce(@r2,''), 1000)
						, [Detail_Invoice_Customs_Desc3] = left(Coalesce(@r3,''), 1000)
						, [Detail_Invoice_Customs_Desc4] = left(Coalesce(@r4,''), 1000)
						, [Detail_Invoice_Customs_Desc5] = left(Coalesce(@r5,''), 1000)
					--FROM [SPD_Item_Master_Vendor]
					WHERE [Michaels_SKU] = @SKU and [Vendor_Number] = @VendorNo
					SET @c1 = @c1 + 1	
				END
				
				IF @break is not NULL
				BEGIN

					INSERT @t1
						Select ElementID, Element FROM SPLIT(@break, '<MULTILINEDELIMITER>')

					select @r0 = '',@r1 = '',@r2 = '',@r3 = '',@r4 = '',@r5 = ''
					Select @r0 = left(Element,1000) from @t1 where ElementID = 1
					Select @r1 = left(Element,1000) from @t1 where ElementID = 2
					Select @r2 = left(Element,1000) from @t1 where ElementID = 3
					Select @r3 = left(Element,1000) from @t1 where ElementID = 4
					Select @r4 = left(Element,1000) from @t1 where ElementID = 5

					DELETE FROM @t1
					
					Update [SPD_Item_Master_Vendor] 
						SET 
  						  [Component_Material_Breakdown0] = left(coalesce(@r0,''), 1000)
						, [Component_Material_Breakdown1] = left(coalesce(@r1,''), 1000)
						, [Component_Material_Breakdown2] = left(coalesce(@r2,''), 1000)
						, [Component_Material_Breakdown3] = left(coalesce(@r3,''), 1000)
						, [Component_Material_Breakdown4] = left(coalesce(@r4,''), 1000)
					--FROM [SPD_Item_Master_Vendor]
					WHERE [Michaels_SKU] = @SKU and [Vendor_Number] = @VendorNo
					SET @c2 = @c2 + 1	
				END		

				IF @method is not NULL
				BEGIN
					Insert @t1
						Select ElementID, Element FROM SPLIT(@method, '<MULTILINEDELIMITER>')

					select @r0 = '',@r1 = '',@r2 = '',@r3 = '',@r4 = '',@r5 = ''
					Select @r0 = left(Element,1000) from @t1 where ElementID = 1
					Select @r1 = left(Element,1000) from @t1 where ElementID = 2
					Select @r2 = left(Element,1000) from @t1 where ElementID = 3
					Select @r3 = left(Element,1000) from @t1 where ElementID = 4
					delete from @t1
					
					Update [SPD_Item_Master_Vendor] 
						SET 
						  [Component_Construction_Method0] = left(coalesce(@r0,''), 1000)
						, [Component_Construction_Method1] = left(coalesce(@r1,''), 1000)
						, [Component_Construction_Method2] = left(coalesce(@r2,''), 1000)
						, [Component_Construction_Method3] = left(coalesce(@r3,''), 1000)
					--FROM [SPD_Item_Master_Vendor]
					WHERE [Michaels_SKU] = @SKU and [Vendor_Number] = @VendorNo
					SET @c3 = @c3 + 1	
				END	
				
				FETCH NEXT FROM row INTO @SKU, @VendorNo, @desc, @break, @method;
			END	
			CLOSE row;
			DEALLOCATE row;
			DELETE FROM @t1

			IF @Debug=1  Print 'MultiLines were Updated'
			set @msg = '   Total Count of Multiline Updates: ' + convert(varchar(20),(@c1 + @c2 + @c3))
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
		END TRY
		BEGIN CATCH
			set @msg = 'Updating Item Master Vendor MultiLines... Error Occurred in Update' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			IF @Debug=1  Print @msg
			Rollback Tran
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			CLOSE row;
			DEALLOCATE row;
			RETURN	
		END CATCH
		
		
		-- **********************************************************************************************
		-- Update Multilingual Info
		BEGIN TRY
			set @msg = 'Updating Item Master Languages from Import Item Languages Table pt 1. Batch ID: ' + @vcBatchID
			IF @Debug=1  Print @msg
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg

			-- FIRST, Update the Langauge table, in case the languages already exist.
			-- This should never be the case, but adding the code here in case we need to support it later.
			UPDATE SPD_Item_Master_Languages
			SET Translation_Indicator = SIIL.Translation_Indicator,
				Description_Short = SIIL.Description_Short,
				Description_Long = SIIL.Description_Long,
				Modified_User_ID = 0,
				Date_Requested = getDate(),
				Date_Last_Modified = getDate()
			FROM SPD_Item_Master_Languages as SIML
			INNER JOIN SPD_Import_Items as II on SIML.Michaels_SKU = II.MichaelsSKU
			INNER JOIN SPD_Import_Item_Languages SIIL on II.ID = SIIL.Import_Item_ID and SIML.Language_Type_ID = SIIL.Language_Type_ID
			WHERE II.Batch_ID = @BatchID

			-- INSERT new records into the Langauge table
			INSERT INTO SPD_Item_Master_Languages (Michaels_SKU, Language_Type_ID, Translation_Indicator, Description_Short, Description_Long, Date_Requested, Created_User_ID, Date_Created, Modified_User_ID, Date_Last_Modified)
			Select II.MichaelsSKU, SIIL.Language_Type_ID, SIIL.Translation_Indicator, SIIL.Description_Short, SIIL.Description_Long, GetDate(), 0, GetDate(), 0, GetDate()
			FROM SPD_Import_Items as II
			INNER JOIN SPD_Import_Item_Languages as SIIL on II.ID = SIIL.Import_Item_ID
			LEFT JOIN SPD_Item_Master_Languages as SIML on SIML.Michaels_SKU = II.MichaelsSKU AND SIML.Language_Type_ID = SIIL.Language_Type_ID
			WHERE SIML.ID is null AND II.Batch_ID = @BatchID

		END TRY
		
		BEGIN CATCH
			set @msg = 'Updating Item Master Languages from Import Item Languages Table pt 1... Error Occurred in Update' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			Rollback Tran
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			RETURN	
		END CATCH
		
		-- **********************************************************************************************
		-- Update Multilingual Info
		BEGIN TRY
			set @msg = 'Updating Item Master Languages from Import Item Languages Table pt 2. Batch ID: ' + @vcBatchID
			IF @Debug=1  Print @msg
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg

			-- FIRST, Update the Langauge table, in case the languages already exist.
			-- This should never be the case, but adding the code here in case we need to support it later.
			UPDATE SPD_Item_Master_Languages_Supplier
			SET Package_Language_Indicator = SIIL.Package_Language_Indicator,
				Modified_User_ID = 0,
				Date_Last_Modified = getDate()
			FROM SPD_Item_Master_Languages_Supplier as SIML
			INNER JOIN SPD_Import_Items as II on SIML.Michaels_SKU = II.MichaelsSKU
			INNER JOIN SPD_Import_Item_Languages SIIL on II.ID = SIIL.Import_Item_ID and SIML.Language_Type_ID = SIIL.Language_Type_ID and SIML.Vendor_Number = II.VendorNumber
			WHERE II.Batch_ID = @BatchID

			-- INSERT new records into the Langauge table
			INSERT INTO SPD_Item_Master_Languages_Supplier (Michaels_SKU, Vendor_Number, Language_Type_ID, Package_Language_Indicator, Created_User_ID, Date_Created, Modified_User_ID, Date_Last_Modified)
			Select II.MichaelsSKU, II.VendorNumber, SIIL.Language_Type_ID, SIIL.Package_Language_Indicator, 0, GetDate(), 0, GetDate()
			FROM SPD_Import_Items as II
			INNER JOIN SPD_Import_Item_Languages as SIIL on II.ID = SIIL.Import_Item_ID
			LEFT JOIN SPD_Item_Master_Languages_supplier as SIML on SIML.Michaels_SKU = II.MichaelsSKU AND SIML.Language_Type_ID = SIIL.Language_Type_ID and SIML.Vendor_Number = II.VendorNumber
			WHERE SIML.ID is null AND II.Batch_ID = @BatchID

		END TRY
		
		BEGIN CATCH
			set @msg = 'Updating Item Master Languages from Import Item Languages Table pt 2... Error Occurred in Update' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			Rollback Tran
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			RETURN	
		END CATCH		
		
	END	
	
	Commit Tran
	IF @Debug=1  Print 'Updating Item Master Proc Ends'
	EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M='Updating Item Master From New Item Proc Ends'


END

GO


ALTER PROCEDURE [dbo].[usp_SPD_Validation_ValidateBatch]
  @batchID bigint
AS

  declare @batchErrors int
  set @batchErrors = 0
  
  declare @batchType int
  declare @hid int
  declare @DPCount int
  declare @DCount int
  declare @CCount int
  declare @itemCount int
  declare @costParent money, @costChildren money
  declare @int1 int, @int2 int, @int3 int
  declare @str1 varchar(255)
  declare @reg bit
  declare @US varchar(50), @CANADA varchar(50), @BOTH varchar(50)
  declare @SKUGroupD varchar(50)
  declare @d int
  
  
  select @batchType = Batch_Type_ID from SPD_Batch where [ID] = @batchID
  
  if (@batchType = 2)
  begin
    -----------------------------
    -- IMPORT BATCH
    -----------------------------
    --select @hid = [ID] from SPD_Item_Headers where Batch_ID = @batchID
    select @itemCount = isnull(count(1), 0) from SPD_Import_Items i where i.Batch_ID = @batchID
    select @DPCount = isnull(count(1), 0) from SPD_Import_Items i where i.Batch_ID = @batchID and COALESCE(RTRIM(REPLACE(LEFT(i.[PackItemIndicator],2), '-', '')), '') = 'DP' and COALESCE(i.[RegularBatchItem], 0) = 0
    select @DCount = isnull(count(1), 0) from SPD_Import_Items i where i.Batch_ID = @batchID and COALESCE(RTRIM(REPLACE(LEFT(i.[PackItemIndicator],2), '-', '')), '') in ('D' ,'SB') and COALESCE(i.[RegularBatchItem], 0) = 0
    select @CCount = isnull(count(1), 0) from SPD_Import_Items i 
      where i.Batch_ID = @batchID 
        and 
        (
          COALESCE(RTRIM(REPLACE(LEFT(i.[PackItemIndicator],2), '-', '')), '') = 'C' 
          or
          ( COALESCE(RTRIM(REPLACE(LEFT(i.[PackItemIndicator],1), '-', '')), '') not in ('D','SB') and isnull(i.Valid_Existing_SKU, 0) = 1)
        )
        and COALESCE(i.[RegularBatchItem], 0) = 0
    
    -- START ERRORS - IMPORT ---------------------------
    
    --None = 0
    --DDPMultipleParents = 1
    if ((@DPCount + @DCount) > 1) set @batchErrors = @batchErrors + 1
    --DDPNoComponents = 2
    if ((@DPCount + @DCount) >= 1 and @CCount <= 0) set @batchErrors = @batchErrors + 2
    --DDPMissingParent = 4
    if (@CCount >= 1 and (@DPCount + @DCount) <= 0) set @batchErrors = @batchErrors + 4
    --DDPMissingTypes = 8
    if ( (@DPCount > 0 or @DCount > 0 or @CCount > 0) and ( (@CCount + @DCount + @DPCount) != @itemCount)) set @batchErrors = @batchErrors + 8
    ----------
    -- D/DP --
    ----------
    if ((@DPCount + @DCount) = 1)
    begin
      --DDPComponentsNotActive = 16
      -- ... currently, not enough data to implement this validation rule !
      --DDPPackCost1NotEqual = 32
      select @costParent = sum(coalesce(convert(decimal(18, 6), i.Product_Cost), 0)) from SPD_Import_Items i where i.Batch_ID = @batchID and COALESCE(RTRIM(REPLACE(LEFT(i.[PackItemIndicator],2), '-', '')), '') IN ('DP', 'D','SB')
      select @costChildren = sum(isnull(i.Qty_In_Pack, 0) * coalesce(convert(decimal(18, 6), i.Product_Cost), 0)) from SPD_Import_Items i where i.Batch_ID = @batchID and 
        ( COALESCE(RTRIM(REPLACE(LEFT(i.[PackItemIndicator],2), '-', '')), '') = 'C' or ( COALESCE(RTRIM(REPLACE(LEFT(i.[PackItemIndicator],1), '-', '')), '') not in ('D', 'SB') and isnull(i.Valid_Existing_SKU, 0) = 1) )
      if (isnull(@costParent, 0) != isnull(@costChildren, 0)) set @batchErrors = @batchErrors + 32
      -------select @costParent as [PARENT], @costChildren as [CHILDREN]
      --DDPPackCost2NotEqual = 64
      -- ... not needed for Import Batch
      
      ------------
      -- DP ONLY --
      ------------
      if (@DPCount = 1)
      begin
        --DDPSameSKUGroup = 128
        -- REMOVED FROM THE SPEDY REQUIREMENTS
        -- NOPE PUT BACK FOR DP ONLY
        select @int1 = count(distinct i.SKUGroup) from SPD_Import_Items i where i.Batch_ID = @batchID
        if (@int1 > 1) set @batchErrors = @batchErrors + 128
        --DPComponentsSameItemTypeAttribute = 256
        select @int1 = count(distinct i.ItemTypeAttribute) from SPD_Import_Items i where i.Batch_ID = @batchID and ( COALESCE(RTRIM(REPLACE(LEFT(i.[PackItemIndicator],2), '-', '')), '') = 'C' or ( COALESCE(RTRIM(REPLACE(LEFT(i.[PackItemIndicator],1), '-', '')), '') not in ('D','SB') and isnull(i.Valid_Existing_SKU, 0) = 1) )
        if (@int1 > 1) set @batchErrors = @batchErrors + 256
        --DPComponentsSameStockCategory = 512
        select @int1 = count(distinct i.StockCategory) from SPD_Import_Items i where i.Batch_ID = @batchID and ( COALESCE(RTRIM(REPLACE(LEFT(i.[PackItemIndicator],2), '-', '')), '') = 'C' or ( COALESCE(RTRIM(REPLACE(LEFT(i.[PackItemIndicator],1), '-', '')), '') not in ('D','SB') and isnull(i.Valid_Existing_SKU, 0) = 1) )
        if (@int1 > 1) set @batchErrors = @batchErrors + 512
        
        --DPComponentsSameStockingStrategyCode = 1024
        select @int1 = count(distinct i.Stocking_Strategy_Code) from SPD_Import_Items i where i.Batch_ID = @batchID and ( COALESCE(RTRIM(REPLACE(LEFT(i.[PackItemIndicator],2), '-', '')), '') = 'C' or ( COALESCE(RTRIM(REPLACE(LEFT(i.[PackItemIndicator],1), '-', '')), '') not in ('D','SB') and isnull(i.Valid_Existing_SKU, 0) = 1) )
        if (@int1 > 1) set @batchErrors = @batchErrors + 1024
        
        ----DPComponentsSameHybridInfo = 1024
        --select @int1 = count(distinct i.HybridType) from SPD_Import_Items i where i.Batch_ID = @batchID and ( COALESCE(RTRIM(REPLACE(LEFT(i.[PackItemIndicator],2), '-', '')), '') = 'C' or ( COALESCE(RTRIM(REPLACE(LEFT(i.[PackItemIndicator],1), '-', '')), '') != 'D' and isnull(i.Valid_Existing_SKU, 0) = 1) )
        --select @int2 = count(distinct i.SourcingDC) from SPD_Import_Items i where i.Batch_ID = @batchID and ( COALESCE(RTRIM(REPLACE(LEFT(i.[PackItemIndicator],2), '-', '')), '') = 'C' or ( COALESCE(RTRIM(REPLACE(LEFT(i.[PackItemIndicator],1), '-', '')), '') != 'D' and isnull(i.Valid_Existing_SKU, 0) = 1) )
        --if (@int1 > 1 or @int2 > 1) set @batchErrors = @batchErrors + 1024
        
        --DPSamePrimaryVendor = 2048
        select @int1 = count(distinct i.Vendor) from SPD_Import_Items i where i.Batch_ID = @batchID
        if (@int1 > 1) set @batchErrors = @batchErrors + 2048
        --DPComponentsSameHierarchy = 4096
        select @int1 = count(distinct i.Class) from SPD_Import_Items i where i.Batch_ID = @batchID and ( COALESCE(RTRIM(REPLACE(LEFT(i.[PackItemIndicator],2), '-', '')), '') = 'C' or ( COALESCE(RTRIM(REPLACE(LEFT(i.[PackItemIndicator],1), '-', '')), '') not in ('D','SB') and isnull(i.Valid_Existing_SKU, 0) = 1) )
        select @int2 = count(distinct i.SubClass) from SPD_Import_Items i where i.Batch_ID = @batchID and ( COALESCE(RTRIM(REPLACE(LEFT(i.[PackItemIndicator],2), '-', '')), '') = 'C' or ( COALESCE(RTRIM(REPLACE(LEFT(i.[PackItemIndicator],1), '-', '')), '') not in ('D','SB') and isnull(i.Valid_Existing_SKU, 0) = 1) )
        select @int3 = count(distinct i.Dept) from SPD_Import_Items i where i.Batch_ID = @batchID and ( COALESCE(RTRIM(REPLACE(LEFT(i.[PackItemIndicator],2), '-', '')), '') = 'C' or ( COALESCE(RTRIM(REPLACE(LEFT(i.[PackItemIndicator],1), '-', '')), '') not in ('D','SB') and isnull(i.Valid_Existing_SKU, 0) = 1) )
        if (@int1 > 1 or @int2 > 1 or @int3 > 1) set @batchErrors = @batchErrors + 4096
      end 
      
      ------------
      -- D ONLY --
      ------------
      if (@DCount = 1)
      begin
        --SKUGroupRules = 131072
        select @US = 'US ONLY'
        select @CANADA = 'CANADA ONLY'
        select @BOTH = 'US AND CANADA'
        select @SKUGroupD = RTRIM(LTRIM(UPPER(SKUGroup))) from SPD_Import_Items i where i.Batch_ID = @batchID and COALESCE(RTRIM(REPLACE(LEFT(i.[PackItemIndicator],2), '-', '')), '') in ('D','SB') and COALESCE(i.[RegularBatchItem], 0) = 0
        select @d = case @SKUGroupD
          when @US then 1
          when @CANADA then 2
          when @BOTH then 3
          else 0
          end
        -- US
        select @int1 = isnull(count(1), 0) from SPD_Import_Items i 
          where i.Batch_ID = @batchID and (
              COALESCE(RTRIM(REPLACE(LEFT(i.[PackItemIndicator],1), '-', '')), '') = 'C' 
              or
              ( COALESCE(RTRIM(REPLACE(LEFT(i.[PackItemIndicator],1), '-', '')), '') not in ('D','SB') and isnull(i.Valid_Existing_SKU, 0) = 1)
            ) and COALESCE(i.[RegularBatchItem], 0) = 0 
            and SKUGroup = @US
        -- CANADA
        select @int2 = isnull(count(1), 0) from SPD_Import_Items i 
          where i.Batch_ID = @batchID and (
              COALESCE(RTRIM(REPLACE(LEFT(i.[PackItemIndicator],1), '-', '')), '') = 'C' 
              or
              ( COALESCE(RTRIM(REPLACE(LEFT(i.[PackItemIndicator],1), '-', '')), '') not in ('D','SB') and isnull(i.Valid_Existing_SKU, 0) = 1)
            ) and COALESCE(i.[RegularBatchItem], 0) = 0 
            and SKUGroup = @CANADA
        -- BOTH
        select @int3 = isnull(count(1), 0) from SPD_Import_Items i 
          where i.Batch_ID = @batchID and (
              COALESCE(RTRIM(REPLACE(LEFT(i.[PackItemIndicator],1), '-', '')), '') = 'C' 
              or
              ( COALESCE(RTRIM(REPLACE(LEFT(i.[PackItemIndicator],1), '-', '')), '') not in ('D','SB') and isnull(i.Valid_Existing_SKU, 0) = 1)
            ) and COALESCE(i.[RegularBatchItem], 0) = 0 
            and SKUGroup = @BOTH
        -- COMPARE
        if (
          (@int1 = 0 and @int2 = 0 and @int3 > 0 and @d = 0) or
          (@int1 = 0 and @int2 > 0 and @int3 = 0 and @d != 2) or
          (@int1 > 0 and @int2 = 0 and @int3 = 0 and @d != 1) or
          (@int1 > 0 and @int2 = 0 and @int3 > 0 and @d != 1) or
          (@int1 = 0 and @int2 > 0 and @int3 > 0 and @d != 2) or
          (@int1 > 0 and @int2 > 0) or
          (@int1 > 0 and @int2 > 0 and @int3 > 0))
        begin
          set @batchErrors = @batchErrors + 131072
        end
      end -- if (@DCount = 1)
      
    end
    
    --DuplicateSKUs = 65536
    select @int1 = count(i.[ID]) from SPD_Import_items i
      inner join (select ii.MichaelsSKU, count(ii.MichaelsSKU) as SKUCount from SPD_Import_items ii where ii.Batch_ID = @batchID group by ii.MichaelsSKU having count(ii.MichaelsSKU) > 1) t
        on i.MichaelsSKU = t.MichaelsSKU
    where i.[Batch_ID] = @batchID
    if (@int1 > 0) set @batchErrors = @batchErrors + 65536
    
    -- END ERRORS - IMPORT ---------------------------
  end
  else
  begin
    -----------------------------
    -- DOMESTIC BATCH
    -----------------------------
    select @hid = [ID] from SPD_Item_Headers where Batch_ID = @batchID
    select @itemCount = isnull(count(1), 0) from SPD_Items i where i.Item_Header_ID = @hid
    select @DPCount = isnull(count(1), 0) from SPD_Items i where i.Item_Header_ID = @hid and COALESCE(RTRIM(REPLACE(LEFT(i.[Pack_Item_Indicator],2), '-', '')), '') = 'DP' 
    select @DCount = isnull(count(1), 0) from SPD_Items i where i.Item_Header_ID = @hid and COALESCE(RTRIM(REPLACE(LEFT(i.[Pack_Item_Indicator],2), '-', '')), '') in ('D' ,'SB')
    select @CCount = isnull(count(1), 0) 
      from SPD_Items i 
      where i.Item_Header_ID = @hid 
      and 
      (
        COALESCE(RTRIM(REPLACE(LEFT(i.[Pack_Item_Indicator],2), '-', '')), '') = 'C'
        or
        (COALESCE(RTRIM(REPLACE(LEFT(i.[Pack_Item_Indicator],1), '-', '')), '') not in ('D','SB') and isnull(i.Valid_Existing_SKU, 0) = 1)
      )
    
    -- START ERRORS - DOMESTIC ---------------------------
    
    --None = 0
    --DDPMultipleParents = 1
    if ((@DPCount + @DCount) > 1) set @batchErrors = @batchErrors + 1
    --DDPNoComponents = 2
    if ((@DPCount + @DCount) >= 1 and @CCount <= 0) set @batchErrors = @batchErrors + 2
    --DDPMissingParent = 4
    if (@CCount >= 1 and (@DPCount + @DCount) <= 0) set @batchErrors = @batchErrors + 4
    --DDPMissingTypes = 8
    if ( (@DPCount > 0 or @DCount > 0 or @CCount > 0) and ( (@CCount + @DCount + @DPCount) != @itemCount)) set @batchErrors = @batchErrors + 8
    ----------
    -- D/DP --
    ----------
    if ((@DPCount + @DCount) = 1)
    begin
      --DDPComponentsNotActive = 16
      -- ... currently, not enough data to implement this validation rule !
      --DDPPackCost1NotEqual = 32
      select @costParent = sum(i.US_Cost) from SPD_Items i where i.Item_Header_ID = @hid and COALESCE(RTRIM(REPLACE(LEFT(i.[Pack_Item_Indicator],2), '-', '')), '') IN ('DP', 'D','SB')
      select @costChildren = sum(isnull(i.Qty_In_Pack, 1) * isnull(i.Us_Cost, 0)) from SPD_Items i where i.Item_Header_ID = @hid and ( COALESCE(RTRIM(REPLACE(LEFT(i.[Pack_Item_Indicator],2), '-', '')), '') = 'C' or (COALESCE(RTRIM(REPLACE(LEFT(i.[Pack_Item_Indicator],1), '-', '')), '') not in ('D','SB')  and isnull(i.Valid_Existing_SKU, 0) = 1) )
      if (isnull(@costParent, 0) != isnull(@costChildren, 0)) set @batchErrors = @batchErrors + 32
      --DDPPackCost2NotEqual = 64
      select @costParent = sum(i.Canada_Cost) from SPD_Items i where i.Item_Header_ID = @hid and COALESCE(RTRIM(REPLACE(LEFT(i.[Pack_Item_Indicator],2), '-', '')), '') IN ('DP', 'D','SB')
      select @costChildren = sum(isnull(i.Qty_In_Pack, 1) * isnull(i.Canada_Cost, 0)) from SPD_Items i where i.Item_Header_ID = @hid and ( COALESCE(RTRIM(REPLACE(LEFT(i.[Pack_Item_Indicator],2), '-', '')), '') = 'C' or (COALESCE(RTRIM(REPLACE(LEFT(i.[Pack_Item_Indicator],1), '-', '')), '') not in ('D','SB')  and isnull(i.Valid_Existing_SKU, 0) = 1) )
      if (isnull(@costParent, 0) != isnull(@costChildren, 0)) set @batchErrors = @batchErrors + 64
      
      
      
      ------------
      -- DP ONLY --
      ------------
      if (@DPCount = 1)
      begin
        --DDPSameSKUGroup = 128
        select @int1 = isnull(count(1), 0) from SPD_Items i 
          inner join SPD_Item_Headers ih on i.Item_Header_ID = ih.[ID]
          inner join [vwItemMaintItemDetailBySKU] v on
		        v.SKU = i.Michaels_SKU and v.VendorNumber = COALESCE(ih.US_Vendor_Num, ih.Canadian_Vendor_Num, '') and v.VendorNumber != ''
          where i.Item_Header_ID = @hid and (
            (COALESCE(RTRIM(REPLACE(LEFT(i.[Pack_Item_Indicator],1), '-', '')), '') not in ('D','SB') and isnull(i.Valid_Existing_SKU, 0) = 1)
          ) and v.SKUGroup != ih.SKU_Group
          
        if (@int1 > 0) set @batchErrors = @batchErrors + 128 
        
        --DPComponentsSameItemTypeAttribute = 256
        -- ... not needed for Domestic because Item_Type_Attribute is in the header !
        --DPComponentsSameStockCategory = 512
        -- ... not needed for Domestic because Stock_Category is in the header !
        
        --DPComponentsSameStockingStrategyCode = 1024
        select @int1 = count(distinct i.Stocking_Strategy_Code) from SPD_Items i where i.Item_Header_ID = @hid and ( COALESCE(RTRIM(REPLACE(LEFT(i.[Pack_Item_Indicator],2), '-', '')), '') = 'C' or (COALESCE(RTRIM(REPLACE(LEFT(i.[Pack_Item_Indicator],1), '-', '')), '') not in ('D','SB') and isnull(i.Valid_Existing_SKU, 0) = 1) )
        if (@int1 > 1) set @batchErrors = @batchErrors + 1024
        
        ----DPComponentsSameHybridInfo = 1024
        --select @int1 = count(distinct i.Hybrid_Type) from SPD_Items i where i.Item_Header_ID = @hid and ( COALESCE(RTRIM(REPLACE(LEFT(i.[Pack_Item_Indicator],2), '-', '')), '') = 'C' or (COALESCE(RTRIM(REPLACE(LEFT(i.[Pack_Item_Indicator],1), '-', '')), '') != 'D' and isnull(i.Valid_Existing_SKU, 0) = 1) )
        --select @int2 = count(distinct i.Hybrid_Source_DC) from SPD_items i where i.Item_Header_ID = @hid and ( COALESCE(RTRIM(REPLACE(LEFT(i.[Pack_Item_Indicator],2), '-', '')), '') = 'C' or (COALESCE(RTRIM(REPLACE(LEFT(i.[Pack_Item_Indicator],1), '-', '')), '') != 'D' and isnull(i.Valid_Existing_SKU, 0) = 1) )
        --if (@int1 > 1 or @int2 > 1) set @batchErrors = @batchErrors + 1024
        
        
        --DPSamePrimaryVendor = 2048
        -- ... not needed for Domestic because Vendor is in the header !
        --DPComponentsSameHierarchy = 4096
        select @int1 = count(distinct i.Class_Num) from SPD_Items i where i.Item_Header_ID = @hid and ( COALESCE(RTRIM(REPLACE(LEFT(i.[Pack_Item_Indicator],2), '-', '')), '') = 'C' or (COALESCE(RTRIM(REPLACE(LEFT(i.[Pack_Item_Indicator],1), '-', '')), '') not in ('D','SB') and isnull(i.Valid_Existing_SKU, 0) = 1) )
        select @int2 = count(distinct i.Sub_Class_Num) from SPD_items i where i.Item_Header_ID = @hid and ( COALESCE(RTRIM(REPLACE(LEFT(i.[Pack_Item_Indicator],2), '-', '')), '') = 'C' or (COALESCE(RTRIM(REPLACE(LEFT(i.[Pack_Item_Indicator],1), '-', '')), '') not in ('D','SB') and isnull(i.Valid_Existing_SKU, 0) = 1) )
        if (@int1 > 1 or @int2 > 1) set @batchErrors = @batchErrors + 4096
      end 
      ------------
      -- D ONLY --
      ------------
      if (@DCount = 1)
      begin
        --SKUGroupRules = 131072
        select @US = 'US ONLY'
        select @CANADA = 'CANADA ONLY'
        select @BOTH = 'US AND CANADA'
        select @SKUGroupD = RTRIM(LTRIM(UPPER(SKU_Group))) from SPD_Item_Headers i where i.[ID] = @hid
        select @d = case @SKUGroupD
          when @US then 1
          when @CANADA then 2
          when @BOTH then 3
          else 0
          end
        -- US
        select @int1 = isnull(count(1), 0) from SPD_Items i 
          inner join SPD_Item_Headers ih on i.Item_Header_ID = ih.[ID]
          inner join [vwItemMaintItemDetailBySKU] v on
		        v.SKU = i.Michaels_SKU and v.VendorNumber = COALESCE(ih.US_Vendor_Num, ih.Canadian_Vendor_Num, '') and v.VendorNumber != ''
          where i.Item_Header_ID = @hid and (
            (COALESCE(RTRIM(REPLACE(LEFT(i.[Pack_Item_Indicator],1), '-', '')), '') not in ('D','SB') and isnull(i.Valid_Existing_SKU, 0) = 1)
          ) and v.SKUGroup = @US
        -- CANADA
        select @int2 = isnull(count(1), 0) from SPD_Items i 
          inner join SPD_Item_Headers ih on i.Item_Header_ID = ih.[ID]
          inner join [vwItemMaintItemDetailBySKU] v on
		        v.SKU = i.Michaels_SKU and v.VendorNumber = COALESCE(ih.US_Vendor_Num, ih.Canadian_Vendor_Num, '') and v.VendorNumber != ''
          where i.Item_Header_ID = @hid and (
            (COALESCE(RTRIM(REPLACE(LEFT(i.[Pack_Item_Indicator],1), '-', '')), '') not in ('D','SB') and isnull(i.Valid_Existing_SKU, 0) = 1)
          ) and v.SKUGroup = @CANADA
        -- BOTH
        select @int3 = isnull(count(1), 0) from SPD_Items i 
          inner join SPD_Item_Headers ih on i.Item_Header_ID = ih.[ID]
          inner join [vwItemMaintItemDetailBySKU] v on
		        v.SKU = i.Michaels_SKU and v.VendorNumber = COALESCE(ih.US_Vendor_Num, ih.Canadian_Vendor_Num, '') and v.VendorNumber != ''
          where i.Item_Header_ID = @hid and (
            (COALESCE(RTRIM(REPLACE(LEFT(i.[Pack_Item_Indicator],1), '-', '')), '') not in ('D','SB') and isnull(i.Valid_Existing_SKU, 0) = 1)
          ) and v.SKUGroup = @BOTH
        -- COMPARE
        if (
          (@int1 = 0 and @int2 = 0 and @int3 > 0 and @d = 0) or
          (@int1 = 0 and @int2 > 0 and @int3 = 0 and @d != 2) or
          (@int1 > 0 and @int2 = 0 and @int3 = 0 and @d != 1) or
          (@int1 > 0 and @int2 = 0 and @int3 > 0 and @d != 1) or
          (@int1 = 0 and @int2 > 0 and @int3 > 0 and @d != 2) or
          (@int1 > 0 and @int2 > 0) or
          (@int1 > 0 and @int2 > 0 and @int3 > 0))
        begin
          set @batchErrors = @batchErrors + 131072
        end
      end -- if (@DCount = 1)
      
    end
    
    --DuplicateSKUs = 65536
    select @int1 = count(i.[ID]) from SPD_Items i
      inner join (select ii.Michaels_SKU, count(ii.Michaels_SKU) as SKUCount from SPD_Items ii where ii.Item_Header_ID = @hid group by ii.Michaels_SKU having count(ii.Michaels_SKU) > 1) t
        on i.Michaels_SKU = t.Michaels_SKU
    where i.Item_Header_ID = @hid
    if (@int1 > 0) set @batchErrors = @batchErrors + 65536
    
    -- END ERRORS - DOMESTIC ---------------------------
  end



  select @batchErrors as [BatchErrors]

GO


ALTER PROCEDURE [dbo].[usp_SPD_Validation_ValidateImportItem]
  @itemID bigint
AS

  declare @itemErrors int
  set @itemErrors = 0
  
  declare @batchID bigint, @parentID int
  declare @batchType int
  declare @hid int
  declare @DPCount int
  declare @DCount int
  declare @CCount int
  declare @itemCount int
  declare @costParent money, @costChildren money
  declare @int1 int, @int2 int, @int3 int
  declare @str1 varchar(255)
  declare @reg bit
  
  declare @str varchar(20), @int int, @bigint bigint, @bit bit 
  
  --select @batchID = [BatchID] from vwItemMaintItemDetail where [ID] = @itemID
  select @batchID = [Batch_ID] from SPD_Import_Items where [ID] = @itemID
  
  select @batchType = Batch_Type_ID from SPD_Batch where [ID] = @batchID
  
  declare @itemType varchar(20)
  
  select @itemType = REPLACE(LEFT(COALESCE(i.PackItemIndicator, ''), 2), '-', '') from SPD_Import_Items i 
    where i.[ID] = @itemID
  
  
  -----------------------------
  -- IMPORT BATCH
  -----------------------------
  select @itemCount = isnull(count(1), 0) from SPD_Import_Items i where i.[Batch_ID] = @batchID
  
  select @DPCount = isnull(count(1), 0) from SPD_Import_Items i 
    where i.[Batch_ID] = @batchID and COALESCE(RTRIM(REPLACE(LEFT(COALESCE(i.[PackItemIndicator], ''),2), '-', '')), '')  = 'DP' 
  
  select @DCount = isnull(count(1), 0) from SPD_Import_Items i 
    where i.[Batch_ID] = @batchID and COALESCE(RTRIM(REPLACE(LEFT(COALESCE(i.[PackItemIndicator], ''),2), '-', '')), '') in( 'D' ,'SB')
  
  select @CCount = isnull(count(1), 0) from SPD_Import_Items i 
    where i.[Batch_ID] = @batchID and 
      ( COALESCE(RTRIM(REPLACE(LEFT(i.[PackItemIndicator],2), '-', '')), '') = 'C' or  COALESCE(RTRIM(REPLACE(LEFT(i.[PackItemIndicator],1), '-', '')), '') not in('D','SB') and isnull(i.Valid_Existing_SKU, 0) = 1) 

  -- START ERRORS - IMPORT ---------------------------
  
  --None = 0

  ----------
  -- D/DP --
  ----------
  if ((@DPCount + @DCount) = 1)
  begin
  
    if (@itemType != 'D' and @itemType != 'DP' and @itemType != 'SB')
    begin
    
      -- --------------------------------------------
      -- ONLY C (COMPONENT) ITEMS
      -- --------------------------------------------
      
      if (@DPCount = 1)
      begin
        
        declare @ItemTypeAttributeDP varchar(20) 
        declare @StockCategoryDP varchar(20)
        --declare @HybridTypeDP varchar(20)
        --declare @HybridSourceDCDP varchar(20)
        declare @StockingStrategyCodeDP nvarchar(20)
        declare @DepartmentNumDP int, @ClassNumDP int, @SubClassNumDP int 
        declare @VendorNumberDP bigint -- header
        set @parentID = 0
        select @parentID = i.[ID]
        from SPD_Import_Items i 
        where i.[Batch_ID] = @batchID and COALESCE(RTRIM(REPLACE(LEFT(COALESCE(i.[PackItemIndicator], ''),2), '-', '')), '') = 'DP' 
        
        select 
          @ItemTypeAttributeDP = COALESCE(i.ItemTypeAttribute, ''),
          @StockCategoryDP = COALESCE(i.StockCategory, ''),
          --@HybridTypeDP = COALESCE(i.HybridType, ''),
          --@HybridSourceDCDP = COALESCE(i.SourcingDC, ''),
          @StockingStrategyCodeDP = COALESCE(i.Stocking_Strategy_Code,''),
          @DepartmentNumDP = COALESCE(i.Dept, 0),
          @ClassNumDP = COALESCE(i.Class, 0),
          @SubClassNumDP = COALESCE(i.SubClass, 0),
          @VendorNumberDP = COALESCE(i.VendorNumber, 0)
        from SPD_Import_Items i 
        where i.[ID] = @parentID
      
        --ComponentsSameItemTypeAttribute = 1 ' DP
        
        select @str = COALESCE(i.ItemTypeAttribute, '') from SPD_Import_Items i
          where i.[ID] = @itemID
        if (@str != @ItemTypeAttributeDP) set @itemErrors = @itemErrors + 1
        
        --ComponentsSameStockCategory = 2 ' DP
        
        select @str = COALESCE(i.StockCategory, '') from SPD_Import_Items i 
          where i.[ID] = @itemID
        if (@str != @StockCategoryDP) set @itemErrors = @itemErrors + 2
        
        --ComponentsSameStockingStrategyCode = 4 ' DP  'reusing 4
        
        select @str = COALESCE(i.Stocking_Strategy_Code, '') from SPD_Import_Items i 
          where i.[ID] = @itemID
        if (@str != @StockingStrategyCodeDP) set @itemErrors = @itemErrors + 4
        
        ----ComponentsSameHybridType = 4 ' DP
        
        --select @str = COALESCE(i.HybridType, '') from SPD_Import_Items i 
        --  where i.[ID] = @itemID
        --if (@str != @HybridTypeDP) set @itemErrors = @itemErrors + 4
        
        --ComponentsSameHybridSourcingDC = 8 ' DP
        
        --select @str = COALESCE(i.SourcingDC, '') from SPD_Import_Items i 
        --  where i.[ID] = @itemID
        --if (@str != @HybridSourceDCDP) set @itemErrors = @itemErrors + 8
        
        --ComponentsSameHierarchyD = 16 ' DP
        
        select @int = COALESCE(i.Dept, 0) from SPD_Import_Items i 
          where i.[ID] = @itemID
        if (@int != @DepartmentNumDP) set @itemErrors = @itemErrors + 16
        
        --ComponentsSameHierarchyC = 32 ' DP
        
        select @int = COALESCE(i.Class, 0) from SPD_Import_Items i 
          where i.[ID] = @itemID
        if (@int != @ClassNumDP) set @itemErrors = @itemErrors + 32
        
        --ComponentsSameHierarchySC = 64 ' DP
        
        select @int = COALESCE(i.SubClass, 0) from SPD_Import_Items i 
          where i.[ID] = @itemID
        if (@int != @SubClassNumDP) set @itemErrors = @itemErrors + 64
        
        --ComponentsSameVendor = 128 ' DP
        
        select @bigint = COALESCE(i.VendorNumber, 0) from SPD_Import_Items i 
          where i.[ID] = @itemID
        if (@bigint != @VendorNumberDP) set @itemErrors = @itemErrors + 128
      
      end
      
      --Get Parent Item Information
      declare @SKUGroupDDP varchar(50)
      declare @SKUGroup varchar(50)
      set @parentID = 0
      select @parentID = i.[ID]
      from SPD_Import_Items i 
      where i.Batch_ID = @batchID and COALESCE(RTRIM(REPLACE(LEFT(COALESCE(i.[PackItemIndicator], ''),2), '-', '')), '') IN ('D','DP','SB')
      
      select @SKUGroupDDP = COALESCE(i.SKUGroup, '')
      from SPD_Import_Items i 
      where i.[ID] = @parentID

      
      -- D/DP 
      --ComponentsSamePLI (Package Language Indicator)
      declare @parentPLI varchar(10)
      declare @childPLI varchar(10)
	  SET @parentPLI = ''
	  SET @childPLI = ''
      
      --English (PARENT)
      select @parentPLI = Coalesce(Package_Language_Indicator, 'B')
      from SPD_Import_Item_Languages as l1
      WHERE Import_Item_ID = @parentID and Language_Type_ID = 1
      --French (PARENT)
      select @parentPLI = @parentPLI + Coalesce(Package_Language_Indicator, 'B')
      from SPD_Import_Item_Languages as l1
      WHERE Import_Item_ID = @parentID and Language_Type_ID = 2
      --SPanish (PARENT)
      select @parentPLI = @parentPLI + Coalesce(Package_Language_Indicator, 'B')
      from SPD_Import_Item_Languages as l1
      WHERE Import_Item_ID = @parentID and Language_Type_ID = 3
   
      --English     
      select @childPLI = Coalesce(Package_Language_Indicator, 'B')
      from SPD_Import_Item_Languages as l1
      WHERE Import_Item_ID = @itemID and Language_Type_ID = 1
      --French
      select @childPLI = @childPLI + Coalesce(Package_Language_Indicator, 'B')
      from SPD_Import_Item_Languages as l1
      WHERE Import_Item_ID = @itemID and Language_Type_ID = 2
      --SPanish
      select @childPLI = @childPLI + Coalesce(Package_Language_Indicator, 'B')
      from SPD_Import_Item_Languages as l1
      WHERE Import_Item_ID = @itemID and Language_Type_ID = 3

      If(@parentPLI != @childPLI) set @itemErrors = @itemErrors + 262144 
      
       --ComponentsSameTI (Translation Indicator)
      declare @parentTI varchar(10)
      declare @childTI varchar(10)
	  SET @parentTI = ''
	  SET @childTI = ''
      
      --English (PARENT)
      select @parentTI = Coalesce(Translation_Indicator, 'B')
      from SPD_Import_Item_Languages as l1
      WHERE Import_Item_ID = @parentID and Language_Type_ID = 1
      --French (PARENT)
      select @parentTI = @parentTI + Coalesce(Translation_Indicator, 'B')
      from SPD_Import_Item_Languages as l1
      WHERE Import_Item_ID = @parentID and Language_Type_ID = 2
      --SPanish (PARENT)
      select @parentTI = @parentTI + Coalesce(Translation_Indicator, 'B')
      from SPD_Import_Item_Languages as l1
      WHERE Import_Item_ID = @parentID and Language_Type_ID = 3
   
      --English     
      select @childTI = Coalesce(Translation_Indicator, 'B')
      from SPD_Import_Item_Languages as l1
      WHERE Import_Item_ID = @itemID and Language_Type_ID = 1
      --French
      select @childTI = @childTI + Coalesce(Translation_Indicator, 'B')
      from SPD_Import_Item_Languages as l1
      WHERE Import_Item_ID = @itemID and Language_Type_ID = 2
      --SPanish
      select @childTI = @childTI + Coalesce(Translation_Indicator, 'B')
      from SPD_Import_Item_Languages as l1
      WHERE Import_Item_ID = @itemID and Language_Type_ID = 3

      If(@parentTI != @childTI) set @itemErrors = @itemErrors + 524288 


      --ComponentsSameSkuGroup = 2048 ' D/DP
      -- REMOVED FROM THE SPEDY REQUIREMENTS  
      -- NOPE PUT BACK IN FOR DP
      if (@DPCount = 1)
      begin
        select @SKUGroup = COALESCE(i.SKUGroup, '') from SPD_Import_Items i 
          where i.[ID] = @itemID
        if (@SKUGroupDDP != @SKUGroup) set @itemErrors = @itemErrors + 2048
      end
      
      --ComponentsQtyInPack = 4096 ' D/DP
      
      select @int = COALESCE(i.Qty_In_Pack, 0) from SPD_Import_Items i 
        where i.[ID] = @itemID
      if (@int <= 0) set @itemErrors = @itemErrors + 4096
          
    end    -- @itemType != 'D' and @itemType != 'DP'

    if (@DCount = 1 and @itemType in ('D', 'SB'))
    begin
      
	--  if @itemType = 'D'  ' D note that SB is intentionally excluded
	--  begin
	--	  --DisplayerWarehouseSeasonalW = 256 
	--	  set @str = ''
	--	  select @str = COALESCE(i.StockCategory, '') from SPD_Import_Items i 
	--		where i.[ID] = @itemID and COALESCE(RTRIM(REPLACE(LEFT(COALESCE(i.[PackItemIndicator], ''),2), '-', '')), '') IN ('D')
	--	  if (ltrim(rtrim(@str)) != 'W') set @itemErrors = @itemErrors + 256
	--  end
	  
      --DisplayerWarehouseSeasonalS = 512 'D
      set @str = ''
      select @str = COALESCE(i.ItemTypeAttribute, '') from SPD_Import_Items i 
        where i.[ID] = @itemID and COALESCE(RTRIM(REPLACE(LEFT(COALESCE(i.[PackItemIndicator], ''),2), '-', '')), '') IN ('D','SB')
      if (ltrim(rtrim(@str)) != 'S') set @itemErrors = @itemErrors + 512
      
    end


  end
   
  -- DDPActive = 8192
  set @str = ''
  set @bit = 0
  select @str = COALESCE(i.Item_Status, ''), @bit = COALESCE(i.Valid_Existing_SKU, 0) from SPD_Import_Items i 
    where i.[ID] = @itemID
  if (@bit = 1 and ltrim(rtrim(@str)) = 'C') set @itemErrors = @itemErrors + 8192
  
  if (@itemType = 'D' or @itemType = 'DP' or @itemType = 'SB')
  begin
    ---------------
    -- PACK SKUS --
    ---------------
    
    -- MultipleDDP = 16384
    if ( (@DCount + @DPCount) > 1 ) set @itemErrors = @itemErrors + 16384 

  end

  --DuplicateSKU = 32768
  select @int1 = count(i.[ID]) from SPD_Import_items i
    inner join (select ii.MichaelsSKU, count(ii.MichaelsSKU) as SKUCount from SPD_Import_items ii where ii.Batch_ID = @batchID group by ii.MichaelsSKU having count(ii.MichaelsSKU) > 1) t
      on i.MichaelsSKU = t.MichaelsSKU
  where i.[ID] = @itemID
  if (@int1 > 0) set @itemErrors = @itemErrors + 32768 



  --DuplicateComponent = 131072
  select @int1 = CASE WHEN S.Item_Type = 'C' AND EXISTS( 
						Select SKU2.[Item_Type] 
						From SPD_Item_Master_PackItems PKI
						JOIN SPD_Item_Master_SKU SKU2	on PKI.Pack_SKU = SKU2.Michaels_SKU and PKI.Child_SKU = S.Michaels_SKU
						Where dbo.udf_SPD_PackItemLeft2(SKU2.[Item_Type]) = 'DP' and SKU2.Item_Status = 'A' ) 
					THEN 1
					ELSE 0 END
	FROM SPD_Import_Items as i 
	INNER JOIN SPD_Item_Master_SKU as S on S.Michaels_SKU = i.MichaelsSKU
	WHERE i.ID = @itemID
  if (@int1 > 0) set @itemErrors = @itemErrors +  131072
  
  
  
  -- END ERRORS - IMPORT ---------------------------


  select @itemErrors as [ItemErrors]
  
  
  -- UPC AND ADDITIONAL UPCS
  
  declare @upc table(ID int identity(1,1), Sequence int, UPC varchar(20), UPCExists bit, DupBatch bit, DupWorkflow bit)
  -- primary upc
  insert into @upc (Sequence, UPC, UPCExists, DupBatch, DupWorkflow) 
  select 0, PrimaryUPC, 0, 0, 0 from SPD_Import_Items where [ID] = @itemID
  -- additional upcs
  insert into @upc (Sequence, UPC, UPCExists, DupBatch, DupWorkflow) 
  select Sequence, Additional_UPC, 0, 0, 0 from SPD_Import_Item_Additional_UPC where [Import_Item_ID] = @itemID order by [Sequence]
  -- upc exists ?
  update @upc set UPCExists = 1
    where exists (select 1 from SPD_Item_Master_Vendor_UPCs v where v.UPC = [@upc].UPC)
    --where UPC in (select UPC from SPD_Item_Master_Vendor_UPCs)
    --where UPC in (select UPC from SPD_Item_Master)
    --where isnull((select count(1) from SPD_Item_Master m where m.UPC = [@upc].UPC),0) > 0
    --where UPC in (select UPC from SPD_Item_Master)
  -- duplicate in the batch ?
  update @upc set DupBatch = 1 
    where UPC in (select i.PrimaryUPC from SPD_Import_Items i where i.Batch_ID = @batchID and i.[ID] != @itemID)
    or UPC in (select a.Additional_UPC from SPD_Import_Item_Additional_UPC a where a.[Import_Item_ID] != @itemID and a.[Import_Item_ID] in (select [ID] from SPD_Import_Items where Batch_ID = @batchID))
    or UPC in (select u.UPC from @upc u group by u.UPC having count(u.UPC) > 1)
  -- duplicate in workflow ?
  update @upc set DupWorkflow = 1 
    where UPC in (select i.PrimaryUPC from SPD_Import_Items i 
      inner join SPD_Batch b on i.Batch_ID = b.[ID]
      inner join SPD_Workflow_Stage ws on b.Workflow_Stage_ID = ws.[id]
      where b.[ID] != @batchID and b.[enabled] = 1
        and ws.Workflow_id = 1
        and ws.Stage_Type_id != 4
      ) 
    or 
    UPC in (select a.Additional_UPC from SPD_Import_Item_Additional_UPC a 
      inner join SPD_Import_Items i on a.Import_Item_ID = i.[ID]
      inner join SPD_Batch b on i.Batch_ID = b.[ID]
      inner join SPD_Workflow_Stage ws on b.Workflow_Stage_ID = ws.[id]
      where b.ID != @batchID and b.[enabled] = 1
        and ws.Workflow_id = 1
        and ws.Stage_Type_id != 4
      )
    or
    UPC in (select i.Vendor_UPC from SPD_Items i 
      inner join SPD_Item_Headers ih on ih.[ID] = i.Item_Header_ID
      inner join SPD_Batch b on ih.Batch_ID = b.[ID]
      inner join SPD_Workflow_Stage ws on b.Workflow_Stage_ID = ws.[id]
      where ws.Workflow_id = 1
        and ws.Stage_Type_id != 4 and b.[enabled] = 1
      ) 
    or 
    UPC in (select a.Additional_UPC from SPD_Item_Additional_UPC a 
      inner join SPD_Item_Headers ih on ih.[ID] = a.Item_Header_ID
      inner join SPD_Batch b on ih.Batch_ID = b.[ID]
      inner join SPD_Workflow_Stage ws on b.Workflow_Stage_ID = ws.[id]
      where ws.Workflow_id = 1
        and ws.Stage_Type_id != 4 and b.[enabled] = 1
      )
  -- delete the recs with no errors
  delete from @upc where UPCExists = 0 and DupBatch = 0 and DupWorkflow = 0
  -- return results
  select ID,Sequence,UPC,UPCExists,DupBatch,DupWorkflow from @upc


  if 1= 2 --BEGIN REMOVE GTIN FUNCTIONALITY
  BEGIN
		-- GTIN14
  
	  declare @innergtin table(ID int identity(1,1), Sequence int, InnerGTIN varchar(20), InnerGTINExists bit, InnerGTINDupBatch bit, InnerGTINDupWorkflow bit)
	  -- primary upc
	  insert into @innergtin (Sequence, InnerGTIN, InnerGTINExists, InnerGTINDupBatch, InnerGTINDupWorkflow) 
	  select 0, InnerGTIN, 0, 0, 0 from SPD_Import_Items where [ID] = @itemID

	  -- GTIN exists ?
	  update @innergtin set InnerGTINExists = 1
		where exists (select 1 from SPD_Item_Master_GTINs v where v.InnerGTIN = [@innergtin].InnerGTIN)
    
	  -- duplicate in the batch ?
	  update @innergtin set InnerGTINDupBatch = 1 
		where InnerGTIN in (select i.InnerGTIN from SPD_Import_Items i where i.Batch_ID = @batchID and i.[ID] != @itemID)
		  or InnerGTIN in (select u.innergtin from @innergtin u group by u.innergtin having count(u.innergtin) > 1)
	  -- duplicate in workflow ?
  
	  update @innergtin set InnerGTINDupWorkflow = 1 
		where InnerGTIN in (select i.InnerGTIN from SPD_Import_Items i 
		  inner join SPD_Batch b on i.Batch_ID = b.[ID]
		  inner join SPD_Workflow_Stage ws on b.Workflow_Stage_ID = ws.[id]
		  where b.[ID] != @batchID and b.[enabled] = 1
			and ws.Workflow_id = 1
			and ws.Stage_Type_id != 4
		  ) 
		or
		InnerGTIN in (select i.Vendor_Inner_GTIN from SPD_Items i 
		  inner join SPD_Item_Headers ih on ih.[ID] = i.Item_Header_ID
		  inner join SPD_Batch b on ih.Batch_ID = b.[ID]
		  inner join SPD_Workflow_Stage ws on b.Workflow_Stage_ID = ws.[id]
		  where ws.Workflow_id = 1
			and ws.Stage_Type_id != 4 and b.[enabled] = 1
		  ) 

	  -- delete the recs with no errors
	  delete from @innergtin where InnerGTINExists = 0 and InnerGTINDupBatch = 0 and InnerGTINDupWorkflow = 0
	  -- return results
	  select ID,Sequence,InnerGTIN,InnerGTINExists,InnerGTINDupBatch,InnerGTINDupWorkflow from @innergtin



	   declare @casegtin table(ID int identity(1,1), Sequence int, caseGTIN varchar(20), caseGTINExists bit, caseGTINDupBatch bit, caseGTINDupWorkflow bit)
	  -- primary upc
	  insert into @casegtin (Sequence, caseGTIN, caseGTINExists, caseGTINDupBatch, caseGTINDupWorkflow) 
	  select 0, caseGTIN, 0, 0, 0 from SPD_Import_Items where [ID] = @itemID

	  -- upc exists ?
	  update @casegtin set caseGTINExists = 1
		where exists (select 1 from SPD_Item_Master_GTINs v where v.caseGTIN = [@casegtin].caseGTIN)
    
	  -- duplicate in the batch ?
	  update @casegtin set caseGTINDupBatch = 1 
		where caseGTIN in (select i.caseGTIN from SPD_Import_Items i where i.Batch_ID = @batchID and i.[ID] != @itemID)


	  -- duplicate in workflow ?
	  update @casegtin set caseGTINDupWorkflow = 1 
		where caseGTIN in (select i.caseGTIN from SPD_Import_Items i 
		  inner join SPD_Batch b on i.Batch_ID = b.[ID]
		  inner join SPD_Workflow_Stage ws on b.Workflow_Stage_ID = ws.[id]
		  where b.[ID] != @batchID and b.[enabled] = 1
			and ws.Workflow_id = 1
			and ws.Stage_Type_id != 4
		  ) 
		or
		caseGTIN in (select i.Vendor_Case_GTIN from SPD_Items i 
		  inner join SPD_Item_Headers ih on ih.[ID] = i.Item_Header_ID
		  inner join SPD_Batch b on ih.Batch_ID = b.[ID]
		  inner join SPD_Workflow_Stage ws on b.Workflow_Stage_ID = ws.[id]
		  where ws.Workflow_id = 1
			and ws.Stage_Type_id != 4 and b.[enabled] = 1
		  ) 
      
	  -- delete the recs with no errors
	  delete from @casegtin where caseGTINExists = 0 and caseGTINDupBatch = 0 and caseGTINDupWorkflow = 0
	  -- return results
	  select ID,Sequence,caseGTIN,caseGTINExists,caseGTINDupBatch,caseGTINDupWorkflow from @casegtin

END -- END REMOVE GTIN

GO


ALTER PROCEDURE [dbo].[usp_SPD_Validation_ValidateItem]
  @itemID bigint
AS

  declare @itemErrors int
  set @itemErrors = 0
  
  declare @batchID bigint, @parentID int, @itemHeaderID bigint
  declare @batchType int
  declare @hid int
  declare @DPCount int
  declare @DCount int
  declare @CCount int
  declare @itemCount int
  declare @costParent money, @costChildren money
  declare @int1 int, @int2 int, @int3 int
  declare @str1 varchar(255)
  declare @reg bit
  
  declare @str varchar(50), @int int, @bigint bigint, @bit bit
  
  select @itemHeaderID = [Item_Header_ID] from SPD_Items where [ID] = @itemID
  
  --select @batchID = [BatchID] from vwItemMaintItemDetail where [ID] = @itemID
  select @batchID = [Batch_ID] from SPD_Item_Headers where [ID] = @itemHeaderID
  
  select @batchType = Batch_Type_ID from SPD_Batch where [ID] = @batchID
  
  declare @itemType varchar(20)
  
  select @itemType = REPLACE(LEFT(COALESCE(i.Pack_Item_Indicator, ''), 2), '-', '') from SPD_Items i 
    where i.[ID] = @itemID
  
  -----------------------------
  -- DOMESTIC BATCH
  -----------------------------
  select @itemCount = isnull(count(1), 0) from SPD_Items i where i.Item_Header_ID = @itemHeaderID
  
  select @DPCount = isnull(count(1), 0) from SPD_Items i 
    where i.Item_Header_ID = @itemHeaderID and COALESCE(RTRIM(REPLACE(LEFT(COALESCE(i.[Pack_Item_Indicator], ''),2), '-', '')), '') = 'DP' 
  
  select @DCount = isnull(count(1), 0) from SPD_Items i 
    where i.Item_Header_ID = @itemHeaderID and COALESCE(RTRIM(REPLACE(LEFT(COALESCE(i.[Pack_Item_Indicator], ''),2), '-', '')), '') in ('D', 'SB' )
  
  select @CCount = isnull(count(1), 0) from SPD_Items i 
    where i.Item_Header_ID = @itemHeaderID and 
      ( COALESCE(RTRIM(REPLACE(LEFT(i.[Pack_Item_Indicator],2), '-', '')), '') = 'C' or (COALESCE(RTRIM(REPLACE(LEFT(i.[Pack_Item_Indicator],1), '-', '')), '') not in ('D' ,'SB') and isnull(i.Valid_Existing_SKU, 0) = 1) )
  
  -- START ERRORS - DOMESTIC ---------------------------
    
  if (@itemType != 'D' and @itemType != 'DP' and @itemType != 'SB')
  begin
  
    
    ----------------
    -- COMPONENTS --
    ----------------
    
    --None = 0

    ----------
    -- D/DP --
    ----------
    if ((@DPCount + @DCount) = 1)
    begin
    
	  select @parentID = i.[ID]
      from SPD_Items i 
      where i.Item_Header_ID = @itemHeaderID and COALESCE(RTRIM(REPLACE(LEFT(COALESCE(i.[Pack_Item_Indicator], ''),2), '-', '')), '') = 'DP'
      if (@DPCount = 1)
      begin
        
        declare @ItemTypeAttributeDP varchar(50) -- header
        declare @StockCategoryDP varchar(1) -- header
        --declare @HybridTypeDP varchar(1)
        --declare @HybridSourceDCDP varchar(1)
        declare @StockingStrategyCodeDP nvarchar(20)
        declare @DepartmentNumDP int, @ClassNumDP int, @SubClassNumDP int -- dept is header -- class subclass are item
        declare @VendorNumberDP bigint -- header
        
          
        select 
          @ItemTypeAttributeDP = COALESCE(ih.Item_Type_Attribute, ''),
          @StockCategoryDP = case 
            when isnull(ih.US_Vendor_Num, 0) > 0 then COALESCE(ih.Stock_Category, '') 
            when isnull(ih.Canadian_Vendor_Num, 0) > 0 then COALESCE(ih.Canada_Stock_Category, '')
            else COALESCE(ih.Stock_Category, '')
          end,
          --@HybridTypeDP = COALESCE(i.Hybrid_Type, ''),
          --@HybridSourceDCDP = COALESCE(i.Hybrid_Source_DC, ''),
          @StockingStrategyCodeDP = COALESCE(i.Stocking_Strategy_Code,''),
          @DepartmentNumDP = COALESCE(ih.Department_Num, 0),
          @ClassNumDP = COALESCE(i.Class_Num, 0),
          @SubClassNumDP = COALESCE(i.Sub_Class_Num, 0),
          @VendorNumberDP = case 
            when isnull(ih.US_Vendor_Num, 0) > 0 then COALESCE(ih.US_Vendor_Num, 0) 
            when isnull(ih.Canadian_Vendor_Num, 0) > 0 then COALESCE(ih.Canadian_Vendor_Num, 0)
            else COALESCE(ih.US_Vendor_Num, 0)
          end
        from SPD_Items i 
          inner join SPD_Item_Headers ih on i.[Item_Header_ID] = ih.[ID]
        where i.[ID] = @parentID
      
        --ComponentsSameItemType = 1 ' DP
        set @bit = 0
        select @bit = ISNULL(i.Valid_Existing_SKU, 0), @str = COALESCE(i.Item_Type_Attribute, '') from SPD_Items i
          where i.[ID] = @itemID
        if (@bit = 1 and @str != @ItemTypeAttributeDP) set @itemErrors = @itemErrors + 1
        
        --ComponentsSameStockCategory = 2 ' DP
        set @bit = 0
        select @bit = ISNULL(i.Valid_Existing_SKU, 0), @str = COALESCE(i.Stock_Category, '') from SPD_Items i  
          where i.[ID] = @itemID
        if (@bit = 1 and @str != @StockCategoryDP) set @itemErrors = @itemErrors + 2
        
        --ComponentsSameStockingStrategyCode = 4 ' DP
        
        select @str = COALESCE(i.Stocking_Strategy_Code, '') from SPD_Items i 
          where i.[ID] = @itemID
        if (@str != @StockingStrategyCodeDP) set @itemErrors = @itemErrors + 4
        
        
        ----ComponentsSameHybridType = 4 ' DP
        
        --select @str = COALESCE(i.Hybrid_Type, '') from SPD_Items i 
        --  where i.[ID] = @itemID
        --if (@str != @HybridTypeDP) set @itemErrors = @itemErrors + 4
        
        ----ComponentsSameHybridSourcingDC = 8 ' DP
        
        --select @str = COALESCE(i.Hybrid_Source_DC, '') from SPD_Items i 
        --  where i.[ID] = @itemID
        --if (@str != @HybridSourceDCDP) set @itemErrors = @itemErrors + 8
        
        --ComponentsSameHierarchyD = 16 ' DP
        set @bit = 0
        select @bit = ISNULL(i.Valid_Existing_SKU, 0), @int = COALESCE(i.Department_Num, 0) from SPD_Items i 
          where i.[ID] = @itemID
        if (@bit = 1 and @int != @DepartmentNumDP) set @itemErrors = @itemErrors + 16
        
        --ComponentsSameHierarchyC = 32 ' DP
        
        select @int = COALESCE(i.Class_Num, 0) from SPD_Items i 
          where i.[ID] = @itemID
        if (@int != @ClassNumDP) set @itemErrors = @itemErrors + 32
        
        --ComponentsSameHierarchySC = 64 ' DP
        
        select @int = COALESCE(i.Sub_Class_Num, 0) from SPD_Items i 
          where i.[ID] = @itemID
        if (@int != @SubClassNumDP) set @itemErrors = @itemErrors + 64
        
        --ComponentsSameVendor = 128 ' DP
        DECLARE @items as integer
        Select @bigint = Sum(Primary_Indicator), @items = count(*) FROM (Select COALESCE(v.Primary_Indicator,1) as Primary_Indicator from SPD_Items as i
														Inner Join SPD_Item_Headers as ih on i.Item_Header_ID = ih.ID
														LEft Join SPD_Item_MAster_Vendor as v on v.Michaels_SKU = i.Michaels_SKU and v.Vendor_Number = ih.US_Vendor_Num
														WHERE ih.Batch_ID = @batchID ) as V
        If(COALESCE(@bigint,0) != @items) Set @itemErrors = @itemERrors + 128
        --select @bigint = COALESCE(ih.VendorNumber, 0) from SPD_Items i 
        --  inner join SPD_Item_Headers ih on i.[Item_Header_ID] = ih.[ID]
        --  where i.[ID] = @itemID
        --if (@bigint != @VendorNumberDP) set @itemErrors = @itemErrors + 128
      
      end
  
      declare @SKUGroupDDP varchar(50)
      declare @SKUGroup varchar(50)
      
      select 
        @SKUGroupDDP = COALESCE(ih.SKU_Group, '')
      from SPD_Item_Headers ih 
      where ih.[ID] = @itemHeaderID
      
      
      --ComponentsMustBeActive = 1024 ' D/DP
        
      --select @str = COALESCE(c1.[Field_Value], i.ItemStatus, '') from vwItemMaintItemDetail i 
      --  left outer join SPD_Item_Master_Changes c1 ON i.[ID] = c1.[Item_Maint_Items_ID] and c1.[Field_Name] = 'ItemStatus' and c1.[Counter] = 0 
      --  where i.[ID] = @itemID
      --if (ltrim(rtrim(@str)) != 'A') set @itemErrors = @itemErrors + 1024
        
      --ComponentsSameSkuGroup = 2048 ' D/DP
      -- REMOVED FROM THE SPEDY REQUIREMENTS
      -- NOPE PUT BACK IN
      if (@DPCount = 1)
      begin
        declare @VES bit
        select @VES = isnull(i.Valid_Existing_SKU, 0) from SPD_Items i where i.[ID] = @itemID
        if (@VES = 1)
        begin
          select @SKUGroup = COALESCE(v.SKUGroup, '') from SPD_Items i 
            inner join SPD_Item_Headers ih on i.Item_Header_ID = ih.[ID]
            inner join [vwItemMaintItemDetailBySKU] v on
	            v.SKU = i.Michaels_SKU and v.VendorNumber = COALESCE(ih.US_Vendor_Num, ih.Canadian_Vendor_Num, '') and v.VendorNumber != ''
            where i.[ID] = @itemID and (
              (COALESCE(RTRIM(REPLACE(LEFT(i.[Pack_Item_Indicator],1), '-', '')), '') not in ('D','SB') and isnull(i.Valid_Existing_SKU, 0) = 1)
            )
            
          if (@SKUGroupDDP != @SKUGroup) set @itemErrors = @itemErrors + 2048
        end 
      end
      
      
      select @parentID = i.[ID]
      from SPD_Items i 
      where i.Item_Header_ID = @itemHeaderID and COALESCE(RTRIM(REPLACE(LEFT(COALESCE(i.[Pack_Item_Indicator], ''),2), '-', '')), '') in ('DP','D','SB')
      
      -- D/DP 
      --ComponentsSamePLI (Package Language Indicator)
      declare @parentPLI varchar(10)
      declare @childPLI varchar(10)
      SET @parentPLI = ''
	  SET @childPLI = ''
	  
      --English (PARENT)
      select @parentPLI = Coalesce(Package_Language_Indicator, 'B')
      from SPD_Item_Languages as l1
      WHERE Item_ID = @parentID and Language_Type_ID = 1
      --French (PARENT)
      select @parentPLI = @parentPLI + Coalesce(Package_Language_Indicator, 'B')
      from SPD_Item_Languages as l1
      WHERE Item_ID = @parentID and Language_Type_ID = 2
      --SPanish (PARENT)
      select @parentPLI = @parentPLI + Coalesce(Package_Language_Indicator, 'B')
      from SPD_Item_Languages as l1
      WHERE Item_ID = @parentID and Language_Type_ID = 3
      
      --English     
      select @childPLI = Coalesce(Package_Language_Indicator, 'B')
      from SPD_Item_Languages as l1
      WHERE Item_ID = @itemID and Language_Type_ID = 1
      --French
      select @childPLI = @childPLI + Coalesce(Package_Language_Indicator, 'B')
      from SPD_Item_Languages as l1
      WHERE Item_ID = @itemID and Language_Type_ID = 2
      --SPanish
      select @childPLI = @childPLI + Coalesce(Package_Language_Indicator, 'B')
      from SPD_Item_Languages as l1
      WHERE Item_ID = @itemID and Language_Type_ID = 3
      
      If(@parentPLI != @childPLI) set @itemErrors = @itemErrors + 262144
      
      --ComponentsSameTI (Translation Indicator)
      declare @parentTI varchar(10)
      declare @childTI varchar(10)
      SET @parentPLI = ''
	  SET @childTI = ''
	  
      --English (PARENT)
      select @parentTI = Coalesce(Translation_Indicator, 'B')
      from SPD_Item_Languages as l1
      WHERE Item_ID = @parentID and Language_Type_ID = 1
      --French (PARENT)
      select @parentTI = @parentTI + Coalesce(Translation_Indicator, 'B')
      from SPD_Item_Languages as l1
      WHERE Item_ID = @parentID and Language_Type_ID = 2
      --SPanish (PARENT)
      select @parentTI = @parentTI + Coalesce(Translation_Indicator, 'B')
      from SPD_Item_Languages as l1
      WHERE Item_ID = @parentID and Language_Type_ID = 3
      
      --English     
      select @childTI = Coalesce(Translation_Indicator, 'B')
      from SPD_Item_Languages as l1
      WHERE Item_ID = @itemID and Language_Type_ID = 1
      --French
      select @childTI = @childTI + Coalesce(Translation_Indicator, 'B')
      from SPD_Item_Languages as l1
      WHERE Item_ID = @itemID and Language_Type_ID = 2
      --SPanish
      select @childTI = @childTI + Coalesce(Translation_Indicator, 'B')
      from SPD_Item_Languages as l1
      WHERE Item_ID = @itemID and Language_Type_ID = 3
      
      If(@parentTI != @childTI) set @itemErrors = @itemErrors + 524288
      
      --ComponentsQtyInPack = 4096 ' D/DP
      
      select @int = COALESCE(i.Qty_In_Pack, 0) from SPD_Items i 
        where i.[ID] = @itemID
      if (@int <= 0) set @itemErrors = @itemErrors + 4096


    end
    
   
  end
  
  if (@DCount = 1 AND @itemType in ('D','SB'))
      begin
        
        --ComponentsWarehouseSeasonalW = 256 ' D
        
    --    select @str = COALESCE(ih.Stock_Category, ih.Canada_Stock_Category, '') from SPD_Items i 
    --      inner join SPD_Item_Headers ih on i.[Item_Header_ID] = ih.[ID] 
    --      where i.[ID] = @itemID
    --    if (ltrim(rtrim(@str)) != 'W') set @itemErrors = @itemErrors + 256
        
        --ComponentsWarehouseSeasonalS = 512 'D
        
        select @str = COALESCE(ih.Item_Type_Attribute, '') from SPD_Items i 
          inner join SPD_Item_Headers ih on i.[Item_Header_ID] = ih.[ID] 
          where i.[ID] = @itemID
        if (ltrim(rtrim(@str)) != 'S') set @itemErrors = @itemErrors + 512
        
      end
  
  -- DDPActive = 8192
  set @str = ''
  set @bit = 0
  select @str = COALESCE(i.Item_Status, ''), @bit = COALESCE(i.Valid_Existing_SKU, 0) from SPD_Items i 
    where i.[ID] = @itemID
  if (@bit = 1 and ltrim(rtrim(@str)) = 'C') set @itemErrors = @itemErrors + 8192
  
  
  if (@itemType = 'D' or @itemType = 'DP' or @itemType = 'SB')
  begin
    ---------------
    -- PACK SKUS --
    ---------------
    
    -- MultipleDDP = 16384
    if ( (@DCount + @DPCount) > 1 ) set @itemErrors = @itemErrors + 16384 
  end
  
  --DuplicateSKU = 32768
  select @int1 = count(i.[ID]) from SPD_Items i
    inner join (select ii.Michaels_SKU, count(ii.Michaels_SKU) as SKUCount from SPD_Items ii where ii.Item_Header_ID = @itemHeaderID group by ii.Michaels_SKU having count(ii.Michaels_SKU) > 1) t
      on i.Michaels_SKU = t.Michaels_SKU
  where i.[ID] = @itemID
  if (@int1 > 0) set @itemErrors = @itemErrors + 32768 


  --DuplicateComponent = 131072
  select @int1 = CASE WHEN S.Item_Type = 'C' AND EXISTS( 
						Select SKU2.[Item_Type] 
						From SPD_Item_Master_PackItems PKI
						JOIN SPD_Item_Master_SKU SKU2	on PKI.Pack_SKU = SKU2.Michaels_SKU and PKI.Child_SKU = S.Michaels_SKU
						Where dbo.udf_SPD_PackItemLeft2(SKU2.[Item_Type]) = 'DP' and SKU2.Item_Status = 'A' ) 
					THEN 1
					ELSE 0 END
	FROM SPD_Items as i 
	INNER JOIN SPD_Item_Master_SKU as S on S.Michaels_SKU = i.Michaels_SKU
	WHERE i.ID = @itemID
  if (@int1 > 0) set @itemErrors = @itemErrors +  131072


  select @itemErrors as [ItemErrors]
  
  
  -- UPC AND ADDITIONAL UPCS
  
  declare @upc table(ID int identity(1,1), Sequence int, UPC varchar(20), UPCExists bit, DupBatch bit, DupWorkflow bit)
  -- primary upc
  insert into @upc (Sequence, UPC, UPCExists, DupBatch, DupWorkflow) 
  select 0, Vendor_UPC, 0, 0, 0 from SPD_Items where [ID] = @itemID
  -- additional upcs
  insert into @upc (Sequence, UPC, UPCExists, DupBatch, DupWorkflow) 
  select Sequence, Additional_UPC, 0, 0, 0 from SPD_Item_Additional_UPC where [Item_Header_ID] = @itemHeaderID and [Item_ID] = @itemID order by [Sequence]
  -- upc exists ?
  update @upc set UPCExists = 1
    where exists (select 1 from SPD_Item_Master_Vendor_UPCs v where v.UPC = [@upc].UPC)
    --where UPC in (select UPC from SPD_Item_Master_Vendor_UPCs)
    --where UPC in (select UPC from SPD_Item_Master)
    
    --where isnull((select count(1) from SPD_Item_Master m where m.UPC = [@upc].UPC),0) > 0
    --where UPC in (select UPC from SPD_Item_Master)
  -- duplicate in the batch ?
  update @upc set DupBatch = 1 
    where UPC in (select i.Vendor_UPC from SPD_Items i where i.Item_Header_ID = @itemHeaderID and i.[ID] != @itemID)
    or UPC in (select a.Additional_UPC from SPD_Item_Additional_UPC a where a.Item_Header_ID = @itemHeaderID and a.[Item_ID] != @itemID)
    or UPC in (select u.UPC from @upc u group by u.UPC having count(u.UPC) > 1)
  -- duplicate in workflow ?
  update @upc set DupWorkflow = 1 
    where UPC in (select i.Vendor_UPC from SPD_Items i 
      inner join SPD_Item_Headers ih on ih.[ID] = i.Item_Header_ID
      inner join SPD_Batch b on ih.Batch_ID = b.[ID]
      inner join SPD_Workflow_Stage ws on b.Workflow_Stage_ID = ws.[id]
      where ih.[ID] != @itemHeaderID and b.[enabled] = 1
        and ws.Workflow_id = 1
        and ws.Stage_Type_id != 4
      ) 
    or 
    UPC in (select a.Additional_UPC from SPD_Item_Additional_UPC a 
      inner join SPD_Item_Headers ih on ih.[ID] = a.Item_Header_ID
      inner join SPD_Batch b on ih.Batch_ID = b.[ID]
      inner join SPD_Workflow_Stage ws on b.Workflow_Stage_ID = ws.[id]
      where a.Item_Header_ID != @itemHeaderID and b.[enabled] = 1
        and ws.Workflow_id = 1
        and ws.Stage_Type_id != 4
      )
    or
    UPC in (select i.PrimaryUPC from SPD_Import_Items i 
      inner join SPD_Batch b on i.Batch_ID = b.[ID]
      inner join SPD_Workflow_Stage ws on b.Workflow_Stage_ID = ws.[id]
      where ws.Workflow_id = 1
        and ws.Stage_Type_id != 4 and b.[enabled] = 1
      ) 
    or 
    UPC in (select a.Additional_UPC from SPD_Import_Item_Additional_UPC a 
      inner join SPD_Import_Items i on a.Import_Item_ID = i.[ID]
      inner join SPD_Batch b on i.Batch_ID = b.[ID]
      inner join SPD_Workflow_Stage ws on b.Workflow_Stage_ID = ws.[id]
      where ws.Workflow_id = 1
        and ws.Stage_Type_id != 4 and b.[enabled] = 1
      )
  -- delete the recs with no errors
  delete from @upc where UPCExists = 0 and DupBatch = 0 and DupWorkflow = 0
  -- return results
  select ID,Sequence,UPC,UPCExists,DupBatch,DupWorkflow from @upc


  if 1=2 -- BEGIN REMOVE GTIN VALIDATION 
  BEGIN
	  -- Inner GTIN Validation
  
	  declare @innergtin table(ID int identity(1,1), Sequence int, innergtin varchar(20), innergtinExists bit, innergtinDupBatch bit, innergtinDupWorkflow bit)

	  insert into @innergtin (Sequence, innergtin, innergtinExists, innergtinDupBatch, innergtinDupWorkflow) 
	  select 0, Vendor_Inner_GTIN, 0, 0, 0 from SPD_Items where [ID] = @itemID
    
	  -- gtin exists ?
	  update @innergtin set innergtinExists = 1
		where exists (select 1 from SPD_Item_Master_GTINs v where v.InnerGTIN = [@innergtin].innergtin)
  
	  update @innergtin set innergtinExists = 1
		where exists (select 1 from SPD_Item_Master_GTINs v where v.CaseGTIN = [@innergtin].innergtin)
  
	  -- duplicate in the batch ?
	  update @innergtin set innergtinDupBatch = 1 
		where innergtin in (select i.Vendor_Inner_GTIN from SPD_Items i where i.Item_Header_ID = @itemHeaderID and i.[ID] != @itemID)
  
	  -- duplicate in workflow ?
	  update @innergtin set innergtinDupWorkflow = 1 
		where innergtin in (select i.Vendor_Inner_GTIN from SPD_Items i 
		  inner join SPD_Item_Headers ih on ih.[ID] = i.Item_Header_ID
		  inner join SPD_Batch b on ih.Batch_ID = b.[ID]
		  inner join SPD_Workflow_Stage ws on b.Workflow_Stage_ID = ws.[id]
		  where ih.[ID] != @itemHeaderID and b.[enabled] = 1
			and ws.Workflow_id = 1
			and ws.Stage_Type_id != 4
		  ) 
		or 
		innergtin in (select i.InnerGTIN from SPD_Import_Items i 
		  inner join SPD_Batch b on i.Batch_ID = b.[ID]
		  inner join SPD_Workflow_Stage ws on b.Workflow_Stage_ID = ws.[id]
		  where ws.Workflow_id = 1
			and ws.Stage_Type_id != 4 and b.[enabled] = 1
		  ) 

	  -- delete the recs with no errors
	  delete from @innergtin where innergtinExists = 0 and innergtinDupBatch = 0 and innergtinDupWorkflow = 0
  
	  -- return results
	  select ID,Sequence,innergtin,innergtinExists,innergtinDupBatch,innergtinDupWorkflow from @innergtin


	   -- Case GTIN Validation
  
	  declare @casegtin table(ID int identity(1,1), Sequence int, casegtin varchar(20), casegtinExists bit, casegtinDupBatch bit, casegtinDupWorkflow bit)
	  insert into @casegtin (Sequence, casegtin, casegtinExists, casegtinDupBatch, casegtinDupWorkflow) 
	  select 0, Vendor_case_GTIN, 0, 0, 0 from SPD_Items where [ID] = @itemID
    
	  -- upc exists ?
	  update @casegtin set casegtinExists = 1
		where exists (select 1 from SPD_Item_Master_GTINs v where v.casegtin = [@casegtin].casegtin)
  
	  update @casegtin set casegtinExists = 1
		where exists (select 1 from SPD_Item_Master_GTINs v where v.InnerGTIN = [@casegtin].casegtin)
  
	  -- duplicate in the batch ?
	  update @casegtin set casegtinDupBatch = 1 
		where casegtin in (select i.Vendor_case_GTIN from SPD_Items i where i.Item_Header_ID = @itemHeaderID and i.[ID] != @itemID)
  
	  -- duplicate in workflow ?
	  update @casegtin set casegtinDupWorkflow = 1 
		where casegtin in (select i.Vendor_case_GTIN from SPD_Items i 
		  inner join SPD_Item_Headers ih on ih.[ID] = i.Item_Header_ID
		  inner join SPD_Batch b on ih.Batch_ID = b.[ID]
		  inner join SPD_Workflow_Stage ws on b.Workflow_Stage_ID = ws.[id]
		  where ih.[ID] != @itemHeaderID and b.[enabled] = 1
			and ws.Workflow_id = 1
			and ws.Stage_Type_id != 4
		  ) 
		or 
		casegtin in (select i.casegtin from SPD_Import_Items i 
		  inner join SPD_Batch b on i.Batch_ID = b.[ID]
		  inner join SPD_Workflow_Stage ws on b.Workflow_Stage_ID = ws.[id]
		  where ws.Workflow_id = 1
			and ws.Stage_Type_id != 4 and b.[enabled] = 1
		  ) 

	  -- delete the recs with no errors
	  delete from @casegtin where casegtinExists = 0 and casegtinDupBatch = 0 and casegtinDupWorkflow = 0
  
	  -- return results
	  select ID,Sequence,casegtin,casegtinExists,casegtinDupBatch,casegtinDupWorkflow from @casegtin

END -- END REMOVE GTIN FUNCTIONALITY

GO


ALTER PROCEDURE [dbo].[usp_SPD_Validation_ValidateItemMaintBatch]
  @batchID bigint
AS

  declare @batchErrors int
  set @batchErrors = 0
  
  declare @batchType int
  declare @hid int
  declare @DPCount int
  declare @DCount int
  declare @CCount int
  declare @itemCount int
  declare @costParent money, @costChildren money
  declare @int1 int, @int2 int, @int3 int
  declare @str1 varchar(255)
  declare @reg bit
  declare @changeCount int
  declare @AddedSKUs varchar(max), @DeletedSKUs varchar(max), @PackSKU varchar(20)
  declare @qty int
  declare @US varchar(50), @CANADA varchar(50), @BOTH varchar(50)
  declare @SKUGroupD varchar(50)
  declare @d int
  Declare @weightParent as Decimal(18,6)
  Declare @weightChildren as Decimal(18,6)
  
  
  select @batchType = Batch_Type_ID from SPD_Batch where [ID] = @batchID
 
  if (@batchType = 1 or @batchType = 2)
  begin
    -----------------------------
    -- ITEM MAINT >> IMPORT / DOMESTIC BATCH
    -----------------------------
    select @itemCount = isnull(count(1), 0) from vwItemMaintItemDetail i where i.BatchID = @batchID
    
    select @DPCount = isnull(count(1), 0) from vwItemMaintItemDetail i 
      left outer join SPD_Item_Master_Changes c ON i.[ID] = c.[Item_Maint_Items_ID] and c.[Field_Name] = 'PackItemIndicator' and c.[Counter] = 0 
      where i.BatchID = @batchID and COALESCE(RTRIM(REPLACE(LEFT(COALESCE(c.[Field_Value], i.[PackItemIndicator], ''),2), '-', '')), '') = 'DP'
  
    select @DCount = isnull(count(1), 0) from vwItemMaintItemDetail i 
      left outer join SPD_Item_Master_Changes c ON i.[ID] = c.[Item_Maint_Items_ID] and c.[Field_Name] = 'PackItemIndicator' and c.[Counter] = 0 
      where i.BatchID = @batchID and COALESCE(RTRIM(REPLACE(LEFT(COALESCE(c.[Field_Value], i.[PackItemIndicator], ''),2), '-', '')), '') in ('D' ,'SB')
    
    select @CCount = isnull(count(1), 0) from vwItemMaintItemDetail i 
      left outer join SPD_Item_Master_Changes c ON i.[ID] = c.[Item_Maint_Items_ID] and c.[Field_Name] = 'PackItemIndicator' and c.[Counter] = 0 
      where i.BatchID = @batchID and COALESCE(RTRIM(REPLACE(LEFT(COALESCE(c.[Field_Value], i.[PackItemIndicator], ''),2), '-', '')), '') IN ('C','R','') 
    
    -- START ERRORS - IMPORT / DOMESTIC ---------------------------
   
    --None = 0
    --DDPMultipleParents = 1
    if ((@DPCount + @DCount) > 1) set @batchErrors = @batchErrors + 1
    --DDPNoComponents = 2
    if ((@DPCount + @DCount) >= 1 and @CCount <= 0) set @batchErrors = @batchErrors + 2
    --DDPMissingParent = 4
    if (@CCount >= 1 and (@DPCount + @DCount) <= 0) set @batchErrors = @batchErrors + 4
    --DDPMissingTypes = 8
    if ( (@DPCount > 0 or @DCount > 0 or @CCount > 0) and ( (@CCount + @DCount + @DPCount) != @itemCount)) set @batchErrors = @batchErrors + 8
    ----------
    -- D/DP --
    ----------
    if ((@DPCount + @DCount) >= 1)
    begin
      --DDPComponentsNotActive = 16
      -- ... currently, not enough data to implement this validation rule !
      --DDPPackCost1NotEqual = 32
   
      select @costParent = sum(coalesce(convert(decimal(18, 6), COALESCE(case @batchType when 1 then CAST(c3.[Field_Value] as money) else CAST(c2.[Field_Value] as money) end, case @batchType when 1 then i.ItemCost else i.ProductCost end, 0)), 0)) from vwItemMaintItemDetail i 
        left outer join SPD_Item_Master_Changes c3 ON i.[ID] = c3.[Item_Maint_Items_ID] and c3.[Field_Name] = 'ItemCost' and c3.[Counter] = 0 
        left outer join SPD_Item_Master_Changes c2 ON i.[ID] = c2.[Item_Maint_Items_ID] and c2.[Field_Name] = 'ProductCost' and c2.[Counter] = 0 
        --left outer join SPD_Item_Master_Changes c1 ON i.[ID] = c1.[Item_Maint_Items_ID] and c1.[Field_Name] = 'FOBShippingPoint' and c1.[Counter] = 0 
        left outer join SPD_Item_Master_Changes c ON i.[ID] = c.[Item_Maint_Items_ID] and c.[Field_Name] = 'PackItemIndicator' and c.[Counter] = 0 
        where i.BatchID = @batchID and COALESCE(RTRIM(REPLACE(LEFT(COALESCE(c.[Field_Value], i.[PackItemIndicator], ''),2), '-', '')), '') IN ('DP', 'D','SB')
 
      select @costChildren = sum(
          (
            coalesce(convert(int, COALESCE(c4.[Field_Value], i.QtyInPack, 0)), 0) * 
            coalesce(convert(decimal(18, 6), COALESCE(case @batchType when 1 then CAST(c3.[Field_Value] as money) else CAST(c2.[Field_Value] as money) end, case @batchType when 1 then i.ItemCost else i.ProductCost end, 0)), 0)
          )
        ) from vwItemMaintItemDetail i 
        left outer join SPD_Item_Master_Changes c4 ON i.[ID] = c4.[Item_Maint_Items_ID] and c4.[Field_Name] = 'QtyInPack' and c4.[Counter] = 0 
        left outer join SPD_Item_Master_Changes c3 ON i.[ID] = c3.[Item_Maint_Items_ID] and c3.[Field_Name] = 'ItemCost' and c3.[Counter] = 0 
        left outer join SPD_Item_Master_Changes c2 ON i.[ID] = c2.[Item_Maint_Items_ID] and c2.[Field_Name] = 'ProductCost' and c2.[Counter] = 0 
        --left outer join SPD_Item_Master_Changes c1 ON i.[ID] = c1.[Item_Maint_Items_ID] and c1.[Field_Name] = 'FOBShippingPoint' and c1.[Counter] = 0 
        left outer join SPD_Item_Master_Changes c ON i.[ID] = c.[Item_Maint_Items_ID] and c.[Field_Name] = 'PackItemIndicator' and c.[Counter] = 0 
        where i.BatchID = @batchID and COALESCE(RTRIM(REPLACE(LEFT(COALESCE(c.[Field_Value], i.[PackItemIndicator], ''),2), '-', '')), '') IN ('C','R','')
           
      if (@costParent != @costChildren) set @batchErrors = @batchErrors + 32
      
      --DDPPackCost2NotEqual = 64
      -- ... not needed for Import Batch
               
      ------------
      -- DP ONLY --
      ------------
      if (@DPCount = 1)
      begin
      
        --DDPSameSKUGroup = 128
        -- REMOVED FROM THE SPEDY REQUIREMENTS
        -- NOPE >> MOVED TO THE DP ONLY REQUIREMENTS
        select @int1 = count(distinct COALESCE(c.[Field_Value], i.SKUGroup)) from vwItemMaintItemDetail i 
          left outer join SPD_Item_Master_Changes c ON i.[ID] = c.[Item_Maint_Items_ID] and c.[Field_Name] = 'SKUGroup' and c.[Counter] = 0 
          where i.BatchID = @batchID
          
        if (@int1 > 1) set @batchErrors = @batchErrors + 128
      
        --DPComponentsSameItemTypeAttribute = 256
        select @int1 = count(distinct COALESCE(c1.[Field_Value], i.ItemTypeAttribute)) from vwItemMaintItemDetail i 
          left outer join SPD_Item_Master_Changes c1 ON i.[ID] = c1.[Item_Maint_Items_ID] and c1.[Field_Name] = 'ItemTypeAttribute' and c1.[Counter] = 0 
          left outer join SPD_Item_Master_Changes c ON i.[ID] = c.[Item_Maint_Items_ID] and c.[Field_Name] = 'PackItemIndicator' and c.[Counter] = 0 
          where i.BatchID = @batchID and COALESCE(RTRIM(REPLACE(LEFT(COALESCE(c.[Field_Value], i.[PackItemIndicator], ''),2), '-', '')), '') IN ('C','R','')
        
        if (@int1 > 1) set @batchErrors = @batchErrors + 256
        
        --DPComponentsSameStockCategory = 512
        select @int1 = count(distinct COALESCE(c1.[Field_Value], i.StockCategory)) from vwItemMaintItemDetail i 
          left outer join SPD_Item_Master_Changes c1 ON i.[ID] = c1.[Item_Maint_Items_ID] and c1.[Field_Name] = 'StockCategory' and c1.[Counter] = 0 
          left outer join SPD_Item_Master_Changes c ON i.[ID] = c.[Item_Maint_Items_ID] and c.[Field_Name] = 'PackItemIndicator' and c.[Counter] = 0 
          where i.BatchID = @batchID and COALESCE(RTRIM(REPLACE(LEFT(COALESCE(c.[Field_Value], i.[PackItemIndicator], ''),2), '-', '')), '') IN ('C','R','')
        
        if (@int1 > 1) set @batchErrors = @batchErrors + 512
        
        ----DPComponentsSameHybridInfo = 1024
        --select @int1 = count(distinct COALESCE(c1.[Field_Value],i.HybridType)) from vwItemMaintItemDetail i 
        --  left outer join SPD_Item_Master_Changes c1 ON i.[ID] = c1.[Item_Maint_Items_ID] and c1.[Field_Name] = 'HybridType' and c1.[Counter] = 0 
        --  left outer join SPD_Item_Master_Changes c ON i.[ID] = c.[Item_Maint_Items_ID] and c.[Field_Name] = 'PackItemIndicator' and c.[Counter] = 0 
        --  where i.BatchID = @batchID and COALESCE(RTRIM(REPLACE(LEFT(COALESCE(c.[Field_Value], i.[PackItemIndicator], ''),2), '-', '')), '') IN ('C','R','')
        
        --select @int2 = count(distinct COALESCE(c1.[Field_Value], i.HybridSourceDC)) from vwItemMaintItemDetail i 
        --  left outer join SPD_Item_Master_Changes c1 ON i.[ID] = c1.[Item_Maint_Items_ID] and c1.[Field_Name] = 'HybridSourceDC' and c1.[Counter] = 0 
        --  left outer join SPD_Item_Master_Changes c ON i.[ID] = c.[Item_Maint_Items_ID] and c.[Field_Name] = 'PackItemIndicator' and c.[Counter] = 0 
        --  where i.BatchID = @batchID and COALESCE(RTRIM(REPLACE(LEFT(COALESCE(c.[Field_Value], i.[PackItemIndicator], ''),2), '-', '')), '') IN ('C','R','')
        
        --if (@int1 > 1 or @int2 > 1) set @batchErrors = @batchErrors + 1024
        
        --DPComponentsSameStockingStrategyCode = 1024
        select @int1 = count(distinct COALESCE(c1.[Field_Value],i.StockingStrategyCode)) from vwItemMaintItemDetail i 
          left outer join SPD_Item_Master_Changes c1 ON i.[ID] = c1.[Item_Maint_Items_ID] and c1.[Field_Name] = 'StockingStrategyCode' and c1.[Counter] = 0 
          left outer join SPD_Item_Master_Changes c ON i.[ID] = c.[Item_Maint_Items_ID] and c.[Field_Name] = 'PackItemIndicator' and c.[Counter] = 0 
          where i.BatchID = @batchID and COALESCE(RTRIM(REPLACE(LEFT(COALESCE(c.[Field_Value], i.[PackItemIndicator], ''),2), '-', '')), '') IN ('C','R','')
        
        if (@int1 > 1) set @batchErrors = @batchErrors + 1024
        
        
        --DPSamePrimaryVendor = 2048
        select @int1 = count(distinct COALESCE(CONVERT(int, COALESCE(c1.[Field_Value], i.VendorNumber)), 0)) from vwItemMaintItemDetail i 
          left outer join SPD_Item_Master_Changes c1 ON i.[ID] = c1.[Item_Maint_Items_ID] and c1.[Field_Name] = 'VendorNumber' and c1.[Counter] = 0 
          where i.BatchID = @batchID
        
        if (@int1 > 1) set @batchErrors = @batchErrors + 2048
        
        --DPComponentsSameHierarchy = 4096
        select @int1 = count(distinct COALESCE(c1.[Field_Value], i.ClassNum)) from vwItemMaintItemDetail i 
          left outer join SPD_Item_Master_Changes c1 ON i.[ID] = c1.[Item_Maint_Items_ID] and c1.[Field_Name] = 'ClassNum' and c1.[Counter] = 0 
          left outer join SPD_Item_Master_Changes c ON i.[ID] = c.[Item_Maint_Items_ID] and c.[Field_Name] = 'PackItemIndicator' and c.[Counter] = 0 
          where i.BatchID = @batchID and COALESCE(RTRIM(REPLACE(LEFT(COALESCE(c.[Field_Value], i.[PackItemIndicator], ''),2), '-', '')), '') IN ('C','R','')
        
        select @int2 = count(distinct COALESCE(c1.[Field_Value], i.SubClassNum)) from vwItemMaintItemDetail i 
          left outer join SPD_Item_Master_Changes c1 ON i.[ID] = c1.[Item_Maint_Items_ID] and c1.[Field_Name] = 'SubClassNum' and c1.[Counter] = 0 
          left outer join SPD_Item_Master_Changes c ON i.[ID] = c.[Item_Maint_Items_ID] and c.[Field_Name] = 'PackItemIndicator' and c.[Counter] = 0 
          where i.BatchID = @batchID and COALESCE(RTRIM(REPLACE(LEFT(COALESCE(c.[Field_Value], i.[PackItemIndicator], ''),2), '-', '')), '') IN ('C','R','')
        
        select @int3 = count(distinct COALESCE(c1.[Field_Value],i.DepartmentNum)) from vwItemMaintItemDetail i 
          left outer join SPD_Item_Master_Changes c1 ON i.[ID] = c1.[Item_Maint_Items_ID] and c1.[Field_Name] = 'DepartmentNum' and c1.[Counter] = 0 
          left outer join SPD_Item_Master_Changes c ON i.[ID] = c.[Item_Maint_Items_ID] and c.[Field_Name] = 'PackItemIndicator' and c.[Counter] = 0 
          where i.BatchID = @batchID and COALESCE(RTRIM(REPLACE(LEFT(COALESCE(c.[Field_Value], i.[PackItemIndicator], ''),2), '-', '')), '') IN ('C','R','')
        
        if (@int1 > 1 or @int2 > 1 or @int3 > 1) set @batchErrors = @batchErrors + 4096
        
      end 
      
    end
    
    --NoItems = 8192
    if (@itemCount <= 0) set @batchErrors = @batchErrors + 8192
    
    --select @DPCount,@DCount
    if ((@DPCount + @DCount) >= 1)
    begin
      --NoChanges = 16384
      
      Set @AddedSKUs = ''
	    Set @DeletedSKUs = ''
	    Select @PackSKU = Pack_SKU from SPD_Batch Where id = @BatchID
      
      select @changeCount = count(1) from SPD_Item_Master_Changes c
        inner join SPD_Item_Maint_Items i ON c.[Item_Maint_Items_ID] = i.[ID]
      where i.[Batch_ID] = @batchID AND c.Field_Name <> 'QuoteReferenceNumber'
      select @changeCount = isnull(@changeCount, 0)
      
      if(@changeCount = 0)
      begin
        select @AddedSKUs = SKUsAddedToPack, @DeletedSKUs = SKUSDeletedFromPack
	      from dbo.udf_SPD_ItemMaint_GetPackChanges(@BatchID)
	    end
	    
	    --select @changeCount, @AddedSKUs , @DeletedSKUs
	    if (@changeCount = 0 and @AddedSKUs = '' and @DeletedSKUs = '') set @batchErrors = @batchErrors + 16384
	    
	    
	    --DDPComponentQtyZero = 32768
	    select @qty = sum( coalesce(convert(int, COALESCE(c4.[Field_Value], i.QtyInPack, 0)), 0) ) 
	    from vwItemMaintItemDetail i 
        left outer join SPD_Item_Master_Changes c4 ON i.[ID] = c4.[Item_Maint_Items_ID] and c4.[Field_Name] = 'QtyInPack' and c4.[Counter] = 0 
        left outer join SPD_Item_Master_Changes c ON i.[ID] = c.[Item_Maint_Items_ID] and c.[Field_Name] = 'PackItemIndicator' and c.[Counter] = 0 
      where i.BatchID = @batchID and COALESCE(RTRIM(REPLACE(LEFT(COALESCE(c.[Field_Value], i.[PackItemIndicator], ''),2), '-', '')), '') IN ('C','R','')
      
      if (isnull(@qty, 0) <= 0) set @batchErrors = @batchErrors + 32768
      
      ------------
      -- D ONLY --
      ------------
      if (@DCount = 1)
      begin
        --SKUGroupRules = 131072
        select @US = 'US ONLY'
        select @CANADA = 'CANADA ONLY'
        select @BOTH = 'US AND CANADA'
        select @SKUGroupD = RTRIM(LTRIM(UPPER(COALESCE(c1.[Field_Value], i.SKUGroup)))) 
          from vwItemMaintItemDetail i 
            left outer join SPD_Item_Master_Changes c1 ON i.[ID] = c1.[Item_Maint_Items_ID] and c1.[Field_Name] = 'SKUGroup' and c1.[Counter] = 0 
            left outer join SPD_Item_Master_Changes c ON i.[ID] = c.[Item_Maint_Items_ID] and c.[Field_Name] = 'PackItemIndicator' and c.[Counter] = 0 
          where i.BatchID = @batchID and COALESCE(RTRIM(REPLACE(LEFT(COALESCE(c.[Field_Value], i.[PackItemIndicator], ''),2), '-', '')), '') in ('D' ,'SB')
        select @d = case @SKUGroupD
          when @US then 1
          when @CANADA then 2
          when @BOTH then 3
          else 0
          end
        -- US
        select @int1 = isnull(count(1), 0) from vwItemMaintItemDetail i 
            left outer join SPD_Item_Master_Changes c1 ON i.[ID] = c1.[Item_Maint_Items_ID] and c1.[Field_Name] = 'SKUGroup' and c1.[Counter] = 0 
            left outer join SPD_Item_Master_Changes c ON i.[ID] = c.[Item_Maint_Items_ID] and c.[Field_Name] = 'PackItemIndicator' and c.[Counter] = 0 
          where i.BatchID = @batchID and COALESCE(RTRIM(REPLACE(LEFT(COALESCE(c.[Field_Value], i.[PackItemIndicator], ''),2), '-', '')), '') IN ('C','R','') 
            and COALESCE(c1.[Field_Value], i.SKUGroup) = @US
        -- CANADA
        select @int2 = isnull(count(1), 0) from vwItemMaintItemDetail i 
            left outer join SPD_Item_Master_Changes c1 ON i.[ID] = c1.[Item_Maint_Items_ID] and c1.[Field_Name] = 'SKUGroup' and c1.[Counter] = 0 
            left outer join SPD_Item_Master_Changes c ON i.[ID] = c.[Item_Maint_Items_ID] and c.[Field_Name] = 'PackItemIndicator' and c.[Counter] = 0 
          where i.BatchID = @batchID and COALESCE(RTRIM(REPLACE(LEFT(COALESCE(c.[Field_Value], i.[PackItemIndicator], ''),2), '-', '')), '') IN ('C','R','') 
            and COALESCE(c1.[Field_Value], i.SKUGroup) = @CANADA
        -- BOTH
        select @int3 = isnull(count(1), 0) from vwItemMaintItemDetail i 
            left outer join SPD_Item_Master_Changes c1 ON i.[ID] = c1.[Item_Maint_Items_ID] and c1.[Field_Name] = 'SKUGroup' and c1.[Counter] = 0 
            left outer join SPD_Item_Master_Changes c ON i.[ID] = c.[Item_Maint_Items_ID] and c.[Field_Name] = 'PackItemIndicator' and c.[Counter] = 0 
          where i.BatchID = @batchID and COALESCE(RTRIM(REPLACE(LEFT(COALESCE(c.[Field_Value], i.[PackItemIndicator], ''),2), '-', '')), '') IN ('C','R','') 
            and COALESCE(c1.[Field_Value], i.SKUGroup) = @BOTH
        -- COMPARE
        if (
          (@int1 = 0 and @int2 = 0 and @int3 > 0 and @d = 0) or
          (@int1 = 0 and @int2 > 0 and @int3 = 0 and @d != 2) or
          (@int1 > 0 and @int2 = 0 and @int3 = 0 and @d != 1) or
          (@int1 > 0 and @int2 = 0 and @int3 > 0 and @d != 1) or
          (@int1 = 0 and @int2 > 0 and @int3 > 0 and @d != 2) or
          (@int1 > 0 and @int2 > 0) or
          (@int1 > 0 and @int2 > 0 and @int3 > 0))
        begin
          set @batchErrors = @batchErrors + 131072
        end
      end -- if (@DCount = 1)
      
      
    end
    
    -- END ERRORS - ITEM MAINT ---------------------------
  end

  --------------------------------------------------
  -- get the errors
  --------------------------------------------------
  select @batchErrors as [BatchErrors]
  
  
  --------------------------------------------------
  -- Future Costs by SKU (Warning(s))
  --------------------------------------------------
  SELECT distinct I.ID								as ID
	--, I.Batch_ID						as BatchID
	, SKU.Michaels_SKU					as SKU
	--, V.Vendor_Number					as VendorNumber
	--, CC.Effective_Date					as EffectiveDate
	--, CC.Future_Cost					as FutureCost
	, 1 as FutureCostExists
	, Case WHEN (
			Select count(*) From SPD_Item_Master_Changes imc
			Where imc.Item_Maint_Items_ID = I.ID and imc.Field_Name = 'FutureCostStatus'
		) > 0 THEN 1 
		ELSE 0 End as FutureCostCancelled

FROM SPD_Item_Maint_Items I
	--Join SPD_Batch B ON I.Batch_ID = B.ID and B.[enabled] = 1				
	inner join SPD_Item_Master_SKU SKU ON I.SKU_ID = SKU.ID
	inner join SPD_Item_Master_Vendor V	ON I.Michaels_SKU = V.Michaels_SKU and I.Vendor_Number = V.Vendor_Number
	inner join SPD_Item_Master_Vendor_Countries C	ON V.Michaels_SKU = C.Michaels_SKU and V.Vendor_Number = C.Vendor_Number and C.Primary_Indicator = 1
	inner join SPD_Item_Master_Vendor_Country_Cost CC	ON C.Michaels_SKU = CC.Michaels_SKU and C.Vendor_Number = CC.Vendor_Number and C.Country_Of_Origin = CC.Country_Of_Origin
  where I.Batch_ID = @batchID


GO


ALTER PROCEDURE [dbo].[usp_SPD_Validation_ValidateItemMaintItem]
  @itemID int
AS

  declare @itemErrors int
  set @itemErrors = 0
  
  declare @batchID bigint, @parentID int
  declare @VendorNumber bigint
  declare @batchType int
  declare @hid int
  declare @DPCount int
  declare @DCount int
  declare @CCount int
  declare @itemCount int
  declare @costParent money, @costChildren money
  declare @int1 int, @int2 int, @int3 int
  declare @str1 varchar(255)
  declare @reg bit
  declare @MichaelsSKU varchar(10)
  declare @t table (id int identity(1,1), SKU varchar(20), VendorNumber bigint, child bit)
  
  SET NOCOUNT ON
  
  --select @batchID = [BatchID] from vwItemMaintItemDetail where [ID] = @itemID
  select @batchID = [Batch_ID], @VendorNumber = Vendor_Number, @MichaelsSKU = Michaels_SKU from SPD_Item_Maint_Items where [ID] = @itemID
  
  select @batchType = Batch_Type_ID from SPD_Batch where [ID] = @batchID
  
  declare @itemType varchar(5)
  
  select @itemType = REPLACE(LEFT(COALESCE(c1.[Field_Value], i.PackItemIndicator, ''), 2), '-', '') from vwItemMaintItemDetail i 
          left outer join SPD_Item_Master_Changes c1 ON i.[ID] = c1.[Item_Maint_Items_ID] and c1.[Field_Name] = 'PackItemIndicator' and c1.[Counter] = 0 
          where i.[ID] = @itemID
  
  -----------------------------
  -- ITEM MAINT >> IMPORT / DOMESTIC BATCH
  -----------------------------
  select @itemCount = isnull(count(1), 0) from vwItemMaintItemDetail i where i.BatchID = @batchID
  
  select @DPCount = isnull(count(1), 0) from vwItemMaintItemDetail i 
    left outer join SPD_Item_Master_Changes c ON i.[ID] = c.[Item_Maint_Items_ID] and c.[Field_Name] = 'PackItemIndicator' and c.[Counter] = 0 
    where i.BatchID = @batchID and COALESCE(RTRIM(REPLACE(LEFT(COALESCE(c.[Field_Value], i.[PackItemIndicator], ''),2), '-', '')), '') = 'DP'
  
  select @DCount = isnull(count(1), 0) from vwItemMaintItemDetail i 
    left outer join SPD_Item_Master_Changes c ON i.[ID] = c.[Item_Maint_Items_ID] and c.[Field_Name] = 'PackItemIndicator' and c.[Counter] = 0 
    where i.BatchID = @batchID and COALESCE(RTRIM(REPLACE(LEFT(COALESCE(c.[Field_Value], i.[PackItemIndicator], ''),2), '-', '')), '') in ('D','SB') 
  
  select @CCount = isnull(count(1), 0) from vwItemMaintItemDetail i 
    left outer join SPD_Item_Master_Changes c ON i.[ID] = c.[Item_Maint_Items_ID] and c.[Field_Name] = 'PackItemIndicator' and c.[Counter] = 0 
    where i.BatchID = @batchID and COALESCE(RTRIM(REPLACE(LEFT(COALESCE(c.[Field_Value], i.[PackItemIndicator], ''),2), '-', '')), '') = 'C' 
  
  -- START ERRORS - IMPORT / DOMESTIC ---------------------------
  
  --None = 0

  ----------
  -- D/DP --
  ----------
  if ((@DPCount + @DCount) = 1)
  begin
  
    declare @str varchar(5), @int int, @bigint bigint
  
    if(@itemType != 'D' and @itemType != 'DP' and @itemType != 'SB')
    begin
    
      -- --------------------------------------------
      -- ONLY C (COMPONENT) ITEMS
      -- --------------------------------------------
      
      --select @parentID = i.[ID]
      --from vwItemMaintItemDetail i 
      --  left outer join SPD_Item_Master_Changes c ON i.[ID] = c.[Item_Maint_Items_ID] and c.[Field_Name] = 'PackItemIndicator' and c.[Counter] = 0 
      --where i.BatchID = @batchID and COALESCE(RTRIM(REPLACE(LEFT(COALESCE(c.[Field_Value], i.[PackItemIndicator], ''),1), '-', '')), '') = 'D'
    
      if (@DPCount = 1)
      begin
        
        declare @ItemTypeAttributeDP varchar(5)
        declare @StockCategoryDP varchar(5)
        --declare @HybridTypeDP varchar(5)
        --declare @HybridSourceDCDP varchar(5)
        declare @StockingStrategyCodeDP nvarchar(20)
        declare @DepartmentNumDP int, @ClassNumDP int, @SubClassNumDP int
        declare @VendorNumberDP bigint
        
        select @parentID = i.[ID]
        from vwItemMaintItemDetail i 
          left outer join SPD_Item_Master_Changes c ON i.[ID] = c.[Item_Maint_Items_ID] and c.[Field_Name] = 'PackItemIndicator' and c.[Counter] = 0 
        where i.BatchID = @batchID and COALESCE(RTRIM(REPLACE(LEFT(COALESCE(c.[Field_Value], i.[PackItemIndicator], ''),2), '-', '')), '') = 'DP'
        
        select 
          @ItemTypeAttributeDP = COALESCE(c1.[Field_Value], i.ItemTypeAttribute, ''),
          @StockCategoryDP = COALESCE(c2.[Field_Value], i.StockCategory, ''),
          --@HybridTypeDP = COALESCE(c3.[Field_Value], i.HybridType, ''),
          --@HybridSourceDCDP = COALESCE(c4.[Field_Value], i.HybridSourceDC, ''),
          @StockingStrategyCodeDP = COALESCE(c3.[Field_Value], i.StockingStrategyCode, ''),
          @DepartmentNumDP = CONVERT(int, COALESCE(c5.[Field_Value], i.DepartmentNum, 0)),
          @ClassNumDP = CONVERT(int, COALESCE(c6.[Field_Value], i.ClassNum, 0)),
          @SubClassNumDP = CONVERT(int, COALESCE(c7.[Field_Value], i.SubClassNum, 0)),
          @VendorNumberDP = CONVERT(bigint, COALESCE(c8.[Field_Value], i.VendorNumber, 0))
        from vwItemMaintItemDetail i 
          left outer join SPD_Item_Master_Changes c1 ON i.[ID] = c1.[Item_Maint_Items_ID] and c1.[Field_Name] = 'ItemTypeAttribute' and c1.[Counter] = 0 
          left outer join SPD_Item_Master_Changes c2 ON i.[ID] = c2.[Item_Maint_Items_ID] and c2.[Field_Name] = 'StockCategory' and c2.[Counter] = 0 
          left outer join SPD_Item_Master_Changes c3 ON i.[ID] = c3.[Item_Maint_Items_ID] and c3.[Field_Name] = 'StockingStrategyCode' and c3.[Counter] = 0 
          --left outer join SPD_Item_Master_Changes c3 ON i.[ID] = c3.[Item_Maint_Items_ID] and c3.[Field_Name] = 'HybridType' and c3.[Counter] = 0 
          --left outer join SPD_Item_Master_Changes c4 ON i.[ID] = c4.[Item_Maint_Items_ID] and c4.[Field_Name] = 'HybridSourceDC' and c4.[Counter] = 0 
          left outer join SPD_Item_Master_Changes c5 ON i.[ID] = c5.[Item_Maint_Items_ID] and c5.[Field_Name] = 'DepartmentNum' and c5.[Counter] = 0 
          left outer join SPD_Item_Master_Changes c6 ON i.[ID] = c6.[Item_Maint_Items_ID] and c6.[Field_Name] = 'ClassNum' and c6.[Counter] = 0 
          left outer join SPD_Item_Master_Changes c7 ON i.[ID] = c7.[Item_Maint_Items_ID] and c7.[Field_Name] = 'SubClassNum' and c7.[Counter] = 0 
          left outer join SPD_Item_Master_Changes c8 ON i.[ID] = c8.[Item_Maint_Items_ID] and c8.[Field_Name] = 'VendorNumber' and c8.[Counter] = 0 
        where i.[ID] = @parentID
      
        --ComponentsSameItemTypeAttribute = 1 ' DP
        
        select @str = COALESCE(c1.[Field_Value], i.ItemTypeAttribute, '') from vwItemMaintItemDetail i 
          left outer join SPD_Item_Master_Changes c1 ON i.[ID] = c1.[Item_Maint_Items_ID] and c1.[Field_Name] = 'ItemTypeAttribute' and c1.[Counter] = 0 
          where i.[ID] = @itemID
        if (@str != @ItemTypeAttributeDP) set @itemErrors = @itemErrors + 1
        
        --ComponentsSameStockCategory = 2 ' DP
        
        select @str = COALESCE(c1.[Field_Value], i.StockCategory, '') from vwItemMaintItemDetail i 
          left outer join SPD_Item_Master_Changes c1 ON i.[ID] = c1.[Item_Maint_Items_ID] and c1.[Field_Name] = 'StockCategory' and c1.[Counter] = 0 
          where i.[ID] = @itemID
        if (@str != @StockCategoryDP) set @itemErrors = @itemErrors + 2
        
        
        --ComponentsSameHybridType = 4 ' DP
        
        select @str = COALESCE(c1.[Field_Value], i.StockingStrategyCode, '') from vwItemMaintItemDetail i 
          left outer join SPD_Item_Master_Changes c1 ON i.[ID] = c1.[Item_Maint_Items_ID] and c1.[Field_Name] = 'StockingStrategyCode' and c1.[Counter] = 0 
          where i.[ID] = @itemID
        if (@str != @StockingStrategyCodeDP) set @itemErrors = @itemErrors + 4
        
        ----ComponentsSameHybridType = 4 ' DP
        
        --select @str = COALESCE(c1.[Field_Value], i.HybridType, '') from vwItemMaintItemDetail i 
        --  left outer join SPD_Item_Master_Changes c1 ON i.[ID] = c1.[Item_Maint_Items_ID] and c1.[Field_Name] = 'HybridType' and c1.[Counter] = 0 
        --  where i.[ID] = @itemID
        --if (@str != @HybridTypeDP) set @itemErrors = @itemErrors + 4
        
        ----ComponentsSameHybridSourcingDC = 8 ' DP
        
        --select @str = COALESCE(c1.[Field_Value], i.HybridSourceDC, '') from vwItemMaintItemDetail i 
        --  left outer join SPD_Item_Master_Changes c1 ON i.[ID] = c1.[Item_Maint_Items_ID] and c1.[Field_Name] = 'HybridSourceDC' and c1.[Counter] = 0 
        --  where i.[ID] = @itemID
        --if (@str != @HybridSourceDCDP) set @itemErrors = @itemErrors + 8
        
        --ComponentsSameHierarchyD = 16 ' DP
        
        select @int = CONVERT(int, COALESCE(c1.[Field_Value], i.DepartmentNum, 0)) from vwItemMaintItemDetail i 
          left outer join SPD_Item_Master_Changes c1 ON i.[ID] = c1.[Item_Maint_Items_ID] and c1.[Field_Name] = 'DepartmentNum' and c1.[Counter] = 0 
          where i.[ID] = @itemID
        if (@int != @DepartmentNumDP) set @itemErrors = @itemErrors + 16
        
        --ComponentsSameHierarchyC = 32 ' DP
        
        select @int = CONVERT(int, COALESCE(c1.[Field_Value], i.ClassNum, 0)) from vwItemMaintItemDetail i 
          left outer join SPD_Item_Master_Changes c1 ON i.[ID] = c1.[Item_Maint_Items_ID] and c1.[Field_Name] = 'ClassNum' and c1.[Counter] = 0 
          where i.[ID] = @itemID
        if (@int != @ClassNumDP) set @itemErrors = @itemErrors + 32
        
        --ComponentsSameHierarchySC = 64 ' DP
        
        select @int = CONVERT(int, COALESCE(c1.[Field_Value], i.SubClassNum, 0)) from vwItemMaintItemDetail i 
          left outer join SPD_Item_Master_Changes c1 ON i.[ID] = c1.[Item_Maint_Items_ID] and c1.[Field_Name] = 'SubClassNum' and c1.[Counter] = 0 
          where i.[ID] = @itemID
        if (@int != @SubClassNumDP) set @itemErrors = @itemErrors + 64
        
        --ComponentsSameVendor = 128 ' DP
        
        select @bigint = CONVERT(bigint, COALESCE(c1.[Field_Value], i.VendorNumber, 0)) from vwItemMaintItemDetail i 
          left outer join SPD_Item_Master_Changes c1 ON i.[ID] = c1.[Item_Maint_Items_ID] and c1.[Field_Name] = 'VendorNumber' and c1.[Counter] = 0 
          where i.[ID] = @itemID
        if (@bigint != @VendorNumberDP) set @itemErrors = @itemErrors + 128
      
      end
      
      -- MOVED DOWN
      ----if (@DCount = 1)
      ----begin
        
      ----  --DisplayerWarehouseSeasonalW = 256 ' D
        
      ----  select @str = COALESCE(c1.[Field_Value], i.StockCategory, '') from vwItemMaintItemDetail i 
      ----    left outer join SPD_Item_Master_Changes c ON i.[ID] = c.[Item_Maint_Items_ID] and c.[Field_Name] = 'PackItemIndicator' and c.[Counter] = 0 
      ----    left outer join SPD_Item_Master_Changes c1 ON i.[ID] = c1.[Item_Maint_Items_ID] and c1.[Field_Name] = 'StockCategory' and c1.[Counter] = 0 
      ----    where i.[ID] = @itemID and COALESCE(RTRIM(REPLACE(LEFT(COALESCE(c.[Field_Value], i.[PackItemIndicator], ''),2), '-', '')), '') IN ('D')
      ----  if (ltrim(rtrim(@str)) != 'W') set @itemErrors = @itemErrors + 256
        
      ----  --DisplayerWarehouseSeasonalS = 512 'D
        
      ----  select @str = COALESCE(c1.[Field_Value], i.ItemTypeAttribute, '') from vwItemMaintItemDetail i 
      ----    left outer join SPD_Item_Master_Changes c ON i.[ID] = c.[Item_Maint_Items_ID] and c.[Field_Name] = 'PackItemIndicator' and c.[Counter] = 0 
      ----    left outer join SPD_Item_Master_Changes c1 ON i.[ID] = c1.[Item_Maint_Items_ID] and c1.[Field_Name] = 'ItemTypeAttribute' and c1.[Counter] = 0 
      ----    where i.[ID] = @itemID and COALESCE(RTRIM(REPLACE(LEFT(COALESCE(c.[Field_Value], i.[PackItemIndicator], ''),2), '-', '')), '') IN ('D')
      ----  if (ltrim(rtrim(@str)) != 'S') set @itemErrors = @itemErrors + 512
        
      ----end
      
      declare @SKUDDP varchar(20)
      declare @SKU varchar(20)
      declare @SKUGroupDDP varchar(50)
      declare @SKUGroup varchar(50)
      set @parentID = 0
      
      select @parentID = i.[ID]
      from vwItemMaintItemDetail i 
        left outer join SPD_Item_Master_Changes c ON i.[ID] = c.[Item_Maint_Items_ID] and c.[Field_Name] = 'PackItemIndicator' and c.[Counter] = 0 
      where i.BatchID = @batchID and COALESCE(RTRIM(REPLACE(LEFT(COALESCE(c.[Field_Value], i.[PackItemIndicator], ''),1), '-', '')), '') in ('D','SB')
      
      select 
        @SKUGroupDDP = COALESCE(c1.[Field_Value], i.SKUGroup, ''),
        @SKUDDP = COALESCE(c2.[Field_Value], i.SKU, '')
      from vwItemMaintItemDetail i 
        left outer join SPD_Item_Master_Changes c1 ON i.[ID] = c1.[Item_Maint_Items_ID] and c1.[Field_Name] = 'SKUGroup' and c1.[Counter] = 0 
        left outer join SPD_Item_Master_Changes c2 ON i.[ID] = c2.[Item_Maint_Items_ID] and c2.[Field_Name] = 'SKU' and c1.[Counter] = 0 
      where i.[ID] = @parentID
      
      
      -- D/DP 
      --ComponentsSamePLI (Package Language Indicator)
      declare @parentPLI varchar(10)
      declare @childPLI varchar(10)
      DECLARE @pli as varchar(1)
      SET @parentPLI = ''
	  SET @childPLI = ''
	  SET @pli = ''

      --English (PARENT)
      Select @pli = COALESCE(Field_Value, '')
	  FROM  SPD_Item_Master_Changes
	  WHERE Item_Maint_Items_ID = @parentID and field_Name = 'PLIEnglish'

	  IF  @pli = ''
	  Begin
		Select @pli = COALESCE(Package_Language_Indicator,'')
		FROM SPD_Item_Master_Languages_Supplier
		WHERE Language_Type_ID = 1 and Michaels_SKU = @SKUDDP and Vendor_Number = @VendorNumber
	  End
	  
	  SET @parentPLI = @pli
      SET @pli = ''
      
      --French (PARENT)
      Select @pli = COALESCE(Field_Value, '')
	  FROM  SPD_Item_Master_Changes
	  WHERE Item_Maint_Items_ID = @parentID and field_Name = 'PLIFrench'

	  IF  @pli = ''
	  Begin
		Select @pli = COALESCE(Package_Language_Indicator,'')
		FROM SPD_Item_Master_Languages_Supplier
		WHERE Language_Type_ID = 2 and Michaels_SKU = @SKUDDP and Vendor_Number = @VendorNumber
	  End
	  
	  SET @parentPLI = @parentPLI + @pli
	  SET @pli = ''
	  
      --SPanish (PARENT)
      Select @pli = COALESCE(Field_Value, '')
	  FROM  SPD_Item_Master_Changes
	  WHERE Item_Maint_Items_ID = @parentID and field_Name = 'PLISpanish'

	  IF  @pli = ''
	  Begin
		Select @pli = COALESCE(Package_Language_Indicator,'')
		FROM SPD_Item_Master_Languages_Supplier
		WHERE Language_Type_ID = 3 and Michaels_SKU = @SKUDDP and Vendor_Number = @VendorNumber
	  End
	  
	  SET @parentPLI = @parentPLI + @pli
	  SET @pli = ''
      
      --GET Component SKU
      DECLARE @childSKU as varchar(20)
      Select @childSKU = SKU
      FROM vwItemMaintItemDetail WHERE ID = @itemID
     
      --English (PARENT)
      Select @pli = COALESCE(Field_Value, '')
	  FROM  SPD_Item_Master_Changes
	  WHERE Item_Maint_Items_ID = @itemID and field_Name = 'PLIEnglish'

	  IF  @pli = ''
	  Begin
		Select @pli = COALESCE(Package_Language_Indicator,'')
		FROM SPD_Item_Master_Languages_Supplier
		WHERE Language_Type_ID = 1 and Michaels_SKU = @childSKU and Vendor_Number = @VendorNumber
	  End
	  
	  SET @childPLI = @pli
	  SET @pli = ''
	  
      --French (PARENT)
      Select @pli = COALESCE(Field_Value, '')
	  FROM  SPD_Item_Master_Changes
	  WHERE Item_Maint_Items_ID = @itemID and field_Name = 'PLIFrench'

	  IF  @pli = ''
	  Begin
		Select @pli = COALESCE(Package_Language_Indicator,'')
		FROM SPD_Item_Master_Languages_Supplier
		WHERE Language_Type_ID = 2 and Michaels_SKU = @childSKU and Vendor_Number = @VendorNumber
	  End
	  
	  SET @childPLI = @childPLI + @pli
	  SET @pli = ''
	  
      --SPanish (PARENT)
      Select @pli = COALESCE(Field_Value, '')
	  FROM  SPD_Item_Master_Changes
	  WHERE Item_Maint_Items_ID = @itemID and field_Name = 'PLISpanish'

	  IF  @pli = ''
	  Begin
		Select @pli = COALESCE(Package_Language_Indicator,'')
		FROM SPD_Item_Master_Languages_Supplier
		WHERE Language_Type_ID = 3 and Michaels_SKU = @childSKU and Vendor_Number = @VendorNumber
	  End
	  
	  SET @childPLI = @childPLI + @pli
	  SET @pli = ''
	      
      If(@parentPLI != @childPLI) set @itemErrors = @itemErrors + 262144
 
 
	  --ComponentsSameTI (Translation Indicator)
      declare @parentTI varchar(10)
      declare @childTI varchar(10)
      DECLARE @ti as varchar(1)
      SET @parentTI = ''
	  SET @childTI = ''
	  SET @ti = ''

      --English (PARENT)
      Select @ti = COALESCE(Field_Value, '')
	  FROM  SPD_Item_Master_Changes
	  WHERE Item_Maint_Items_ID = @parentID and field_Name = 'TIEnglish'

	  IF  @ti = ''
	  Begin
		Select @ti = COALESCE(Translation_Indicator,'')
		FROM SPD_Item_Master_Languages
		WHERE Language_Type_ID = 1 and Michaels_SKU = @SKUDDP
	  End
	  
	  SET @parentTI = @ti
      SET @ti = ''
      
      --French (PARENT)
      Select @ti = COALESCE(Field_Value, '')
	  FROM  SPD_Item_Master_Changes
	  WHERE Item_Maint_Items_ID = @parentID and field_Name = 'TIFrench'

	  IF  @ti = ''
	  Begin
		Select @ti = COALESCE(Translation_Indicator,'')
		FROM SPD_Item_Master_Languages
		WHERE Language_Type_ID = 2 and Michaels_SKU = @SKUDDP
	  End
	  
	  SET @parentTI = @parentTI + @ti
	  SET @ti = ''
	  
      --SPanish (PARENT)
      Select @ti = COALESCE(Field_Value, '')
	  FROM  SPD_Item_Master_Changes
	  WHERE Item_Maint_Items_ID = @parentID and field_Name = 'TISpanish'

	  IF  @ti = ''
	  Begin
		Select @ti = COALESCE(Translation_Indicator,'')
		FROM SPD_Item_Master_Languages
		WHERE Language_Type_ID = 3 and Michaels_SKU = @SKUDDP
	  End
	  
	  SET @parentTI = @parentTI + @ti
	  SET @ti = ''
      
      --GET Component SKU
      Select @childSKU = SKU
      FROM vwItemMaintItemDetail WHERE ID = @itemID
     
      --English (PARENT)
      Select @ti = COALESCE(Field_Value, '')
	  FROM  SPD_Item_Master_Changes
	  WHERE Item_Maint_Items_ID = @itemID and field_Name = 'TIEnglish'

	  IF  @ti = ''
	  Begin
		Select @ti = COALESCE(Translation_Indicator,'')
		FROM SPD_Item_Master_Languages
		WHERE Language_Type_ID = 1 and Michaels_SKU = @childSKU 
	  End
	  
	  SET @childTI = @ti
	  SET @ti = ''
	  
      --French (PARENT)
      Select @ti = COALESCE(Field_Value, '')
	  FROM  SPD_Item_Master_Changes
	  WHERE Item_Maint_Items_ID = @itemID and field_Name = 'TIFrench'

	  IF  @ti = ''
	  Begin
		Select @ti = COALESCE(Translation_Indicator,'')
		FROM SPD_Item_Master_Languages
		WHERE Language_Type_ID = 2 and Michaels_SKU = @childSKU
	  End
	  
	  SET @childTI = @childTI + @ti
	  SET @ti = ''
	  
      --SPanish (PARENT)
      Select @ti = COALESCE(Field_Value, '')
	  FROM  SPD_Item_Master_Changes
	  WHERE Item_Maint_Items_ID = @itemID and field_Name = 'TISpanish'

	  IF  @ti = ''
	  Begin
		Select @ti = COALESCE(Translation_Indicator,'')
		FROM SPD_Item_Master_Languages
		WHERE Language_Type_ID = 3 and Michaels_SKU = @childSKU
	  End
	  
	  SET @childTI = @childTI + @ti
	  SET @ti = ''

      If(@parentTI != @childTI) set @itemErrors = @itemErrors + 524288 
       
       
      --ComponentsMustBeActive = 1024 ' D/DP
      select @str = COALESCE(c1.[Field_Value], i.ItemStatus, '') from vwItemMaintItemDetail i 
        left outer join SPD_Item_Master_Changes c1 ON i.[ID] = c1.[Item_Maint_Items_ID] and c1.[Field_Name] = 'ItemStatus' and c1.[Counter] = 0 
        where i.[ID] = @itemID
      if (ltrim(rtrim(@str)) != 'A') set @itemErrors = @itemErrors + 1024
        
      --ComponentsSameSkuGroup = 2048 ' D/DP
      -- REMOVED FROM THE SPEDY REQUIREMENTS
      -- NOPE PUT BACK IN #14
        
      if (@DPCount = 1)
      begin
        select @SKUGroup = COALESCE(c1.[Field_Value], i.SKUGroup, '') from vwItemMaintItemDetail i 
          left outer join SPD_Item_Master_Changes c1 ON i.[ID] = c1.[Item_Maint_Items_ID] and c1.[Field_Name] = 'SKUGroup' and c1.[Counter] = 0 
          where i.[ID] = @itemID
        if (@SKUGroupDDP != @SKUGroup) set @itemErrors = @itemErrors + 2048
      end
      
      --ComponentsQtyInPack = 4096 ' D/DP
      
      select @int = CONVERT(int, COALESCE(c1.[Field_Value], i.QtyInPack, -1)) from vwItemMaintItemDetail i 
        left outer join SPD_Item_Master_Changes c1 ON i.[ID] = c1.[Item_Maint_Items_ID] and c1.[Field_Name] = 'QtyInPack' and c1.[Counter] = 0 
        where i.[ID] = @itemID
      if (@int < 0) set @itemErrors = @itemErrors + 4096


      --DDPComponentVendors = 65536
      insert into @t (SKU,VendorNumber,child)
      select distinct Michaels_SKU, Vendor_Number, 0 from SPD_Item_Master_Vendor where Michaels_SKU = @SKUDDP
      select @SKU = COALESCE(c1.[Field_Value], i.SKU, '') from vwItemMaintItemDetail i 
        left outer join SPD_Item_Master_Changes c1 ON i.[ID] = c1.[Item_Maint_Items_ID] and c1.[Field_Name] = 'SKU' and c1.[Counter] = 0 
        where i.[ID] = @itemID
      update @t set child = 1 where VendorNumber in (select distinct Vendor_Number from SPD_Item_Master_Vendor where Michaels_SKU = @SKU)
      select @int1 = isnull(count(1), 0) from @t
      select @int2 = isnull(count(1), 0) from @t where child = 0
      if (@int1 > 1 and @int2 > 0) set @itemErrors = @itemErrors + 65536
      
    
    end  -- @itemType != 'D' and @itemType != 'DP'
    
    if (@DCount = 1 and @itemType in ('D' ,'SB'))
    begin
      
      --DisplayerWarehouseSeasonalW = 256 ' D
    --  set @str = ''
	--  if @itemType = 'D'  'SB is intentionally excluded
	--  begin
	--	  select @str = COALESCE(c1.[Field_Value], i.StockCategory, '') from vwItemMaintItemDetail i 
	--		left outer join SPD_Item_Master_Changes c ON i.[ID] = c.[Item_Maint_Items_ID] and c.[Field_Name] = 'PackItemIndicator' and c.[Counter] = 0 
	--		left outer join SPD_Item_Master_Changes c1 ON i.[ID] = c1.[Item_Maint_Items_ID] and c1.[Field_Name] = 'StockCategory' and c1.[Counter] = 0 
	--		where i.[ID] = @itemID and COALESCE(RTRIM(REPLACE(LEFT(COALESCE(c1.[Field_Value], i.[PackItemIndicator], ''),2), '-', '')), '') IN ('D','SB')
	--	  if (ltrim(rtrim(@str)) != 'W') set @itemErrors = @itemErrors + 256
	--  end
	  
      --DisplayerWarehouseSeasonalS = 512 'D
      set @str = ''
      select @str = COALESCE(c1.[Field_Value], i.ItemTypeAttribute, '') from vwItemMaintItemDetail i 
        left outer join SPD_Item_Master_Changes c ON i.[ID] = c.[Item_Maint_Items_ID] and c.[Field_Name] = 'PackItemIndicator' and c.[Counter] = 0 
        left outer join SPD_Item_Master_Changes c1 ON i.[ID] = c1.[Item_Maint_Items_ID] and c1.[Field_Name] = 'ItemTypeAttribute' and c1.[Counter] = 0 
        where i.[ID] = @itemID and COALESCE(RTRIM(REPLACE(LEFT(COALESCE(c1.[Field_Value], i.[PackItemIndicator], ''),2), '-', '')), '') IN ('D','SB')
      if (ltrim(rtrim(@str)) != 'S') set @itemErrors = @itemErrors + 512
      
    end
    
    --DDPActive = 8192 ' D/DP
    set @str = ''
    select @str = COALESCE(c1.[Field_Value], i.ItemStatus, '') from vwItemMaintItemDetail i 
      left outer join SPD_Item_Master_Changes c ON i.[ID] = c.[Item_Maint_Items_ID] and c.[Field_Name] = 'PackItemIndicator' and c.[Counter] = 0 
      left outer join SPD_Item_Master_Changes c1 ON i.[ID] = c1.[Item_Maint_Items_ID] and c1.[Field_Name] = 'ItemStatus' and c1.[Counter] = 0 
      where i.[ID] = @itemID and COALESCE(RTRIM(REPLACE(LEFT(COALESCE(c.[Field_Value], i.[PackItemIndicator], ''), 2), '-', '')), '') IN ('D','DP','SB')
    if (ltrim(rtrim(@str)) = 'C') set @itemErrors = @itemErrors + 8192
   
  end

   
  -- END ERRORS - ITEM MAINT ---------------------------

  SET NOCOUNT OFF

  select @itemErrors as [ItemErrors]
  
  select VendorNumber from @t where child = 0


  if 1=2 -- BEGIN REMOVE GTIN FUNCTIONALITY 
  BEGIN

	  declare @InnerGTIN table(ID int identity(1,1), Sequence int, InnerGTIN varchar(20), InnerGTINExists bit, InnerGTINDupBatch bit, InnerGTINDupWorkflow bit)
	  -- primary upc
	  insert into @InnerGTIN (Sequence, InnerGTIN, InnerGTINExists, InnerGTINDupBatch, InnerGTINDupWorkflow) 
	  select 0, InnerGTIN, 0, 0, 0 from SPD_Item_Master_GTINs where Michaels_SKU = @MichaelsSKU

	  update @InnerGTIN set InnerGTIN = coalesce(field_value, InnerGTIN) from @InnerGTIN
	  left join SPD_Item_Master_Changes c1 ON c1.[Item_Maint_Items_ID] = @itemid and c1.[Field_Name] = 'InnerGTIN' and c1.[Counter] = 0 
          
	  update @InnerGTIN set InnerGTINExists = 1
		where exists (select 1 from SPD_Item_Master_GTINs v where v.InnerGTIN = [@InnerGTIN].InnerGTIN and Michaels_SKU <> @MichaelsSKU)

	  update @InnerGTIN set InnerGTINExists = 1
		where exists (select 1 from SPD_Item_Master_GTINs v where v.CaseGTIN = [@InnerGTIN].InnerGTIN and Michaels_SKU <> @MichaelsSKU)

	  update @InnerGTIN set InnerGTINDupBatch = 1 
		where InnerGTIN in (select field_value from SPD_Item_Master_Changes c1, SPD_Item_Maint_Items m1 where c1.Item_Maint_Items_ID = m1.ID and m1.ID = @batchID and c1.Item_Maint_Items_ID <> @itemID)

	  --update @InnerGTIN set InnerGTINDupWorkflow = 1 
	  --this Case is not needed for maint

	  delete from @InnerGTIN where InnerGTINExists = 0 and InnerGTINDupBatch = 0 and InnerGTINDupWorkflow = 0
  
	  -- return results
	  select ID,Sequence,InnerGTIN,InnerGTINExists,InnerGTINDupBatch,InnerGTINDupWorkflow from @InnerGTIN

	  --CASE GTIN VALIDATION

	  declare @CaseGTIN table(ID int identity(1,1), Sequence int, CaseGTIN varchar(20), CaseGTINExists bit, CaseGTINDupBatch bit, CaseGTINDupWorkflow bit)
	  insert into @CaseGTIN (Sequence, CaseGTIN, CaseGTINExists, CaseGTINDupBatch, CaseGTINDupWorkflow) 
	  select 0, CaseGTIN, 0, 0, 0 from SPD_Item_Master_GTINs where Michaels_SKU = @MichaelsSKU

	  update @CaseGTIN set CaseGTIN = coalesce(field_value, CaseGTIN) from @CaseGTIN
	  left join SPD_Item_Master_Changes c1 ON c1.[Item_Maint_Items_ID] = @itemid and c1.[Field_Name] = 'CaseGTIN' and c1.[Counter] = 0 
          
	  update @CaseGTIN set CaseGTINExists = 1
		where exists (select 1 from SPD_Item_Master_GTINs v where v.CaseGTIN = [@CaseGTIN].CaseGTIN and Michaels_SKU <> @MichaelsSKU)

	  update @CaseGTIN set CaseGTINExists = 1
		where exists (select 1 from SPD_Item_Master_GTINs v where v.InnerGTIN = [@CaseGTIN].CaseGTIN and Michaels_SKU <> @MichaelsSKU)

	  update @CaseGTIN set CaseGTINDupBatch = 1 
		where CaseGTIN in (select field_value from SPD_Item_Master_Changes c1, SPD_Item_Maint_Items m1 where c1.Item_Maint_Items_ID = m1.ID and m1.ID = @batchID and c1.Item_Maint_Items_ID <> @itemID)

	  --update @CaseGTIN set CaseGTINDupWorkflow = 1 
	  --this Case is not needed for maint

	  delete from @CaseGTIN where CaseGTINExists = 0 and CaseGTINDupBatch = 0 and CaseGTINDupWorkflow = 0
  
	  -- return results
	  select ID,Sequence,CaseGTIN,CaseGTINExists,CaseGTINDupBatch,CaseGTINDupWorkflow from @CaseGTIN

END -- END REMOVE GTIN FUNCTIONALITY


GO



ALTER   PROCEDURE [dbo].[sp_spedy_import_items_upld_process]
AS
BEGIN
    SET NOCOUNT ON;

    -- Declare variables to hold data from the staging table and IDs
    DECLARE
        -- IDs declared outside the loop, will hold the single IDs
@Batch_ID bigint,
@ID bigint,
	@Vendor_Number nvarchar(100)=null,
	 @item_Batch_ID bigint,
	@ProductIdentifiesAsCosmetic varchar(1) = 'N',
	@DateSubmitted datetime = null,
	@Vendor varchar(100) = null,
	@Agent varchar(100) = null,
	@AgentType varchar(20) = null,
	@Buyer varchar(100) = null,
	@Fax varchar(100) = null,
	@EnteredBy varchar(100) = null,
	@SKUGroup varchar(100) = null,
	@Email varchar(100) = null,
	@EnteredDate datetime = null,
	@Dept varchar(100) = null,
	@Class varchar(100) = null,
	@SubClass varchar(100) = null,
	@PrimaryUPC varchar(100) = null,
	@MichaelsSKU varchar(100) = null,
	@GenerateMichaelsUPC varchar(1) = null,
	@AdditionalUPC1 varchar(100) = null,
	@AdditionalUPC2 varchar(100) = null,
	@AdditionalUPC3 varchar(100) = null,
	@AdditionalUPC4 varchar(100) = null,
	@AdditionalUPC5 varchar(100) = null,
	@AdditionalUPC6 varchar(100) = null,
	@AdditionalUPC7 varchar(100) = null,
	@AdditionalUPC8 varchar(100) = null,
	--PMO200141 GTIN14 Enhancements changes
	@InnerGTIN varchar(100) = null,
	@CaseGTIN varchar(100) = null,
	@GenerateMichaelsGTIN varchar(1) = null,
	--PMO200141 GTIN14 Enhancements changes end
	@PackSKU varchar(100) = null,
	@PlanogramName varchar(100) = null,
	@VendorNumber varchar(100) = null,
	@VendorRank varchar(100) = null,
	@ItemTask varchar(100) = 'NEW ITEM',
	@Description varchar(100) = null,
	@Days varchar(20) = null,
	@VendorMinOrderAmount varchar(20) = null,
	@VendorContactName varchar(100) = null,
	@VendorContactPhone varchar(100) = null,
	@VendorContactEmail varchar(100) = null,
	@VendorContactFax varchar(100) = null,
	@ManufactureContact varchar(100) = null,
	@ManufacturePhone varchar(100) = null,
	@ManufactureEmail varchar(100) = null,
	@ManufactureFax varchar(100) = null,
	@AgentContact varchar(100) = null,
	@AgentPhone varchar(100) = null,
	@AgentEmail varchar(100) = null,
	@AgentFax varchar(100) = null,
	@VendorStyleNumber varchar(100) = null,
	@HarmonizedCodeNumber varchar(100) = null,
	@DetailInvoiceCustomsDesc varchar(max) = null,
	@ComponentMaterialBreakdown varchar(max) = null,
	@ComponentConstructionMethod varchar(max) = null,
	@IndividualItemPackaging varchar(100) = null,
	@EachInsideMasterCaseBox varchar(100) = null,
	@EachInsideInnerPack varchar(100) = null,
	--@EachPieceNetWeightLbsPerOunce varchar(100) = null,
	@INNER_CARTON_NET_WEIGHT_LBS decimal(18,6) = Null,
	@INNER_CARTON_LENGTH varchar(100) = null,
	@INNER_CARTON_WIDTH varchar(100) = null,
	@INNER_CARTON_HEIGHT varchar(100) = null,
	@MasterCartonDimensionsLength varchar(100) = null,
	@MasterCartonDimensionsWidth varchar(100) = null,
	@MasterCartonDimensionsHeight varchar(100) = null,
	@MasterCartonDimensionsWeight varchar(100) = null,
	@CubicFeetPerMasterCarton varchar(100) = null,
	@WeightMasterCarton varchar(100) = null,
	@CubicFeetPerInnerCarton varchar(100) = null,
	@FOBShippingPoint varchar(100) = null,
	@DutyPercent varchar(100) = null,
	@DutyAmount varchar(100) = null,
	@AdditionalDutyComment varchar(100) = null,
	@AdditionalDutyAmount varchar(100) = null,
	@OceanFreightAmount varchar(100) = null,
	@OceanFreightComputedAmount varchar(100) = null,
	@AgentCommissionPercent varchar(100) = null,
	@AgentCommissionAmount varchar(100) = null,
	@OtherImportCostsPercent varchar(100) ='0.02',
	@OtherImportCostsAmount varchar(100) = null,
	@PackagingCostAmount varchar(100) = null,
	@TotalImportBurden varchar(100) = null,
	@WarehouseLandedCost varchar(100) = null,
	@PurchaseOrderIssuedTo varchar(max) = null,
	@ShippingPoint varchar(100) = null,
	@CountryOfOrigin varchar(100) = null,
	@CountryOfOriginName varchar(50) = null,
	@VendorComments varchar(max) = null,
	@StockCategory varchar(20) = null,
	@FreightTerms varchar(20) = null,
	@ItemType varchar(20) = null,
	@PackItemIndicator varchar(20) = null,
	@ItemTypeAttribute varchar(20) = null,
	@AllowStoreOrder varchar(20) = null,
	@InventoryControl varchar(20) = null,
	@AutoReplenish varchar(20) = null,
	@PrePriced varchar(20) = 'N',
	@TaxUDA varchar(20) = '1',
	@PrePricedUDA varchar(20) = null,
	@TaxValueUDA varchar(20) = '100',
	@HybridType varchar(20) = null,
	@SourcingDC varchar(20) = null,
	@LeadTime varchar(20) = null,
	@ConversionDate datetime = null,
	@StoreSuppZoneGRP varchar(20) = '1',
	@WhseSuppZoneGRP varchar(20) = '1',
	@POGMaxQty varchar(20) = null,
	@POGSetupPerStore varchar(20) = null,
	@ProjSalesPerStorePerMonth varchar(20) = null,
	@OutboundFreight varchar(20) = null,
	@NinePercentWhseCharge varchar(20) = null,
	@TotalStoreLandedCost varchar(20) = null,
	@RDBase varchar(20) = null,
	@RDCentral varchar(20) = null,
	@RDTest varchar(20) = null,
	@RDAlaska varchar(20) = null,
	@RDCanada varchar(20) = null,
	@RD0Thru9 varchar(20) = null,
	@RDCalifornia varchar(20) = null,
	@RDVillageCraft varchar(20) = null,
	@Retail9 money,
	@Retail10 money,
	@Retail11 money,
	@Retail12 money,
	@Retail13 money,
	@RDQuebec money = null,
	@RDPuertoRico money = null,
	@HazMatYes varchar(1) = null,
	@HazMatNo varchar(1) = null,
	@HazMatMFGCountry varchar(40) = null,
	@HazMatMFGName varchar(40) = null,
	@HazMatMFGFlammable varchar(40) = null,
	@HazMatMFGCity varchar(40) = null,
	@HazMatContainerType varchar(40) = null,
	@HazMatMFGState varchar(40) = null,
	@HazMatContainerSize varchar(40) = null,
	@HazMatMFGPhone varchar(40) = null,
	@HazMatMSDSUOM varchar(40) = null,
	@CoinBattery varchar(1) = 'N',
	@TSSA varchar(1) = 'N',
	@CSA varchar(1) = 'N',
	@UL varchar(1) = 'N',
	@LicenceAgreement varchar(1) = 'N',
	@FumigationCertificate varchar(1) = null,
	@PhytoTemporaryShipment varchar(1) = null,
	@KILNDriedCertificate varchar(1) = 'N',
	@ChinaComInspecNumAndCCIBStickers varchar(1) = 'N',
	@OriginalVisa varchar(1) = 'N',
	@TextileDeclarationMidCode varchar(1) = 'N',
	@QuotaChargeStatement varchar(1) = 'N',
	@MSDS varchar(1) = 'N',
	@TSCA varchar(1) = 'N',
	@DropBallTestCert varchar(1) = 'N',
	@ManMedicalDeviceListing varchar(1) = 'N',
	@ManFDARegistration varchar(1) = 'N',
	@CopyRightIndemnification varchar(1) = 'N',
	@FishWildLifeCert varchar(1) = 'N',
	@Proposition65LabelReq varchar(1) = 'N',
	@CCCR varchar(1) = 'N',
	@FormaldehydeCompliant varchar(1) = 'N',
	@Tax_Wizard bit = 0,
	@QuoteSheetStatus varchar(20) = null,
	@Season varchar(20) = null,
	@PaymentTerms varchar(20) = null,
	@VendorName varchar(100) = null,
	@VendorAddress1 varchar(100) = null,
	@VendorAddress2 varchar(100) = null,
	@VendorAddress3 varchar(100) = null,
	@VendorAddress4 varchar(100) = null,
	@ManufactureName varchar(100) = null,
	@ManufactureAddress1 varchar(100) = null,
	@ManufactureAddress2 varchar(100) = null,
	@UserID int,
	@Batch_Action varchar(50) = null,
	@Batch_Notes varchar(max) = null,
	@RMS_Sellable varchar(1) = null,
	@RMS_Orderable varchar(1) = 'Y',
	@RMS_Inventory varchar(1) = 'Y',
	@Parent_ID bigint = 0,
	@sequence bigint = 0,
	@RegularBatchItem bit = 0,
	@Displayer_Cost decimal(18,6) = null,
	@Product_Cost decimal(18,6) = null,
	@Store_Total int = null,
	@POG_Start_Date datetime = null,
	@POG_Comp_Date datetime = null,
	@Calculate_Options int = 0,
	@Like_Item_SKU varchar(20) = null,
	@Like_Item_Description varchar(255) = null,
	@Like_Item_Retail money = null,
	@Annual_Regular_Unit_Forecast decimal(18,6) = null,
	@Like_Item_Store_Count decimal(18,6) = null,
	@Like_Item_Regular_Unit decimal(18,6) = null,
	@Like_Item_Unit_Store_Month decimal(18,6) = null,
	@Annual_Reg_Retail_Sales decimal(18,6) = null,
	@Facings decimal(18,6) = null,
	@Min_Pres_Per_Facing decimal(18,6) = null,
	@Inner_Pack decimal(18,6) = null,
	@POG_Min_Qty decimal(18,3) = null,
	@Private_Brand_Label varchar(20) = null,
	@Discountable varchar(1) = null,
	@Qty_In_Pack int = null, 
	@Valid_Existing_SKU bit = null,
	@Item_Status varchar(10) = null,
	@SkipInvalidatingPackChildren bit = 0, 
	@QuoteReferenceNumber varchar(20) = null,
	@CustomsDescription varchar(255) = null, 
	@IsDirty bit = 1,
	@Stocking_Strategy_Code nvarchar(5) = Null,
	@eachheight decimal(18,6) = Null,
	@eachwidth decimal(18,6) = Null,
	@eachlength decimal(18,6) = Null,
	@eachweight decimal(18,6) = Null,
	@cubicfeeteach decimal(18,6) = Null,
	@CanadaHarmonizedCodeNumber varchar(10) = Null,
	--@SuppTariffPercent varchar(100) = null,
	@SuppTariffAmount varchar(100) = null,
	@MinimumOrderQuantity int = null, 
	--@Vendor_Number varchar(100) = null,
	@Inventory_Control varchar(100) = null,
	@Translation_Indicator varchar(100) = null,
	@Package_Language_Indicator_Spanish varchar(100) = null,
	@Package_Language_Indicator_English varchar(100) = null,
	@Package_Language_Indicator_French varchar(100) = null,
	@Description_Long  varchar(100) = null,	 
	 @Description_Short varchar(100) = null,
	 @USRetail  varchar(100) = null,
	 @CanadaRetail  varchar(100) = null,
	 @QuebecRetail  varchar(100) = null,
	 @Vendor_Name varchar(100) = null,
	-- @VendorName varchar(100) = null,
	 @BatchImportItemType smallint=2,	 
	  @create_user_id varchar(100)=null,
	  @item_type varchar(100)=null,
	  @AdditionalCostPerUnit varchar(100)=null,
	  @SuppTariffPercent varchar(100)=null,
	 -- @AdditionalCostPerUnit varchar(100)=null,
	  @AdditionalDuty_per varchar(100)=null,
	  --@AdditionalDutyAmount varchar(100)=null,
	  @Country_Of_Origin  varchar(100)=null,
	 @RecAgentCommissionPercent  varchar(100) = null,
	 @Michaels_SKU varchar(100)=null,
	 @group_type  varchar(100) = null,
        @Action_Desc varchar(50) = 'IMPORT Bulk Upload';

    -- Declare cursor to iterate through staging table records
    DECLARE c_store CURSOR LOCAL FAST_FORWARD FOR
         SELECT PackSku,
s.Vendor_Number,
PrimaryUPC,
SKUGroup,
dept,
class,
subclass,Season,Description,StockCategory, Item_Type,
ItemTypeAttribute,Inventory_Control,Stocking_Strategy,
s.FreightTerms,isnull(PackItemIndicator,'N') PackItemIndicator,substring(AutoReplenish,1,1) AutoReplenish ,VendorStyleNumber,HarmonizedCodeNumber,
CanadaHarmonizedCodeNumber,DetailInvoiceCustomsDesc,IndividualItemPackaging,
EachInsideMasterCaseBox,EachInsideInnerPack,Qty_In_Pack,MasterCartonDimensionsLength,
MasterCartonDimensionsWidth,MasterCartonDimensionsHeight,MasterCartonDimensionsWeight,
ShippingPoint,COUNTRY_CODE CountryOfOrigin,SUBSTRING(Translation_Indicator,1,1) Translation_Indicator,
SUBSTRING(Package_Language_Indicator_English,1,1) English,SUBSTRING(Package_Language_Indicator_French,1,1) CanadianFrench,
SUBSTRING(Package_Language_Indicator_Spanish,1,1) LatinAmericanSpanish,
Description_Long,substring(Description_Short,1,20) Description_Short,FumigationCertificate,PhytoTemporaryShipment,eachlength,eachwidth,
eachheight,eachweight,INNER_CARTON_LENGTH,INNER_CARTON_WIDTH,INNER_CARTON_HEIGHT,
INNER_CARTON_NET_WEIGHT_LBS,Product_Cost,DutyPercent,Displayer_Cost, AdditionalDutyAmount,
SuppTariffPercent,OceanFreightAmount,
USRetail,CanadaRetail,
QuebecRetail,case when isnull(Item_Type,'C') ='C' then 'N' else 'Y' end RMS_Sellable,vendor_name,
isnull(create_user_id,66222) create_user_id, Private_Brand_Label,Vendor ,MerchBurden Agent,
BurdenType AgentType,AgentCommissionPercent ,AgentCommissionAmount,COUNTRY_NAME,group_type
FROM  sp_spedy_imp_item_bulk_upld_stg s,spd_vendor v ,dbo.SPD_COUNTRY c
where s.Vendor_Number=v.Vendor_Number and process_ind='I' and c.COUNTRY_NAME=CountryOfOrigin;

delete from sp_spedy_imp_item_bulk_upld_stg where Vendor_Number is null;
 update sp_spedy_imp_item_bulk_upld_stg set process_ind='I' where process_ind='N';
    -- Open cursor
    OPEN c_store;

    -- Fetch the FIRST record to get data for the single batch/header creation
        FETCH NEXT FROM c_store  INTO @PackSku,
@Vendor_Number,
@PrimaryUPC,
@SKUGroup,
@Dept,
@Class,
@SubClass,@Season,@Description,@StockCategory,@Item_Type,
@ItemTypeAttribute,@Inventory_Control,@Stocking_Strategy_Code,
@FreightTerms,@PackItemIndicator,@AutoReplenish,@VendorStyleNumber,@HarmonizedCodeNumber,
@CanadaHarmonizedCodeNumber,@DetailInvoiceCustomsDesc,@IndividualItemPackaging,
@EachInsideMasterCaseBox,@EachInsideInnerPack,@Qty_In_Pack,@MasterCartonDimensionsLength,
@MasterCartonDimensionsWidth,@MasterCartonDimensionsHeight,@MasterCartonDimensionsWeight,
@ShippingPoint,@CountryOfOrigin,@Translation_Indicator,
@Package_Language_Indicator_English,@Package_Language_Indicator_French,@Package_Language_Indicator_Spanish,
@Description_Long,@Description_Short,@FumigationCertificate,@PhytoTemporaryShipment,@eachlength,@eachwidth,
@eachheight,@eachweight,@INNER_CARTON_LENGTH,@INNER_CARTON_WIDTH,@INNER_CARTON_HEIGHT,
@INNER_CARTON_NET_WEIGHT_LBS,@Product_Cost,@DutyPercent,@Displayer_Cost,@AdditionalDutyAmount,
@SuppTariffPercent,@OceanFreightAmount,@USRetail,@CanadaRetail,
@QuebecRetail,@RMS_Sellable,@VendorName,@create_user_id,@Private_Brand_Label,
@Vendor ,@Agent,@AgentType,@AgentCommissionPercent ,@AgentCommissionAmount,@CountryOfOriginName,@group_type;
--update spd_import_items set  parent_id=524397 where  batch_id=766717 and id=524398;
    -- Check if at least one record was fetched
    IF @@FETCH_STATUS = 0
    BEGIN
        -- ### Create SINGLE Batch, History, Duration, and Header Record Set ###
        -- This block runs only ONCE before the loop starts

        -- Set User ID from the first record, with fallback
        SET @create_user_id = TRY_CONVERT(int, @create_user_id);
        IF @create_user_id IS NULL OR @create_user_id = 0
        BEGIN
            SET @create_user_id = 66222; -- Use default if conversion fails or is 0
            PRINT 'Warning: Could not convert create_user_id or it was 0/NULL for the first record. Using default user ID ' + CAST(@create_user_id AS VARCHAR) + '.';
        END

               -- Wrap initial creation in its own transaction/error handling
        BEGIN TRY
            BEGIN TRANSACTION InitialCreation;

            -- 1. Insert SINGLE record into SPD_Batch
             INSERT INTO [dbo].[SPD_Batch](
				Vendor_Name,
				Vendor_Number,
				Batch_Type_ID,
				WorkFlow_Stage_ID,
				Fineline_Dept_ID,
				date_created,
				created_user,
				date_modified,
				modified_user
			) values (
				@VendorName,
				@Vendor_NUMBER,
				2,
				10,
				@DEPT,
				GETDATE(),
				@create_user_id,
				GETDATE(),
				@create_user_id
			)
            SET @Batch_ID = SCOPE_IDENTITY(); -- Capture the single Batch ID

            -- 2. Insert SINGLE record into SPD_Batch_History
            INSERT INTO [dbo].[SPD_Batch_History](
				spd_batch_id,
				workflow_stage_id,
				[action],
				modified_user,
				date_modified,
				notes
			) values (
				@Batch_ID,
				1,
				@Batch_Action,
				@create_user_id,
				GETDATE(),
				@create_user_id
			)
			

            -- 3. Insert SINGLE record into SPD_Batch_History_Stage_Durations
            INSERT INTO SPD_Batch_History_Stage_Durations(Batch_ID, Stage_ID, Start_Date, End_Date, Hours)
				VALUES(@Batch_ID, 1, getDate(), null, null)

            COMMIT TRANSACTION InitialCreation;

        END TRY
        BEGIN CATCH
            IF @@TRANCOUNT > 0
                ROLLBACK TRANSACTION InitialCreation;

            PRINT 'FATAL ERROR: Could not create initial batch/header records. Upload aborted.';
            PRINT 'Error Number: ' + CAST(ERROR_NUMBER() AS VARCHAR);
            PRINT 'Error Severity: ' + CAST(ERROR_SEVERITY() AS VARCHAR);
            PRINT 'Error State: ' + CAST(ERROR_STATE() AS VARCHAR);
            PRINT 'Error Procedure: ' + ISNULL(ERROR_PROCEDURE(), '-');
            PRINT 'Error Line: ' + CAST(ERROR_LINE() AS VARCHAR);
            PRINT 'Error Message: ' + ERROR_MESSAGE();

            -- Close cursor and exit if initial creation fails
            CLOSE c_store;
            DEALLOCATE c_store;
            RETURN; -- Stop processing
        END CATCH;

        -- ### Start Loop for Item Records ###
        -- The loop starts with the data from the first FETCH already in variables
        WHILE @@FETCH_STATUS = 0 AND @Batch_ID IS NOT NULL -- Ensure Header was created
        BEGIN
            -- Set User ID for the current item record (may differ from header creator)
            DECLARE @Item_Current_User_ID int = TRY_CONVERT(int, @create_user_id);
            IF @Item_Current_User_ID IS NULL OR @Item_Current_User_ID = 0
            BEGIN
                SET @Item_Current_User_ID = 66222; -- Fallback for item record user
            END
			if isnull(@PackItemIndicator,'C')!='C' 
			begin
				set @sequence=0
				set @RegularBatchItem=1
			end
			if isnull(@PackItemIndicator,'C')='C' or @PackItemIndicator like 'D%' or @PackItemIndicator like 'SB%'
			begin
				set @sequence=0
				set @RegularBatchItem=0			
			end
                       -- Process Item and Item Languages within a transaction
            BEGIN TRY
                BEGIN TRANSACTION ItemProcessing;

                -- 5. Insert into SPD_Items (using the single @Item_Header_ID)
                INSERT INTO [dbo].[SPD_Import_Items] (
			Batch_ID,
			DateSubmitted,
			Vendor,
			Agent,
			AgentType,
			Buyer,
			Fax,
			EnteredBy,
			SKUGroup,
			Email,
			EnteredDate,
			Dept,
			Class,
			SubClass,
			PrimaryUPC,
			MichaelsSKU,
			GenerateMichaelsUPC,
			AdditionalUPC1,
			AdditionalUPC2,
			AdditionalUPC3,
			AdditionalUPC4,
			AdditionalUPC5,
			AdditionalUPC6,
			AdditionalUPC7,
			AdditionalUPC8,
			PackSKU,
			PlanogramName,
			VendorNumber,
			VendorRank,
			ItemTask,
			Description,
			Days,
			VendorMinOrderAmount,
			VendorContactName,
			VendorContactPhone,
			VendorContactEmail,
			VendorContactFax,
			ManufactureContact,
			ManufacturePhone,
			ManufactureEmail,
			ManufactureFax,
			AgentContact,
			AgentPhone,
			AgentEmail,
			AgentFax,
			VendorStyleNumber,
			HarmonizedCodeNumber,
			DetailInvoiceCustomsDesc,
			ComponentMaterialBreakdown,
			ComponentConstructionMethod,
			IndividualItemPackaging,
			EachInsideMasterCaseBox,
			EachInsideInnerPack,
			--EachPieceNetWeightLbsPerOunce,
			ReshippableInnerCartonWeight,
			ReshippableInnerCartonLength,
			ReshippableInnerCartonWidth,
			ReshippableInnerCartonHeight,
			MasterCartonDimensionsLength,
			MasterCartonDimensionsWidth,
			MasterCartonDimensionsHeight,
			CubicFeetPerMasterCarton,
			WeightMasterCarton,
			CubicFeetPerInnerCarton,
			FOBShippingPoint,
			DutyPercent,
			DutyAmount,
			AdditionalDutyComment,
			AdditionalDutyAmount,
			OceanFreightAmount,
			OceanFreightComputedAmount,
			AgentCommissionPercent,
			AgentCommissionAmount,
			OtherImportCostsPercent,
			OtherImportCostsAmount,
			PackagingCostAmount,
			TotalImportBurden,
			WarehouseLandedCost,
			PurchaseOrderIssuedTo,
			ShippingPoint,
			CountryOfOrigin,
			CountryOfOriginName,
			VendorComments,
			StockCategory,
			FreightTerms,
			ItemType,
			PackItemIndicator,
			ItemTypeAttribute,
			AllowStoreOrder,
			InventoryControl,
			AutoReplenish,
			PrePriced,
			TaxUDA,
			PrePricedUDA,
			TaxValueUDA,
			HybridType,
			SourcingDC,
			LeadTime,
			ConversionDate,
			StoreSuppZoneGRP,
			WhseSuppZoneGRP,
			POGMaxQty,
			POGSetupPerStore,
			ProjSalesPerStorePerMonth,
			OutboundFreight,
			NinePercentWhseCharge,
			TotalStoreLandedCost,
			RDBase,
			RDCentral,
			RDTest,
			RDAlaska,			
			RDCanada,			
			RD0Thru9,
			RDCalifornia,
			RDVillageCraft,
			HazMatYes,
			HazMatNo,
			HazMatMFGCountry,
			HazMatMFGName,
			HazMatMFGFlammable,
			HazMatMFGCity,
			HazMatContainerType,
			HazMatMFGState,
			HazMatContainerSize,
			HazMatMFGPhone,
			HazMatMSDSUOM,
			CoinBattery,
			TSSA,
			CSA,
			UL,
			LicenceAgreement,
			FumigationCertificate,
			PhytoTemporaryShipment,
			KILNDriedCertificate,
			ChinaComInspecNumAndCCIBStickers,
			OriginalVisa,
			TextileDeclarationMidCode,
			QuotaChargeStatement,
			MSDS,
			TSCA,
			DropBallTestCert,
			ManMedicalDeviceListing,
			ManFDARegistration,
			CopyRightIndemnification,
			FishWildLifeCert,
			Proposition65LabelReq,
			CCCR,
			FormaldehydeCompliant,
			QuoteSheetStatus,
			Season,
			PaymentTerms,
			VendorName,
			VendorAddress1,
			VendorAddress2,
			VendorAddress3,
			VendorAddress4,
			ManufactureName,
			ManufactureAddress1,
			ManufactureAddress2,
			RMS_Sellable ,
			RMS_Orderable ,
			RMS_Inventory ,
			Parent_ID ,
			RegularBatchItem ,
			DateCreated,
			CreatedUserID,
			DateLastModified,
			UpdateUserID,
			Displayer_Cost,
			Product_Cost,
			Store_Total,
			POG_Start_Date,
			POG_Comp_Date,
			Calculate_Options,
			Like_Item_SKU,
			Like_Item_Description,
			Like_Item_Retail,
			Annual_Regular_Unit_Forecast,
			Like_Item_Store_Count,
			Like_Item_Regular_Unit,
			Like_Item_Unit_Store_Month,
			Annual_Reg_Retail_Sales,
			Facings,
			Min_Pres_Per_Facing,
			Inner_Pack,
			POG_Min_Qty,
			Retail9,
			Retail10,
			Retail11,
			Retail12,
			Retail13,
			RDQuebec,
			RDPuertoRico,
			Private_Brand_Label,
			Discountable,
			Qty_In_Pack,
			Valid_Existing_SKU,
			Item_Status, 
			QuoteReferenceNumber,
			Customs_Description,
			RecAgentCommissionPercent,
			Stocking_Strategy_Code,
			eachheight,
			eachwidth,
			eachlength,
			eachweight,
			cubicfeeteach,
			CanadaHarmonizedCodeNumber,
			SuppTariffPercent,
			SuppTariffAmount,
			--PMO200141 GTIN14 Enhancements changes Start
			InnerGTIN,
			CaseGTIN,
			GenerateMichaelsGTIN,
			--PMO200141 GTIN14 Enhancements changes End
			MinimumOrderQuantity,
			ProductIdentifiesAsCosmetic,
			Tax_Wizard,
			sequence
		) VALUES (
			@Batch_ID ,
			@DateSubmitted,
			@Vendor,
			@Agent,
			@AgentType,
			@Buyer,
			@Fax,
			@EnteredBy,
			@SKUGroup,
			@Email,
			@EnteredDate,
			@Dept,
			@Class,
			@SubClass,
			@PrimaryUPC,
			@MichaelsSKU,
			@GenerateMichaelsUPC,
			@AdditionalUPC1,
			@AdditionalUPC2,
			@AdditionalUPC3,
			@AdditionalUPC4,
			@AdditionalUPC5,
			@AdditionalUPC6,
			@AdditionalUPC7,
			@AdditionalUPC8,
			@PackSKU,
			@PlanogramName,
			@Vendor_Number,
			@VendorRank,
			@ItemTask,
			@Description,
			@Days,
			@VendorMinOrderAmount,
			@VendorContactName,
			@VendorContactPhone,
			@VendorContactEmail,
			@VendorContactFax,
			@ManufactureContact,
			@ManufacturePhone,
			@ManufactureEmail,
			@ManufactureFax,
			@AgentContact,
			@AgentPhone,
			@AgentEmail,
			@AgentFax,
			@VendorStyleNumber,
			@HarmonizedCodeNumber,
			@DetailInvoiceCustomsDesc,
			@ComponentMaterialBreakdown,
			@ComponentConstructionMethod,
			@IndividualItemPackaging,
			@EachInsideMasterCaseBox,
			@EachInsideInnerPack,
			--@EachPieceNetWeightLbsPerOunce,
			@INNER_CARTON_NET_WEIGHT_LBS,
			@INNER_CARTON_LENGTH,
			@INNER_CARTON_WIDTH,
			@INNER_CARTON_HEIGHT,
			@MasterCartonDimensionsLength,
			@MasterCartonDimensionsWidth,
			@MasterCartonDimensionsHeight,
			--@MasterCartonDimensionsWeight,
			@CubicFeetPerMasterCarton,
			@MasterCartonDimensionsWeight ,--WeightMasterCarton,
			@CubicFeetPerInnerCarton,
			@FOBShippingPoint,
			@DutyPercent,
			@DutyAmount,
			@AdditionalDutyComment,
			@AdditionalDutyAmount,
			@OceanFreightAmount,
			@OceanFreightComputedAmount,
			@AgentCommissionPercent,
			@AgentCommissionAmount,
			@OtherImportCostsPercent,
			@OtherImportCostsAmount,
			@PackagingCostAmount,
			@TotalImportBurden,
			@WarehouseLandedCost,
			@PurchaseOrderIssuedTo,
			@ShippingPoint,
			@CountryOfOrigin,
			@CountryOfOriginName, --CountryOfOriginName,
			@VendorComments,
			@StockCategory,
			@FreightTerms,
			@Item_Type,
			@PackItemIndicator,
			@ItemTypeAttribute,
			@AllowStoreOrder,
			@Inventory_Control,
			@AutoReplenish,
			@PrePriced,
			@TaxUDA,
			@PrePricedUDA,
			@TaxValueUDA,
			@HybridType,
			@SourcingDC,
			@LeadTime,
			@ConversionDate,
			@StoreSuppZoneGRP,
			@WhseSuppZoneGRP,
			@POGMaxQty,
			@POGSetupPerStore,
			@ProjSalesPerStorePerMonth,
			@OutboundFreight,
			@NinePercentWhseCharge,
			@TotalStoreLandedCost,
			@USRetail,
			@USRetail, --RDCentral,
			@USRetail, --RDTest,	
			@USRetail, --RDAlaska,			
			@CanadaRetail,			
			@USRetail, -- RD0Thru9,
			@USRetail, --RDCalifornia,
			@USRetail, --RDVillageCraft,
			@HazMatYes,
			@HazMatNo,
			@HazMatMFGCountry,
			@HazMatMFGName,
			@HazMatMFGFlammable,
			@HazMatMFGCity,
			@HazMatContainerType,
			@HazMatMFGState,
			@HazMatContainerSize,
			@HazMatMFGPhone,
			@HazMatMSDSUOM,
			@CoinBattery,
			@TSSA,
			@CSA,
			@UL,
			@LicenceAgreement,
			@FumigationCertificate,
			@PhytoTemporaryShipment,
			@KILNDriedCertificate,
			@ChinaComInspecNumAndCCIBStickers,
			@OriginalVisa,
			@TextileDeclarationMidCode,
			@QuotaChargeStatement,
			@MSDS,
			@TSCA,
			@DropBallTestCert,
			@ManMedicalDeviceListing,
			@ManFDARegistration,
			@CopyRightIndemnification,
			@FishWildLifeCert,
			@Proposition65LabelReq,
			@CCCR,
			@FormaldehydeCompliant,
			@QuoteSheetStatus,
			@Season,
			@PaymentTerms,
			@VendorName,
			@VendorAddress1,
			@VendorAddress2,
			@VendorAddress3,
			@VendorAddress4,
			@ManufactureName,
			@ManufactureAddress1,
			@ManufactureAddress2,
			@RMS_Sellable ,
			@RMS_Orderable ,
			@RMS_Inventory ,
			@Parent_ID ,
			@RegularBatchItem ,
			GETDATE(),
			@create_user_id,
			GETDATE(),
			@create_user_id ,
			@Displayer_Cost,
			@Product_Cost,
			@Store_Total,
			@POG_Start_Date,
			@POG_Comp_Date,
			@Calculate_Options,
			@Like_Item_SKU,
			@Like_Item_Description,
			@Like_Item_Retail,
			@Annual_Regular_Unit_Forecast,
			@Like_Item_Store_Count,
			@Like_Item_Regular_Unit,
			@Like_Item_Unit_Store_Month,
			@Annual_Reg_Retail_Sales,
			@Facings,
			@Min_Pres_Per_Facing,
			@Inner_Pack,
			@POG_Min_Qty,
			@USRetail ,--Retail9,
			@USRetail, --Retail10,
			@USRetail, --Retail11,
			@USRetail, --Retail12,
			@USRetail ,--Retail13,
			@QuebecRetail,
			@USRetail, --RDPuertoRico, 
			@Private_Brand_Label,
			@Discountable,
			@Qty_In_Pack,
			@Valid_Existing_SKU,
			@Item_Status, 
			@QuoteReferenceNumber,
			@CustomsDescription,
			@RecAgentCommissionPercent,
			@Stocking_Strategy_Code,
			@eachheight,
			@eachwidth,
			@eachlength,
			@eachweight,
			@cubicfeeteach,
			@CanadaHarmonizedCodeNumber,
			@SuppTariffPercent,
			@SuppTariffAmount,
			--PMO200141 GTIN14 Enhancements changes Start
			@InnerGTIN,
			@CaseGTIN,
			@GenerateMichaelsGTIN,
			--PMO200141 GTIN14 Enhancements changes End
			@MinimumOrderQuantity,
			@ProductIdentifiesAsCosmetic,
			@Tax_Wizard,
			@sequence
		)

                SELECT @item_Batch_ID = MAX(id) FROM [dbo].SPD_Import_Items ;
				 SELECT @sequence = MAX(@sequence)+1 FROM [dbo].SPD_Import_Items where id=@item_Batch_ID;
				 SELECT @parent_id = min(id) FROM [dbo].SPD_Import_Items where Batch_ID=@Batch_ID;

                -- 6. Insert into SPD_Item_Languages (Three records per item: EN, FR, ES)
               INSERT INTO [dbo].[SPD_Import_Item_Languages]
		values 
( @item_Batch_ID
           ,1 --[Language_Type_ID]
           , @Package_Language_Indicator_English  --[Package_Language_Indicator]
           ,GETDATE()
           ,@Translation_Indicator --[Translation_Indicator]
           ,@Description_Short  --[Description_Short]
           ,@Description_Long --[Description_Long]
           ,1 --[Is_Edited]
           ,@create_user_id-- [Created_User_ID]
           ,getdate()--[Date_Created]
           ,@create_user_id --[Modified_User_ID]
           ,getdate() --[Date_Last_Modified]
		   )
		   INSERT INTO [dbo].[SPD_Import_Item_Languages]
		values 
( @item_Batch_ID
           ,2 --[Language_Type_ID]
           , @Package_Language_Indicator_French  --[Package_Language_Indicator]
           ,GETDATE()
           ,@Translation_Indicator --[Translation_Indicator]
           ,null --@Description_Short  --[Description_Short]
           ,null-- @Description_Long --[Description_Long]
           ,1 --[Is_Edited]
           ,@create_user_id-- [Created_User_ID]
           ,getdate()--[Date_Created]
           ,@create_user_id --[Modified_User_ID]
           ,getdate() --[Date_Last_Modified]
		   )
		   INSERT INTO [dbo].[SPD_Import_Item_Languages]
		values 
( @item_Batch_ID
           ,3 --[Language_Type_ID]
           , @Package_Language_Indicator_Spanish  --[Package_Language_Indicator]
           ,GETDATE()
           ,@Translation_Indicator --[Translation_Indicator]
           ,null --@Description_Short  --[Description_Short]
           ,null --@Description_Long --[Description_Long]
           ,1 --[Is_Edited]
           ,@create_user_id-- [Created_User_ID]
           ,getdate()--[Date_Created]
           ,@create_user_id --[Modified_User_ID]
           ,getdate() --[Date_Last_Modified]
		   )
		  

                COMMIT TRANSACTION ItemProcessing;
            END TRY
            BEGIN CATCH
                IF @@TRANCOUNT > 0
                    ROLLBACK TRANSACTION ItemProcessing;

                -- Log the item-specific error
                PRINT 'Error occurred processing item for VendorNum: ' + CAST(ISNULL(@Vendor_Number,0) AS VARCHAR) + ', SKU: ' + ISNULL(@Michaels_SKU, 'N/A') + ', Style: ' + ISNULL(@VendorStyleNumber, 'N/A');
                PRINT 'Error Number: ' + CAST(ERROR_NUMBER() AS VARCHAR);
                PRINT 'Error Severity: ' + CAST(ERROR_SEVERITY() AS VARCHAR);
                PRINT 'Error State: ' + CAST(ERROR_STATE() AS VARCHAR);
                PRINT 'Error Procedure: ' + ISNULL(ERROR_PROCEDURE(), '-');
                PRINT 'Error Line: ' + CAST(ERROR_LINE() AS VARCHAR);
                PRINT 'Error Message: ' + ERROR_MESSAGE();
                -- Continue to the next record in the cursor
            END CATCH;

            -- Fetch the next record *inside* the loop for item processing
              FETCH NEXT FROM c_store  INTO @PackSku,
@Vendor_Number,
@PrimaryUPC,
@SKUGroup,
@Dept,
@Class,
@SubClass,@Season,@Description,@StockCategory,@Item_Type,
@ItemTypeAttribute,@Inventory_Control,@Stocking_Strategy_Code,
@FreightTerms,@PackItemIndicator,@AutoReplenish,@VendorStyleNumber,@HarmonizedCodeNumber,
@CanadaHarmonizedCodeNumber,@DetailInvoiceCustomsDesc,@IndividualItemPackaging,
@EachInsideMasterCaseBox,@EachInsideInnerPack,@Qty_In_Pack,@MasterCartonDimensionsLength,
@MasterCartonDimensionsWidth,@MasterCartonDimensionsHeight,@MasterCartonDimensionsWeight,
@ShippingPoint,@CountryOfOrigin,@Translation_Indicator,
@Package_Language_Indicator_English,@Package_Language_Indicator_French,@Package_Language_Indicator_Spanish,
@Description_Long,@Description_Short,@FumigationCertificate,@PhytoTemporaryShipment,@eachlength,@eachwidth,
@eachheight,@eachweight,@INNER_CARTON_LENGTH,@INNER_CARTON_WIDTH,@INNER_CARTON_HEIGHT,
@INNER_CARTON_NET_WEIGHT_LBS,@Product_Cost,@DutyPercent,@Displayer_Cost,@AdditionalDutyAmount,
@SuppTariffPercent,@OceanFreightAmount,@USRetail,@CanadaRetail,
@QuebecRetail,@RMS_Sellable,@VendorName,@create_user_id,@Private_Brand_Label,
@Vendor ,@Agent,@AgentType,@AgentCommissionPercent ,@AgentCommissionAmount,@CountryOfOriginName,@group_type;

        END -- End of WHILE loop

    END -- End of IF @@FETCH_STATUS = 0 (checking if staging table had records)
    ELSE
    BEGIN
        PRINT 'Staging table dbo.sp_spedy_imp_item_bulk_upld_stg is empty. No batch or header created.';
    END

    -- Close and deallocate cursor
    CLOSE c_store;
    DEALLOCATE c_store;
	  update sp_spedy_imp_item_bulk_upld_stg set process_ind='C',process_date=getdate() where process_ind='I';
 		SET @ID = SCOPE_IDENTITY()
    PRINT 'Completed IMPORT Bulk Upload Processing ' + CONVERT(VARCHAR, GETDATE(), 113);

END

GO

USE [MichaelsSPD]
GO
/****** Object:  StoredProcedure [dbo].[usp_SPD_ItemMaint_GetItemByIDOrSku]    Script Date: 6/22/2025 3:44:02 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
-- =============================================
-- Author:		Littlefield, Jeff
-- Create date: May 17, 2010
-- Description:	Return 4 RS for Item Maintenenace Detail

Change Log:

Test code:

exec [usp_SPD_ItemMaint_GetItemByIDOrSku] @itemID = 120	
exec [usp_SPD_ItemMaint_GetItemByIDOrSku] @itemID = -1, @VendorID = 34847, @sku = '10019025', @VendorNum = 34847

-- =============================================
*/
ALTER Proc [dbo].[usp_SPD_ItemMaint_GetItemByIDOrSku]
	@ItemID int
	, @VendorID bigint = 0
	, @SKU varchar(25) = ''
	, @VendorNum bigint = 0
AS

DECLARE @VendorNumber bigint, @MichaelsSKU varchar(20)

if @ItemID > 0 
begin
	SELECT 
		@MichaelsSKU = Michaels_SKU
		, @VendorNumber = Vendor_Number
	FROM SPD_Item_Maint_Items
	WHERE ID = @ItemID
end
Else
Begin
	set @MichaelsSKU = @SKU
	set @VendorNumber = @VendorNum
	if @VendorNumber = 0
	begin
		set @VendorNumber = (select top 1 vendor_number from spd_item_master_vendor where michaels_sku = @SKU order by Primary_Indicator desc)
	end
End

--Select @MichaelsSKU as fndSKU, @VendorNumber as FndVN

IF @VendorID > 0 and @VendorID <> @VendorNumber
BEGIN		-- Return empty record set
print ' bad vendor'
	SELECT *
	FROM vwItemMaintItemDetail
	WHERE ID = -1
END

ELSE

BEGIN
	if @ItemID > 0 
	BEGIN
		-- RS 1 Return ItemDetail
		SELECT *
		FROM vwItemMaintItemDetail
		WHERE ID = @ItemID
			and [Enabled] = 1	
	END
	ELSE	-- Use Special view to return SKU / Vendor info
	BEGIN
		-- RS 1 Return ItemDetail
		SELECT *
		FROM [vwItemMaintItemDetailBySKU]
		WHERE SKU = @MichaelsSKU 
			and VendorNumber = @VendorNumber			
	END

	-- RS 2 All additional UPCs for Record
	SELECT
		[UPC]
	FROM dbo.SPD_Item_Master_Vendor_UPCs  
	WHERE Michaels_SKU = @MichaelsSKU
		and [Vendor_Number] = @VendorNumber
		and Primary_Indicator <> 1
	
	-- RS 3: All Additional Countries of Origin
	SELECT 
		C.[Country_Of_Origin]
		, rtrim(coalesce(CO.COUNTRY_NAME,''))	as [Country_Of_Origin_Name]
	FROM  SPD_Item_Master_Vendor_Countries C
		Left Join [SPD_COUNTRY]	CO	ON CO.[COUNTRY_CODE] = C.Country_Of_Origin
	WHERE Michaels_SKU = @MichaelsSKU
		and [Vendor_Number] = @VendorNumber
		and Primary_Indicator <> 1

	-- RS 4: All Additional Country Cost Records
	SELECT
		[Michaels_SKU]
		, [Vendor_Number]
		, [Country_Of_Origin]
		, [Effective_Date]
		, [Future_Cost]
	FROM SPD_Item_Master_Vendor_Country_Cost
	WHERE Michaels_SKU = @MichaelsSKU
		and [Vendor_Number] = @VendorNumber
	Order By 
		[Country_Of_Origin]
		, [Effective_Date]
END

GO


USE [MichaelsSPD]
GO
/****** Object:  StoredProcedure [dbo].[usp_SPD_MQComm_UpdateItemMaster]    Script Date: 6/24/2025 3:17:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


ALTER PROCEDURE [dbo].[usp_SPD_MQComm_UpdateItemMaster] 
	@BatchID bigint
	, @LTS datetime = null
	, @debug int
AS
BEGIN

	IF  @LTS is NULL
		SET @LTS = getdate()
		
	Declare @BatchType int
		, @rows int
		, @msg varchar(1000)
		, @vcBatchID varchar(20)
		, @Error bit
		, @CurDate datetime
	
	Set @vcBatchID = convert(varchar(20),@BatchID)
	Set @Error = 0
	Set @CurDate = getdate()
	
	Select @BatchType = Batch_Type_ID
	From SPD_Batch 
	Where ID = @BatchID
	
	

	DECLARE @SCFH table
	(
		Michaels_SKU varchar(10),
		Metadata_Column_ID int,
		New_Value varchar(max)
	)

	DECLARE @PhytoCertID int = 0
	DECLARE @PhytoTempShipID int = 0


	BEGIN TRAN
	IF @BatchType = 1
	BEGIN
		-- ****************************************************************************
		-- From Domestic Update
		-- ****************************************************************************
	
		-- Update SKU Level Info
		Set @msg = 'Updating Item Master SKU from Domestic New Item. Batch: ' + @vcBatchID
		IF @Debug=1  Print @msg
		EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg

		Select @PhytoCertID = isNull(id,0) from spd_metadata_column mc 
		where MC.MetaData_table_id = 3 and MC.Column_Name = 'PhytoSanitaryCertificate'
		and isNull(MC.Track_History,0) = 1

		Select @PhytoTempShipID = isNull(id,0) from spd_metadata_column mc 
		where MC.MetaData_table_id = 3 and MC.Column_Name = 'PhytoTemporaryShipment'
		and isNull(MC.Track_History,0) = 1


		BEGIN TRY

			--insert history columns
			if @PhytoCertID > 0
			BEGIN
				Insert into @SCFH
				(Michaels_SKU, 
				Metadata_Column_ID, 
				New_Value)
				Select distinct
				SKU.Michaels_SKU, 
				@PhytoCertID, 
				DI.[PhytoSanitaryCertificate]
				FROM [SPD_Item_Master_SKU] SKU
					Join SPD_Items DI			on SKU.[Michaels_SKU] = DI.Michaels_SKU
					join SPD_Item_Headers DH	on DI.Item_Header_ID = DH.ID
					join SPD_Batch B			on DH.Batch_ID = B.ID
					join SPD_Workflow_Stage WS	on B.Workflow_Stage_ID = WS.ID
				WHERE 	B.ID = @BatchID
					and DI.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
					and WS.Stage_Type_id = 4	-- ONLY COMPLETED BATCHES PLEASE
			END

			--insert history columns
			if @PhytoTempShipID > 0
			BEGIN
				Insert into @SCFH
				(Michaels_SKU, 
				Metadata_Column_ID, 
				New_Value)
				Select distinct
				SKU.Michaels_SKU, 
				@PhytoTempShipID, 
				DI.[PhytoTemporaryShipment]
				FROM [SPD_Item_Master_SKU] SKU
					Join SPD_Items DI			on SKU.[Michaels_SKU] = DI.Michaels_SKU
					join SPD_Item_Headers DH	on DI.Item_Header_ID = DH.ID
					join SPD_Batch B			on DH.Batch_ID = B.ID
					join SPD_Workflow_Stage WS	on B.Workflow_Stage_ID = WS.ID
				WHERE 	B.ID = @BatchID
					and DI.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
					and WS.Stage_Type_id = 4	-- ONLY COMPLETED BATCHES PLEASE
			END


			Insert into  SPD_Change_Field_History
			(Michaels_SKU, Batch_ID, Metadata_Column_ID, Old_Value, New_Value)
			Select Distinct
			Michaels_SKU, @BatchID, Metadata_Column_ID, Null, New_Value
			from @SCFH SCFH
			where not exists
			(
				Select 1 from SPD_Change_Field_History SCFH2
				where SCFH2.Michaels_SKU = SCFH.Michaels_SKU
				and SCFH2.Batch_ID = @BatchID
				and SCFH2.Metadata_Column_ID = SCFH.Metadata_Column_ID
			) and New_Value is not null

			UPDATE [SPD_Item_Master_SKU]
				SET 
				Date_Last_Modified = @CurDate
				, Update_User_ID = 0
				, Buyer = DH.[Buyer_Approval] 
				,[RMS_Sellable] = DH.[RMS_Sellable]
				,[RMS_Orderable] = DH.[RMS_Orderable]
				,[RMS_Inventory] = DH.[RMS_Inventory]
				,[Store_Total] = DH.[Store_Total]
				,[Item_Type] = DI.[Pack_Item_Indicator]
				,[Customs_Description] = DI.[Customs_Description]
				, [Pack_Item_Indicator] = Case 
					WHEN dbo.udf_SPD_PackItemLeft2(DI.[Pack_Item_Indicator]) in ('D','DP','SB')
					THEN 'Y' 
					ELSE 'N' end
				,Updated_From_NewItem = 1	-- now just for informational purposes since an item can go through new item more than once
				,[Fumigation_Certificate] = DI.[PhytoSanitaryCertificate]
				,[PhytoTemporaryShipment] = DI.[PhytoTemporaryShipment]
			FROM [SPD_Item_Master_SKU] SKU
				Join SPD_Items DI			on SKU.[Michaels_SKU] = DI.Michaels_SKU
				join SPD_Item_Headers DH	on DI.Item_Header_ID = DH.ID
				join SPD_Batch B			on DH.Batch_ID = B.ID
				join SPD_Workflow_Stage WS	on B.Workflow_Stage_ID = WS.ID
			WHERE 	B.ID = @BatchID
				and DI.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and WS.Stage_Type_id = 4	-- ONLY COMPLETED BATCHES PLEASE

			set @rows = @@Rowcount
			set @msg = '    Records Updated: ' + convert(varchar(20),@rows)
			IF @Debug=1  Print @msg
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
		END TRY
		
		BEGIN CATCH
			set @msg = 'Updating Item Master SKU from Domestic... Error Occurred in Update' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			Rollback Tran
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			RETURN
		END CATCH
		
		-- Update UDA Level Data.  This should be an Insert as the data is not returned
		-- Update.  Since a New Item Batch can be done twice
		Set @msg = 'Updating Item Master UDA from Domestic New Item. Batch: ' + @vcBatchID
		IF @Debug=1  Print @msg
		EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg

		BEGIN TRY
			-- **********************************************************************************************
			-- First the Tax info: Update / Insert
			IF @Debug=1  Print 'Domestic Tax UDA'
			UPDATE SPD_Item_Master_UDA
				Set 
					UDA_ID = I.Tax_UDA
					, UDA_Value = I.Tax_Value_UDA
			FROM SPD_Items I
				Join SPD_Item_Master_UDA UDA		on I.Michaels_SKU = UDA.Michaels_SKU 
														and UDA.UDA_ID between 1 and 9 
				Join SPD_Item_Headers H				on I.Item_Header_ID = H.ID
				Join SPD_Batch B					on H.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
			WHERE B.ID = @BatchID
				and I.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE

			INSERT SPD_Item_Master_UDA ( Michaels_SKU, UDA_ID, UDA_Value )
			Select  
				I.Michaels_SKU
				, I.Tax_UDA
				, I.Tax_Value_UDA
			FROM SPD_Items I
				Join SPD_Item_Headers H				on I.Item_Header_ID = H.ID
				Join SPD_Batch B					on H.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Left Join SPD_Item_Master_UDA UDA	on I.Michaels_SKU = UDA.Michaels_SKU 
													and UDA.UDA_ID between 1 and 9 
			WHERE 	B.ID = @BatchID
				and I.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and UDA.UDA_ID is NULL

			-- **********************************************************************************************
			-- Now the PrePriced: Update, Insert, Delete
			IF @Debug=1  Print 'Domestic PrePriced UDA'
			UPDATE SPD_Item_Master_UDA
				Set UDA_Value = I.Pre_Priced_UDA
			FROM SPD_Items I
				Join SPD_Item_Headers H				on I.Item_Header_ID = H.ID
				Join SPD_Batch B					on H.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Join SPD_Item_Master_UDA UDA		on I.Michaels_SKU = UDA.Michaels_SKU 
														and UDA.UDA_ID = 10
			WHERE B.ID = @BatchID			
				and I.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and I.Pre_Priced ='Y'			-- UDA defined in Item
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
			
			INSERT SPD_Item_Master_UDA ( Michaels_SKU, UDA_ID, UDA_Value )
			Select  
				I.Michaels_SKU
				, 10
				, I.Pre_Priced_UDA
			FROM SPD_Items I
				Join SPD_Item_Headers H				on I.Item_Header_ID = H.ID
				Join SPD_Batch B					on H.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Left Join SPD_Item_Master_UDA UDA	on I.Michaels_SKU = UDA.Michaels_SKU 
														and UDA.UDA_ID = 10
			WHERE 	B.ID = @BatchID
				and I.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and I.Pre_Priced ='Y'			-- UDA defined in Item
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and UDA.UDA_ID is NULL			-- Does not exist in UDA Table
				
			DELETE UDA		-- Most likely this will never fire as New Items that are dups should be from Existing SKUs
			FROM SPD_Items I
				Join SPD_Item_Headers H				on I.Item_Header_ID = H.ID
				Join SPD_Batch B					on H.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Join SPD_Item_Master_UDA UDA		on I.Michaels_SKU = UDA.Michaels_SKU 
														and UDA.UDA_ID = 10
			WHERE B.ID = @BatchID			
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and I.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and I.Pre_Priced ='N'			-- UDA defined in Item as NO	
					
			-- **********************************************************************************************
			-- Now the Private Brand Label: Update and Insert
			IF @Debug=1  Print 'Domestic PBL UDA'
			UPDATE SPD_Item_Master_UDA
				Set 
					UDA_Value = coalesce(I.Private_Brand_Label,12)
			FROM SPD_Items I
				Join SPD_Item_Headers H				on I.Item_Header_ID = H.ID
				Join SPD_Batch B					on H.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Join SPD_Item_Master_UDA UDA		on I.Michaels_SKU = UDA.Michaels_SKU 
														and UDA.UDA_ID = 11
			WHERE B.ID = @BatchID
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and I.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
							
			INSERT SPD_Item_Master_UDA ( Michaels_SKU, UDA_ID, UDA_Value )
			Select  
				I.Michaels_SKU
				, 11
				, coalesce(I.Private_Brand_Label,12)
			FROM SPD_Items I
				Join SPD_Item_Headers H				on I.Item_Header_ID = H.ID
				Join SPD_Batch B					on H.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Left Join SPD_Item_Master_UDA UDA	on I.Michaels_SKU = UDA.Michaels_SKU 
														and UDA.UDA_ID = 11
			WHERE 	B.ID = @BatchID
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and I.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and UDA.UDA_ID is NULL			-- Does not exist in UDA Table
		END TRY
		
		BEGIN CATCH
			set @msg = 'Updating Item Master UDA from Domestic... Error Occurred in Insert' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			Rollback Tran
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			RETURN
		END CATCH
		
		-- **********************************************************************************************
		-- Update Vendor Level Info - Use temp table to hold all the skus assoc with the batch
		BEGIN TRY
			set @msg = 'Updating Item Master VENDOR from Domestic New Item. Batch ID: ' + @vcBatchID
			IF @Debug=1  Print @msg
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg

			SELECT
				DI.ID													as Item_ID
				, DI.Item_Header_ID										as Item_Header_ID	  
				, DI.[Michaels_SKU]										as Michaels_SKU
				, coalesce(DH.US_Vendor_Num, DH.Canadian_Vendor_Num,0)	as Vendor_Number
			INTO #DI_SKURecs
			FROM SPD_Items DI
				join SPD_Item_Headers DH	on DI.Item_Header_ID = DH.ID
				join SPD_Batch B			on DH.Batch_ID = B.ID
				join SPD_Workflow_Stage WS	on B.Workflow_Stage_ID = WS.ID
			WHERE B.ID = @BatchID
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and DI.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master

			--SB items will have missing vendor info, insert it
			INSERT SPD_Item_Master_Vendor (
			  [Michaels_SKU]
			  , [Vendor_Number]
			  , [Primary_Indicator]
			  , [Vendor_Style_Num]
			  , [Vendor_Or_Agent]
			  , [Agent_Type]
			  , [Other_Import_Costs_Percent]
			  , [SKU_ID]
			  , [Created_User_ID]
			  , [Date_Created]			  				
			)
			select DI.Michaels_SKU
				, coalesce(DH.US_Vendor_Num, DH.Canadian_Vendor_Num,0)
				, 1
				, DI.Vendor_Style_Num
				, CASE	WHEN NullIf(A.Agent,'') is NULL	THEN 'V'
						ELSE 'A' END
				, NullIf(A.Agent,'')
				, 0.00
				, ( Select ID From SPD_Item_Master_SKU Where Michaels_SKU = DI.Michaels_SKU )
				, 0
				, getdate()
				from spd_items  DI
				join SPD_Item_Headers DH	on DI.Item_Header_ID = DH.ID
				join SPD_Batch B			on DH.Batch_ID = B.ID
				join SPD_Workflow_Stage WS	on B.Workflow_Stage_ID = WS.ID
				Left Join SPD_Item_Master_Vendor_Agent A ON coalesce(DH.US_Vendor_Num, DH.Canadian_Vendor_Num,0) = A.Vendor_Number
				left join spd_item_master_vendor imv on imv.vendor_number = coalesce(DH.US_Vendor_Num, DH.Canadian_Vendor_Num,0) and imv.michaels_sku = DI.michaels_sku
			WHERE B.ID = @BatchID
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and DI.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and DI.Pack_Item_Indicator = 'SB' 
				and imv.vendor_number is null

			--SB items will also have missing UPCs
			INSERT SPD_Item_Master_Vendor_UPCs (
				[Michaels_SKU]
			  ,[Vendor_Number]
			  ,[UPC]
			  ,[Primary_Indicator]
			  ,[Created_User_ID]
			  ,[Date_Created]
			  ,Is_Active
			   )
			SELECT 
				DI.Michaels_SKU
			  , coalesce(DH.US_Vendor_Num, DH.Canadian_Vendor_Num,0)
			  , dbo.udf_PadUPC(DI.Vendor_UPC,14)
			  , 1
			  , 0
			  , getdate()
			  , 1
				from spd_items  DI
				join SPD_Item_Headers DH	on DI.Item_Header_ID = DH.ID
				join SPD_Batch B			on DH.Batch_ID = B.ID
				join SPD_Workflow_Stage WS	on B.Workflow_Stage_ID = WS.ID
				left join SPD_Item_Master_Vendor_UPCs imupc ON DI.Michaels_SKU = imupc.Michaels_SKU and imupc.UPC = dbo.udf_PadUPC(DI.Vendor_UPC,14) 
											and coalesce(DH.US_Vendor_Num, DH.Canadian_Vendor_Num,0) = imupc.vendor_number
			WHERE B.ID = @BatchID
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and DI.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and DI.Pack_Item_Indicator = 'SB' 
				and imupc.vendor_number is null
				
				UPDATE SPD_Item_Master_Vendor
				SET
				Date_Last_Modified = @CurDate
				, Update_User_ID = 0
				,[Harmonized_CodeNumber] = DI.[Harmonized_Code_Number]
				,[Canada_Harmonized_CodeNumber] = DI.[Canada_Harmonized_Code_Number]
				,[Detail_Invoice_Customs_Desc0] = DI.[Detail_Invoice_Customs_Desc]
				,[Component_Material_Breakdown0] = DI.[Component_Material_Breakdown]
				,[Hazardous_Manufacturer_Name] = DI.[Hazardous_Manufacturer_Name]
				,[Hazardous_Manufacturer_City] = DI.[Hazardous_Manufacturer_City]
				,[Hazardous_Manufacturer_State] = DI.[Hazardous_Manufacturer_State]
				,[Hazardous_Manufacturer_Phone] = DI.[Hazardous_Manufacturer_Phone]
				,[Hazardous_Manufacturer_Country] = DI.[Hazardous_Manufacturer_Country]
				, Image_ID = (	Select [File_ID] 
								From [SPD_Items_Files]
								Where item_id = DI.ID and [Item_Type] in( 'D') and [File_Type] = 'IMG' )
				, MSDS_ID = (	Select [File_ID] 
								From [SPD_Items_Files]
								Where item_id = DI.ID and [Item_Type] in( 'D')  and [File_Type] = 'MSDS' )
				, Updated_From_NewItem = 1
			FROM SPD_Item_Master_Vendor V
				Join #DI_SKURecs LU			on  V.Michaels_SKU = LU.Michaels_SKU 
												and V.Vendor_Number = LU.Vendor_Number
				Join SPD_Items DI			on LU.Item_ID = DI.ID

			set @rows = @@Rowcount
			set @msg = '    Records Updated: ' + convert(varchar(20),@rows)
			IF @Debug=1  Print @msg
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
		END TRY
		
		BEGIN CATCH
			set @msg = 'Updating Item Master Vendor from Domestic... Error Occurred in Update' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			Rollback Tran
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			RETURN	
		END CATCH
		
		-- Update Vendor Country Level Info
		BEGIN TRY
			set @msg = 'Updating Item Master Vendor Countries from Domestic New Item. Batch ID: ' + @vcBatchID
			IF @Debug=1  Print @msg
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg

			UPDATE SPD_Item_Master_Vendor_Countries
			SET
				Date_Last_Modified = @CurDate
				, Update_User_ID = 0
				, [Each_Case_Height] = DI.[Each_Case_Height]
				, [Each_Case_Width] = DI.[Each_Case_Width]
				, [Each_Case_Length] = DI.[Each_Case_Length]
				, [Each_Case_Weight] = DI.[Each_Case_Weight]
				, [Each_LWH_UOM] = 'IN'
				, [Each_Weight_UOM] = 'LB'
				, [Inner_Case_Height] = DI.[inner_case_height]
				, [Inner_Case_Width] = DI.[inner_case_width]
				, [Inner_Case_Length] = DI.[inner_case_length]
				, [Inner_Case_Weight] = DI.[inner_case_weight]
				, [Inner_LWH_UOM] = 'IN'
				, [Inner_Weight_UOM] = 'LB'
				, [Master_Case_Height] = DI.[master_case_height]
				, [Master_Case_Width] = DI.[master_case_width]
				, [Master_Case_Length] = DI.[master_case_length]
				, [Master_Case_Weight] = DI.[master_case_weight]
				, [Master_LWH_UOM] = 'IN'
				, [Master_Weight_UOM] = 'LB'
				, Updated_From_NewItem = 1
			FROM SPD_Item_Master_Vendor_Countries VC
				Join #DI_SKURecs LU			on  VC.Michaels_SKU = LU.Michaels_SKU 
												and VC.Vendor_Number = LU.Vendor_Number
				Join SPD_Items DI			on LU.Item_ID = DI.ID
												and VC.Country_Of_Origin = DI.[country_of_origin]
		END TRY

		BEGIN CATCH
			set @msg = 'Updating Item Master Vendor Countries from Domestic... Error Occurred in Update' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			Rollback Tran
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			RETURN	
		END CATCH
		
		Drop table #DI_SKURecs
		
		-- **********************************************************************************************
		-- Update Multilingual Info pt 1
		BEGIN TRY
			set @msg = 'Updating Item Master Languages from Domestic Item Languages Table. Batch ID: ' + @vcBatchID
			IF @Debug=1  Print @msg
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg

			-- FIRST, Update the Langauge table, in case the languages already exist.
			-- This should never be the case, but adding the code here in case we need to support it later.
			UPDATE SPD_Item_Master_Languages
			SET Translation_Indicator = SIL.Translation_Indicator,
				Description_Short = SIL.Description_Short,
				Description_Long = SIL.Description_Long,
				Modified_User_ID = 0,
				Date_Requested = getDate(),
				Date_Last_Modified = getDate()
			FROM SPD_Item_Master_Languages as SIML
			INNER JOIN SPD_Items as DI on SIML.Michaels_SKU = DI.Michaels_SKU
			INNER JOIN SPD_Item_Headers DH	on DI.Item_Header_ID = DH.ID
			INNER JOIN SPD_Item_Languages SIL on DI.ID = SIL.Item_ID and SIML.Language_Type_ID = SIL.Language_Type_ID
			WHERE DH.Batch_ID = @BatchID

			-- INSERT new records into the Langauge table
			INSERT INTO SPD_Item_Master_Languages (Michaels_SKU, Language_Type_ID, Translation_Indicator, Description_Short, Description_Long, Date_Requested, Created_User_ID, Date_Created, Modified_User_ID, Date_Last_Modified)
			Select DI.Michaels_SKU, SIL.Language_Type_ID, SIL.Translation_Indicator, SIL.Description_Short, SIL.Description_Long, GetDate(), 0, GetDate(), 0, GetDate()
			FROM SPD_Items as DI
			INNER JOIN SPD_Item_Headers as DH on DI.Item_Header_ID = DH.ID
			INNER JOIN SPD_Item_Languages as SIL on DI.ID = SIL.Item_ID
			LEFT JOIN SPD_Item_Master_Languages as SIML on SIML.Michaels_SKU = DI.Michaels_SKU AND SIML.Language_Type_ID = SIL.Language_Type_ID
			WHERE SIML.ID is null AND DH.Batch_ID = @BatchID
			
		END TRY
		
		BEGIN CATCH
			set @msg = 'Updating Item Master Languages from Domestic Item Languages Table pt 1... Error Occurred in Update' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			Rollback Tran
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			RETURN	
		END CATCH
		
		-- **********************************************************************************************
		-- Update Multilingual Info pt 2
		BEGIN TRY
			set @msg = 'Updating Item Master Languages from Domestic Item Languages Table pt 2. Batch ID: ' + @vcBatchID
			IF @Debug=1  Print @msg
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg

			-- FIRST, Update the Langauge table, in case the languages already exist.
			-- This should never be the case, but adding the code here in case we need to support it later.
			UPDATE SPD_Item_Master_Languages_Supplier
			SET Package_Language_Indicator = SIL.Package_Language_Indicator,
				Modified_User_ID = 0,
				Date_Last_Modified = getDate()
			FROM SPD_Item_Master_Languages_Supplier as SIML
			INNER JOIN SPD_Items as DI on SIML.Michaels_SKU = DI.Michaels_SKU
			INNER JOIN SPD_Item_Headers DH	on DI.Item_Header_ID = DH.ID
			INNER JOIN SPD_Item_Languages SIL on DI.ID = SIL.Item_ID and SIML.Language_Type_ID = SIL.Language_Type_ID AND SIML.Vendor_Number = coalesce(DH.US_Vendor_Num, DH.Canadian_Vendor_Num,0)
			WHERE DH.Batch_ID = @BatchID

			-- INSERT new records into the Langauge table
			INSERT INTO SPD_Item_Master_Languages_Supplier (Michaels_SKU, Vendor_Number, Language_Type_ID, Package_Language_Indicator, Created_User_ID, Date_Created, Modified_User_ID, Date_Last_Modified)
			Select DI.Michaels_SKU, coalesce(DH.US_Vendor_Num, DH.Canadian_Vendor_Num,0), SIL.Language_Type_ID, SIL.Package_Language_Indicator, 0, GetDate(), 0, GetDate()
			FROM SPD_Items as DI
			INNER JOIN SPD_Item_Headers as DH on DI.Item_Header_ID = DH.ID
			INNER JOIN SPD_Item_Languages as SIL on DI.ID = SIL.Item_ID
			LEFT JOIN SPD_Item_Master_Languages_Supplier as SIML on SIML.Michaels_SKU = DI.Michaels_SKU AND SIML.Vendor_Number = coalesce(DH.US_Vendor_Num, DH.Canadian_Vendor_Num,0) AND SIML.Language_Type_ID = SIL.Language_Type_ID
			WHERE SIML.ID is null AND DH.Batch_ID = @BatchID
			
		END TRY
		
		BEGIN CATCH
			set @msg = 'Updating Item Master Languages from Domestic Item Languages Table pt 2... Error Occurred in Update' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			Rollback Tran
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			RETURN	
		END CATCH

		--MWM:LCR
		---- Update SPD_Item_Translation_Required
		--Set @msg = 'Adding items to SPD_Item_Translation_Required from Domestic New Item. Batch: ' + @vcBatchID
		--IF @Debug=1  Print @msg
		--EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
		--BEGIN TRY
		--	Insert into SPD_Item_Translation_Required
		--	(Michaels_SKU)
		--	Select distinct sku.Michaels_SKU
		--	FROM [SPD_Item_Master_SKU] SKU
		--		Join SPD_Items DI			on SKU.[Michaels_SKU] = DI.Michaels_SKU
		--		join SPD_Item_Headers DH	on DI.Item_Header_ID = DH.ID
		--		join SPD_Batch B			on DH.Batch_ID = B.ID
		--		join SPD_Workflow_Stage WS	on B.Workflow_Stage_ID = WS.ID
		--	WHERE 	B.ID = @BatchID
		--		and DI.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
		--		and WS.Stage_Type_id = 4	-- ONLY COMPLETED BATCHES PLEASE
		--		and ltrim(rtrim(SKU.SKU_Group)) In ('US AND CANADA','CANADA ONLY')
		--		and sku.POG_Start_Date is not null
		--		and not exists
		--		(
		--			Select 1 from SPD_Item_Translation_Required R where R.Michaels_SKU = sku.Michaels_SKU
		--		)

		--	set @rows = @@Rowcount
		--	set @msg = '    Records Inserted: ' + convert(varchar(20),@rows)
		--	IF @Debug=1  Print @msg
		--	EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
		--END TRY
		
		--BEGIN CATCH
		--	set @msg = 'Adding items to SPD_Item_Translation_Required SKU from Domestic... Error Occurred in Insert' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
		--	Rollback Tran
		--	EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
		--	EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
		--	RETURN
		--END CATCH

	END
	
	ELSE
	
	BEGIN
		-- ****************************************************************************
		-- From Import Update
		-- ****************************************************************************
		-- Update SKU Level Info
		Set @msg = 'Updating Item Master SKU from Import New Item. Batch: ' + @vcBatchID
		IF @Debug=1  Print @msg
		EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg

		Select @PhytoCertID = isNull(id,0) from spd_metadata_column mc 
		where MC.MetaData_table_id = 1 and MC.Column_Name = 'FumigationCertificate'
		and isNull(MC.Track_History,0) = 1

		Select @PhytoTempShipID = isNull(id,0) from spd_metadata_column mc 
		where MC.MetaData_table_id = 1 and MC.Column_Name = 'PhytoTemporaryShipment'
		and isNull(MC.Track_History,0) = 1



		BEGIN TRY


					--insert history columns
			if @PhytoCertID > 0
			BEGIN
				Insert into @SCFH
				(Michaels_SKU, 
				Metadata_Column_ID, 
				New_Value)
				Select distinct
				SKU.Michaels_SKU, 
				@PhytoCertID, 
				II.[FumigationCertificate]
				FROM [SPD_Item_Master_SKU] SKU
					Join SPD_Import_Items II	on SKU.[Michaels_SKU] = II.MichaelsSKU
					join SPD_Batch B			on II.Batch_ID = B.ID
					join SPD_Workflow_Stage WS	on B.Workflow_Stage_ID = WS.ID
				WHERE B.ID = @BatchID
					and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
					and II.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
			END

			--insert history columns
			if @PhytoTempShipID > 0
			BEGIN
				Insert into @SCFH
				(Michaels_SKU, 
				Metadata_Column_ID, 
				New_Value)
				Select distinct
				SKU.Michaels_SKU, 
				@PhytoTempShipID, 
				II.[PhytoTemporaryShipment]
				FROM [SPD_Item_Master_SKU] SKU
					Join SPD_Import_Items II	on SKU.[Michaels_SKU] = II.MichaelsSKU
					join SPD_Batch B			on II.Batch_ID = B.ID
					join SPD_Workflow_Stage WS	on B.Workflow_Stage_ID = WS.ID
				WHERE B.ID = @BatchID
					and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
					and II.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
			END


			Insert into  SPD_Change_Field_History
			(Michaels_SKU, Batch_ID, Metadata_Column_ID, Old_Value, New_Value)
			Select Distinct
			Michaels_SKU, @BatchID, Metadata_Column_ID, Null, New_Value
			from @SCFH SCFH
			where not exists
			(
				Select 1 from SPD_Change_Field_History SCFH2
				where SCFH2.Michaels_SKU = SCFH.Michaels_SKU
				and SCFH2.Batch_ID = @BatchID
				and SCFH2.Metadata_Column_ID = SCFH.Metadata_Column_ID
			)
			and New_Value is not null

			UPDATE [SPD_Item_Master_SKU]
				SET 
				Date_Last_Modified = @CurDate
				, Update_User_ID = 0
				, Planogram_Name = II.PlanogramName
				,[Buyer] = II.[Buyer]
				,[Buyer_Fax] = II.[Fax]
				,[Buyer_Email] = II.[Email]
				,[Season] = II.[Season]
				,CoinBattery = II.CoinBattery
				,[TSSA] = II.TSSA
				,[CSA] = II.CSA
				,[UL] = II.UL
				,[Licence_Agreement] = II.[LicenceAgreement]
				,[Fumigation_Certificate] = II.[FumigationCertificate]
				,[PhytoTemporaryShipment] = II.[PhytoTemporaryShipment]
				,[KILN_Dried_Certificate] = II.[KILNDriedCertificate]
				,[China_Com_Inspec_Num_And_CCIB_Stickers] = II.[ChinaComInspecNumAndCCIBStickers]
				,[Original_Visa] = II.[OriginalVisa]
				,[Textile_Declaration_Mid_Code] = II.[TextileDeclarationMidCode]
				,[Quota_Charge_Statement] = II.[QuotaChargeStatement]
				,[MSDS] = II.[MSDS]
				,[TSCA] = II.[TSCA]
				,[Drop_Bal_lTest_Cert] = II.[DropBallTestCert]
				,[Man_Medical_Device_Listing] = II.[ManMedicalDeviceListing]
				,[Man_FDA_Registration] = II.[ManFDARegistration]
				,[Copy_Right_Indemnification] = II.[CopyRightIndemnification]
				,[Fish_Wild_Life_Cert] = II.[FishWildLifeCert]
				,[Proposition_65_Label_Req] = II.[Proposition65LabelReq]
				,[CCCR] = II.[CCCR]
				,[Formaldehyde_Compliant] = II.[FormaldehydeCompliant]
				,[RMS_Sellable] = II.[RMS_Sellable]
				,[RMS_Orderable] = II.[RMS_Orderable]
				,[RMS_Inventory] = II.[RMS_Inventory]
				,[Store_Total] = II.[Store_Total]
				,[Displayer_Cost] = II.[Displayer_Cost]
				,Product_Cost = II.Product_Cost
				,[Item_Type] = II.[PackItemIndicator]
				,[Pack_Item_Indicator] = Case WHEN dbo.udf_SPD_PackItemLeft2(II.[PackItemIndicator]) in ('D','DP','SB')
												THEN 'Y' ELSE 'N' end
				,QuoteReferenceNumber = II.QuoteReferenceNumber
				,Customs_Description = II.Customs_Description
				, Updated_From_NewItem = 1
			FROM [SPD_Item_Master_SKU] SKU
				Join SPD_Import_Items II	on SKU.[Michaels_SKU] = II.MichaelsSKU
				join SPD_Batch B			on II.Batch_ID = B.ID
				join SPD_Workflow_Stage WS	on B.Workflow_Stage_ID = WS.ID
			WHERE B.ID = @BatchID
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and II.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master

			set @rows = @@Rowcount
			set @msg = '    Records Updated: ' + convert(varchar(20),@rows)
			IF @Debug=1  Print @msg
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
		END TRY

		BEGIN CATCH
			set @msg = 'Updating Item Master SKU from Import... Error Occurred in Update' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			Rollback Tran
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			RETURN	
		END CATCH

		-- Update UDA Level Data.  This should be an Insert as the data is not returned
		Set @msg = 'Updating Item Master UDA from Import New Item. Batch: ' + @vcBatchID
		IF @Debug=1  Print @msg
		EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
		BEGIN TRY
			-- ***************************************************************************
			-- First the Tax info: Update / Insert
			IF @Debug=1  Print 'Import Tax UDA'
			UPDATE SPD_Item_Master_UDA
				Set 
					UDA_ID = I.TaxUDA
					, UDA_Value = I.TaxValueUDA
			From SPD_Import_Items I
				Join SPD_Item_Master_UDA UDA		on I.MichaelsSKU = UDA.Michaels_SKU 
														and UDA.UDA_ID between 1 and 9 
				Join SPD_Batch B					on I.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
			WHERE B.ID = @BatchID
				and I.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE

			INSERT SPD_Item_Master_UDA ( Michaels_SKU, UDA_ID, UDA_Value )
			Select  
				I.MichaelsSKU
				, I.TaxUDA
				, I.TaxValueUDA
			From SPD_Import_Items I
				Join SPD_Batch B					on I.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Left Join SPD_Item_Master_UDA UDA	on I.MichaelsSKU = UDA.Michaels_SKU 
													and UDA.UDA_ID between 1 and 9 
			WHERE 	B.ID = @BatchID
				and I.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and UDA.UDA_ID is NULL

			-- ***************************************************************************
			-- Now the PrePriced: Update, Insert, Delete
			IF @Debug=1  Print 'Import PrePriced UDA'
			UPDATE SPD_Item_Master_UDA
				Set UDA_Value = I.PrePricedUDA
			FROM SPD_Import_Items I
				Join SPD_Batch B					on I.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Join SPD_Item_Master_UDA UDA		on I.MichaelsSKU = UDA.Michaels_SKU 
														and UDA.UDA_ID = 10
			WHERE B.ID = @BatchID			
				and I.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and I.PrePriced ='Y'			-- UDA defined in Item
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
																		
			INSERT SPD_Item_Master_UDA ( Michaels_SKU, UDA_ID, UDA_Value )
			Select  
				I.MichaelsSKU
				, 10
				, I.PrePricedUDA
			FROM SPD_Import_Items I
				Join SPD_Batch B					on I.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Left Join SPD_Item_Master_UDA UDA	on I.MichaelsSKU = UDA.Michaels_SKU 
														and UDA.UDA_ID = 10
			WHERE 	B.ID = @BatchID
				and I.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and I.PrePriced ='Y'			-- UDA defined in Item
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and UDA.UDA_ID is NULL			-- Does not exist in UDA Table

			DELETE UDA		-- Most likely this will never fire as New Items that are dups should be from Existing SKUs
			FROM SPD_Import_Items I
				Join SPD_Batch B					on I.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Join SPD_Item_Master_UDA UDA		on I.MichaelsSKU = UDA.Michaels_SKU 
														and UDA.UDA_ID = 10
			WHERE B.ID = @BatchID			
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and I.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and I.PrePriced ='N'			-- UDA defined in Item as NO	
							
			-- ***************************************************************************
			-- Now the Private Brand Label: Update and Insert
			IF @Debug=1  Print 'Import PBL UDA'
			UPDATE SPD_Item_Master_UDA
				Set 
					UDA_Value = coalesce(I.Private_Brand_Label,12)
			FROM SPD_Import_Items I
				Join SPD_Batch B					on I.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Join SPD_Item_Master_UDA UDA		on I.MichaelsSKU = UDA.Michaels_SKU 
														and UDA.UDA_ID = 11
			WHERE B.ID = @BatchID
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and I.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master

			INSERT SPD_Item_Master_UDA ( Michaels_SKU, UDA_ID, UDA_Value )
			Select  
				I.MichaelsSKU
				, 11
				, coalesce(I.Private_Brand_Label,12)
			From SPD_Import_Items I
				Join SPD_Batch B					on I.Batch_ID = B.ID
				join SPD_Workflow_Stage WS			on B.Workflow_Stage_ID = WS.ID
				Left Join SPD_Item_Master_UDA UDA	on I.MichaelsSKU = UDA.Michaels_SKU 
														and UDA.UDA_ID = 11
			WHERE 	B.ID = @BatchID
				and I.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and UDA.UDA_ID is NULL			-- Does not exist in UDA Table
		END TRY
		
		BEGIN CATCH
			set @msg = 'Updating Item Master UDA from Import... Error Occurred in Insert' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			Rollback Tran
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			RETURN
		END CATCH
		
		-- ***************************************************************************
		-- Update Vendor Level Info
		Set @msg = 'Updating Item Master Vendor from Import New Item. Batch: ' + @vcBatchID
		IF @Debug=1  Print @msg
		EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
		BEGIN TRY
			--SB items will have missing vendor info, insert it
			INSERT SPD_Item_Master_Vendor (
			  [Michaels_SKU]
			  , [Vendor_Number]
			  , [Primary_Indicator]
			  , [Vendor_Style_Num]
			  , [SKU_ID]
			  , [Created_User_ID]
			  , [Date_Created]			  				
			)
			select II.MichaelsSKU
				, II.VendorNumber
				, 1
				, II.VendorStyleNumber
				, ( Select ID From SPD_Item_Master_SKU Where Michaels_SKU = II.MichaelsSKU )
				, 0
				, getdate()
				from SPD_Import_Items II				
				join SPD_Batch B			on II.Batch_ID = B.ID
				join SPD_Workflow_Stage WS	on B.Workflow_Stage_ID = WS.ID
				left join spd_item_master_vendor imv on imv.vendor_number = II.VendorNumber and imv.michaels_sku = II.MichaelsSKU
			WHERE B.ID = @BatchID
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and II.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and II.PackItemIndicator = 'SB' 
				and imv.vendor_number is null

			--SB items will also have missing UPCs
			INSERT SPD_Item_Master_Vendor_UPCs (
				[Michaels_SKU]
			  ,[Vendor_Number]
			  ,[UPC]
			  ,[Primary_Indicator]
			  ,[Created_User_ID]
			  ,[Date_Created]
			  ,Is_Active
			   )
			SELECT 
				II.MichaelsSKU
			  , II.VendorNumber
			  , dbo.udf_PadUPC(II.PrimaryUPC,14)
			  , 1
			  , 0
			  , getdate()
			  , 1
				from SPD_Import_Items II				
				join SPD_Batch B			on II.Batch_ID = B.ID
				join SPD_Workflow_Stage WS	on B.Workflow_Stage_ID = WS.ID
				left join SPD_Item_Master_Vendor_UPCs imupc ON II.MichaelsSKU = imupc.Michaels_SKU and imupc.UPC = dbo.udf_PadUPC(II.PrimaryUPC,14) and II.VendorNumber = imupc.vendor_number
			WHERE B.ID = @BatchID
				and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
				and II.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
				and II.PackItemIndicator = 'SB' 
				and imupc.vendor_number is null

			UPDATE SPD_Item_Master_Vendor
				SET
				Date_Last_Modified = @CurDate
				, Update_User_ID = 0
				, Hazardous_Manufacturer_Name = II.HazMatMFGName
				, Hazardous_Manufacturer_City = II.HazMatMFGCity
				, Hazardous_Manufacturer_State = II.HazMatMFGState
				, Hazardous_Manufacturer_Phone = II.HazMatMFGPhone
				, Hazardous_Manufacturer_Country = II.HazMatMFGCountry
				, Image_ID = (	Select [File_ID] 
								From [SPD_Items_Files]
								Where item_id = II.ID and [Item_Type] = 'I' and [File_Type] = 'IMG' )
				, MSDS_ID = (	Select [File_ID] 
								From [SPD_Items_Files]
								Where item_id = II.ID and [Item_Type] = 'I' and [File_Type] = 'MSDS' )
				,[PaymentTerms] = II.[PaymentTerms]
				,[Days] = II.[Days]
				,[Vendor_Min_Order_Amount] = case when isNumeric(II.[VendorMinOrderAmount]) = 1 then II.[VendorMinOrderAmount] else NULL END
				,[Vendor_Name] = II.[VendorName]
				,[Vendor_Address1] = II.[VendorAddress1]
				,[Vendor_Address2] = II.[VendorAddress2]
				,[Vendor_Address3] = II.[VendorAddress3]
				,[Vendor_Address4] = II.[VendorAddress4]
				,[Vendor_Contact_Name] = II.[VendorContactName]
				,[Vendor_Contact_Phone] = II.[VendorContactPhone]
				,[Vendor_Contact_Email] = II.[VendorContactEmail]
				,[Vendor_Contact_Fax] = II.[VendorContactFax]
				,[Manufacture_Name] = II.[ManufactureName]
				,[Manufacture_Address1] = II.[ManufactureAddress1]
				,[Manufacture_Address2] = II.[ManufactureAddress2]
				,[Manufacture_Contact] = II.[ManufactureContact]
				,[Manufacture_Phone] = II.[ManufacturePhone]
				,[Manufacture_Email] = II.[ManufactureEmail]
				,[Manufacture_Fax] = II.[ManufactureFax]
				,[Agent_Contact] = II.[AgentContact]
				,[Agent_Phone] = II.[AgentPhone]
				,[Agent_Email] = II.[AgentEmail]
				,[Agent_Fax] = II.[AgentFax]
				,[Harmonized_CodeNumber] = II.[HarmonizedCodeNumber]
				,[Detail_Invoice_Customs_Desc] = II.[DetailInvoiceCustomsDesc]
				,[Component_Material_Breakdown] = II.[ComponentMaterialBreakdown]
				,[Component_Construction_Method] = II.[ComponentConstructionMethod]
				,[Individual_Item_Packaging] = II.[IndividualItemPackaging]
				,[FOB_Shipping_Point] =  case when isNumeric(II.[FOBShippingPoint]) = 1 then II.[FOBShippingPoint] else NULL END
				,[Duty_Percent] = case when isNumeric(II.[DutyPercent]) = 1 then II.[DutyPercent] else NULL END
				,[Duty_Amount] = case when isNumeric(II.[DutyAmount]) = 1 then II.[DutyAmount] else NULL END
				,[Supp_Tariff_Percent] = case when isNumeric(II.[SuppTariffPercent]) = 1 then II.[SuppTariffPercent] else NULL END
				,[Supp_Tariff_Amount] = case when isNumeric(II.[SuppTariffAmount]) = 1 then II.[SuppTariffAmount] else NULL END
				,[Additional_Duty_Comment] = II.[AdditionalDutyComment]
				,[Additional_Duty_Amount] = case when isNumeric(II.[AdditionalDutyAmount]) = 1 and II.[AdditionalDutyAmount] not like '-79228%' then II.[AdditionalDutyAmount] else NULL END
				,[Ocean_Freight_Amount] = case when isNumeric(II.[OceanFreightAmount]) = 1 then II.[OceanFreightAmount] else NULL END
				,[Ocean_Freight_Computed_Amount] = case when isNumeric(II.[OceanFreightComputedAmount]) = 1 then II.[OceanFreightComputedAmount] else NULL END
				,[Agent_Commission_Percent] = case when isNumeric(II.[AgentCommissionPercent]) = 1 then II.[AgentCommissionPercent] else NULL END
				,[Agent_Commission_Amount] = case when isNumeric(II.[AgentCommissionAmount]) = 1 then II.[AgentCommissionAmount] else NULL END
				,[Other_Import_Costs_Percent] = case when isNumeric(II.[OtherImportCostsPercent]) = 1 then II.[OtherImportCostsPercent] else NULL END
				,[Other_Import_Costs_Amount] = case when isNumeric(II.[OtherImportCostsAmount]) = 1 then II.[OtherImportCostsAmount] else NULL END
				,[Packaging_Cost_Amount] = case when isNumeric(II.[PackagingCostAmount]) = 1 then II.[PackagingCostAmount] else NULL END
				,[Warehouse_Landed_Cost] = case when isNumeric(II.[WarehouseLandedCost]) = 1 then II.[WarehouseLandedCost] else NULL END
				,[Purchase_Order_Issued_To] = II.[PurchaseOrderIssuedTo]
				,[Shipping_Point] = Upper(II.[ShippingPoint])
				,[Vendor_Comments] = II.[VendorComments]
				,[Freight_Terms] = II.[FreightTerms]
				,[Outbound_Freight] = case when isNumeric(II.[OutboundFreight]) = 1 then II.[OutboundFreight] else NULL END
				,[Nine_Percent_Whse_Charge] = case when isNumeric(II.[NinePercentWhseCharge]) = 1 then II.[NinePercentWhseCharge] else NULL END
				,[Total_Store_Landed_Cost] = case when isNumeric(II.[TotalStoreLandedCost]) = 1 then II.[TotalStoreLandedCost] else NULL END
				,Vendor_Or_Agent = Case when A.Vendor_Number is NULL then 'V' else 'A' end
				,Agent_Type = Case when A.Vendor_Number is NULL then NULL else A.Agent end			
				,Updated_From_NewItem = 1
				--,MinimumOrderQuantity = case when isNumeric(II.[MinimumOrderQuantity]) = 1 then II.[MinimumOrderQuantity] else NULL END
				,ProductIdentifiesAsCosmetic = II.[ProductIdentifiesAsCosmetic]
			FROM SPD_Item_Master_Vendor V
				Join SPD_Import_Items II	on V.[Michaels_SKU] = II.MichaelsSKU
											and V.Vendor_Number = II.VendorNumber
				join SPD_Batch B			on II.Batch_ID = B.ID
				join SPD_Workflow_Stage WS	on B.Workflow_Stage_ID = WS.ID
				left join SPD_Item_Master_Vendor_Agent A on V.Vendor_Number =  A.Vendor_Number
			WHERE B.ID = @BatchID
				and II.Valid_Existing_SKU = 0		-- Make sure that Item is new and not loaded initially from the Item Master
				and WS.Stage_Type_id = 4			-- ONLY COMPLETED BATCHES PLEASE

			set @rows = @@Rowcount
			IF @Debug=1  Print 'Records Updated'
			set @msg = '    Records Updated: ' + convert(varchar(20),@rows)
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
		END TRY
		BEGIN CATCH
			set @msg = 'Updating Item Master Vendor from Import... Error Occurred in Update' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			Rollback Tran
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			RETURN		
		END CATCH

		-- Update Vendor Country Level Info
		BEGIN TRY
			set @msg = 'Updating Item Master Vendor Countries from Import New Item. Batch ID: ' + @vcBatchID
			IF @Debug=1  Print @msg
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg

			UPDATE SPD_Item_Master_Vendor_Countries
			SET
				Date_Last_Modified = @CurDate
				, Update_User_ID = 0
				, [Each_Case_Height] = II.[eachheight]
				, [Each_Case_Width] = II.[eachwidth]
				, [Each_Case_Length] = II.[eachlength]
				, [Each_Case_Weight] = II.[eachweight]
				, [Each_LWH_UOM] = 'IN'
				, [Each_Weight_UOM] = 'LB'
				, [Each_Case_Cube] = II.[cubicfeeteach]
				, [Inner_Case_Height] = II.[reshippableinnercartonheight]
				, [Inner_Case_Width] = II.[reshippableinnercartonwidth]
				, [Inner_Case_Length] = II.[reshippableinnercartonlength]
				--, [Inner_Case_Weight] = II.[eachpiecenetweightlbsperounce]
				, [Inner_Case_Weight] = II.ReshippableInnerCartonWeight
				, [Inner_LWH_UOM] = 'IN'
				, [Inner_Weight_UOM] = 'LB'
				, [Master_Case_Height] = II.[mastercartondimensionsheight]
				, [Master_Case_Width] = II.[mastercartondimensionswidth]
				, [Master_Case_Length] = II.[mastercartondimensionslength]
				, [Master_Case_Weight] = II.[weightmastercarton]
				, [Master_LWH_UOM] = 'IN'
				, [Master_Weight_UOM] = 'LB'
				, Updated_From_NewItem = 1
			FROM SPD_Item_Master_Vendor_Countries VC
				Join SPD_Import_Items II	on VC.[Michaels_SKU] = II.MichaelsSKU
												and VC.Vendor_Number = II.VendorNumber
												and VC.Country_Of_Origin = II.[CountryOfOrigin]
				join SPD_Batch B			on II.Batch_ID = B.ID
				join SPD_Workflow_Stage WS	on B.Workflow_Stage_ID = WS.ID
			WHERE B.ID = @BatchID
				and II.Valid_Existing_SKU = 0		-- Make sure that Item is new and not loaded initially from the Item Master
				and WS.Stage_Type_id = 4			-- ONLY COMPLETED BATCHES PLEASE
		END TRY

		BEGIN CATCH
			set @msg = 'Updating Item Master Vendor Countries from Import... Error Occurred in Update' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			Rollback Tran
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			RETURN	
		END CATCH
		
		/* ******************************************************************************************************************* */
		-- Update Vendor Multiline info for above records where its the Updated_From_NewItem is at 1
		/* ******************************************************************************************************************* */
		BEGIN TRY
			declare @desc varchar(max), @SKU varchar(30), @VendorNo bigint, @break varchar(max), @method varchar(max)
			declare @r0 varchar(1000), @r1 varchar(1000), @r2 varchar(1000), @r3 varchar(1000), @r4 varchar(1000), @r5 varchar(1000)
			declare @t1 table  (ElementID int, Element varchar(max) )
			declare @c1 int, @c2 int, @c3 int
			select @c1= 0, @c2=0, @c3=0

			DECLARE row CURSOR FOR 
				SELECT 
					V.[Michaels_SKU]
					,V.[Vendor_Number]
					,V.[Detail_Invoice_Customs_Desc]
					,V.[Component_Material_Breakdown]
					,V.[Component_Construction_Method]
				FROM [dbo].[SPD_Item_Master_Vendor] V
					Join SPD_Import_Items II	on V.[Michaels_SKU] = II.MichaelsSKU
													and V.Vendor_Number = II.VendorNumber
													and II.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
					join SPD_Batch B			on II.Batch_ID = B.ID
					join SPD_Workflow_Stage WS	on B.Workflow_Stage_ID = WS.ID
				WHERE WS.Stage_Type_id = 4	-- ONLY COMPLETED BATCHES PLEASE
					and B.ID = @BatchID
					and (  [Detail_Invoice_Customs_Desc] is not null
						or [Component_Material_Breakdown] is not null
						or [Component_Construction_Method] is not null
						)
					and Updated_From_NewItem = 1	-- Been Update from New Item
					
			OPEN row
			FETCH NEXT FROM row INTO @SKU, @VendorNo, @desc, @break, @method;
			WHILE @@FETCH_STATUS = 0
			BEGIN
				UPDATE [SPD_Item_Master_Vendor]
					SET Updated_From_NewItem = 2	-- Flag that we have updated the multiline fields
				WHERE [Michaels_SKU] = @SKU and [Vendor_Number] = @VendorNo
					
				IF @desc is not NULL
				BEGIN 
					INSERT @t1
						Select ElementID, Element FROM SPLIT(@desc, '<MULTILINEDELIMITER>')
					
					-- Force the variables to be '' for each pass
					select @r0 = '',@r1 = '',@r2 = '',@r3 = '',@r4 = '',@r5 = ''
					Select @r0 = left(Element,1000) from @t1 where ElementID = 1
					Select @r1 = left(Element,1000) from @t1 where ElementID = 2
					Select @r2 = left(Element,1000) from @t1 where ElementID = 3
					Select @r3 = left(Element,1000) from @t1 where ElementID = 4
					Select @r4 = left(Element,1000) from @t1 where ElementID = 5
					Select @r5 = left(Element,1000) from @t1 where ElementID = 6

					DELETE FROM @t1

					Update [SPD_Item_Master_Vendor] 
						SET 
						  [Detail_Invoice_Customs_Desc0] = left(Coalesce(@r0,''), 1000)
						, [Detail_Invoice_Customs_Desc1] = left(Coalesce(@r1,''), 1000)
						, [Detail_Invoice_Customs_Desc2] = left(Coalesce(@r2,''), 1000)
						, [Detail_Invoice_Customs_Desc3] = left(Coalesce(@r3,''), 1000)
						, [Detail_Invoice_Customs_Desc4] = left(Coalesce(@r4,''), 1000)
						, [Detail_Invoice_Customs_Desc5] = left(Coalesce(@r5,''), 1000)
					--FROM [SPD_Item_Master_Vendor]
					WHERE [Michaels_SKU] = @SKU and [Vendor_Number] = @VendorNo
					SET @c1 = @c1 + 1	
				END
				
				IF @break is not NULL
				BEGIN

					INSERT @t1
						Select ElementID, Element FROM SPLIT(@break, '<MULTILINEDELIMITER>')

					select @r0 = '',@r1 = '',@r2 = '',@r3 = '',@r4 = '',@r5 = ''
					Select @r0 = left(Element,1000) from @t1 where ElementID = 1
					Select @r1 = left(Element,1000) from @t1 where ElementID = 2
					Select @r2 = left(Element,1000) from @t1 where ElementID = 3
					Select @r3 = left(Element,1000) from @t1 where ElementID = 4
					Select @r4 = left(Element,1000) from @t1 where ElementID = 5

					DELETE FROM @t1
					
					Update [SPD_Item_Master_Vendor] 
						SET 
  						  [Component_Material_Breakdown0] = left(coalesce(@r0,''), 1000)
						, [Component_Material_Breakdown1] = left(coalesce(@r1,''), 1000)
						, [Component_Material_Breakdown2] = left(coalesce(@r2,''), 1000)
						, [Component_Material_Breakdown3] = left(coalesce(@r3,''), 1000)
						, [Component_Material_Breakdown4] = left(coalesce(@r4,''), 1000)
					--FROM [SPD_Item_Master_Vendor]
					WHERE [Michaels_SKU] = @SKU and [Vendor_Number] = @VendorNo
					SET @c2 = @c2 + 1	
				END		

				IF @method is not NULL
				BEGIN
					Insert @t1
						Select ElementID, Element FROM SPLIT(@method, '<MULTILINEDELIMITER>')

					select @r0 = '',@r1 = '',@r2 = '',@r3 = '',@r4 = '',@r5 = ''
					Select @r0 = left(Element,1000) from @t1 where ElementID = 1
					Select @r1 = left(Element,1000) from @t1 where ElementID = 2
					Select @r2 = left(Element,1000) from @t1 where ElementID = 3
					Select @r3 = left(Element,1000) from @t1 where ElementID = 4
					delete from @t1
					
					Update [SPD_Item_Master_Vendor] 
						SET 
						  [Component_Construction_Method0] = left(coalesce(@r0,''), 1000)
						, [Component_Construction_Method1] = left(coalesce(@r1,''), 1000)
						, [Component_Construction_Method2] = left(coalesce(@r2,''), 1000)
						, [Component_Construction_Method3] = left(coalesce(@r3,''), 1000)
					--FROM [SPD_Item_Master_Vendor]
					WHERE [Michaels_SKU] = @SKU and [Vendor_Number] = @VendorNo
					SET @c3 = @c3 + 1	
				END	
				
				FETCH NEXT FROM row INTO @SKU, @VendorNo, @desc, @break, @method;
			END	
			CLOSE row;
			DEALLOCATE row;
			DELETE FROM @t1

			IF @Debug=1  Print 'MultiLines were Updated'
			set @msg = '   Total Count of Multiline Updates: ' + convert(varchar(20),(@c1 + @c2 + @c3))
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
		END TRY
		BEGIN CATCH
			set @msg = 'Updating Item Master Vendor MultiLines... Error Occurred in Update' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			IF @Debug=1  Print @msg
			Rollback Tran
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			CLOSE row;
			DEALLOCATE row;
			RETURN	
		END CATCH
		
		
		-- **********************************************************************************************
		-- Update Multilingual Info
		BEGIN TRY
			set @msg = 'Updating Item Master Languages from Import Item Languages Table pt 1. Batch ID: ' + @vcBatchID
			IF @Debug=1  Print @msg
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg

			-- FIRST, Update the Langauge table, in case the languages already exist.
			-- This should never be the case, but adding the code here in case we need to support it later.
			UPDATE SPD_Item_Master_Languages
			SET Translation_Indicator = SIIL.Translation_Indicator,
				Description_Short = SIIL.Description_Short,
				Description_Long = SIIL.Description_Long,
				Modified_User_ID = 0,
				Date_Requested = getDate(),
				Date_Last_Modified = getDate()
			FROM SPD_Item_Master_Languages as SIML
			INNER JOIN SPD_Import_Items as II on SIML.Michaels_SKU = II.MichaelsSKU
			INNER JOIN SPD_Import_Item_Languages SIIL on II.ID = SIIL.Import_Item_ID and SIML.Language_Type_ID = SIIL.Language_Type_ID
			WHERE II.Batch_ID = @BatchID

			-- INSERT new records into the Langauge table
			INSERT INTO SPD_Item_Master_Languages (Michaels_SKU, Language_Type_ID, Translation_Indicator, Description_Short, Description_Long, Date_Requested, Created_User_ID, Date_Created, Modified_User_ID, Date_Last_Modified)
			Select II.MichaelsSKU, SIIL.Language_Type_ID, SIIL.Translation_Indicator, SIIL.Description_Short, SIIL.Description_Long, GetDate(), 0, GetDate(), 0, GetDate()
			FROM SPD_Import_Items as II
			INNER JOIN SPD_Import_Item_Languages as SIIL on II.ID = SIIL.Import_Item_ID
			LEFT JOIN SPD_Item_Master_Languages as SIML on SIML.Michaels_SKU = II.MichaelsSKU AND SIML.Language_Type_ID = SIIL.Language_Type_ID
			WHERE SIML.ID is null AND II.Batch_ID = @BatchID

		END TRY
		
		BEGIN CATCH
			set @msg = 'Updating Item Master Languages from Import Item Languages Table pt 1... Error Occurred in Update' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			Rollback Tran
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			RETURN	
		END CATCH
		
		-- **********************************************************************************************
		-- Update Multilingual Info
		BEGIN TRY
			set @msg = 'Updating Item Master Languages from Import Item Languages Table pt 2. Batch ID: ' + @vcBatchID
			IF @Debug=1  Print @msg
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg

			-- FIRST, Update the Langauge table, in case the languages already exist.
			-- This should never be the case, but adding the code here in case we need to support it later.
			UPDATE SPD_Item_Master_Languages_Supplier
			SET Package_Language_Indicator = SIIL.Package_Language_Indicator,
				Modified_User_ID = 0,
				Date_Last_Modified = getDate()
			FROM SPD_Item_Master_Languages_Supplier as SIML
			INNER JOIN SPD_Import_Items as II on SIML.Michaels_SKU = II.MichaelsSKU
			INNER JOIN SPD_Import_Item_Languages SIIL on II.ID = SIIL.Import_Item_ID and SIML.Language_Type_ID = SIIL.Language_Type_ID and SIML.Vendor_Number = II.VendorNumber
			WHERE II.Batch_ID = @BatchID

			-- INSERT new records into the Langauge table
			INSERT INTO SPD_Item_Master_Languages_Supplier (Michaels_SKU, Vendor_Number, Language_Type_ID, Package_Language_Indicator, Created_User_ID, Date_Created, Modified_User_ID, Date_Last_Modified)
			Select II.MichaelsSKU, II.VendorNumber, SIIL.Language_Type_ID, SIIL.Package_Language_Indicator, 0, GetDate(), 0, GetDate()
			FROM SPD_Import_Items as II
			INNER JOIN SPD_Import_Item_Languages as SIIL on II.ID = SIIL.Import_Item_ID
			LEFT JOIN SPD_Item_Master_Languages_supplier as SIML on SIML.Michaels_SKU = II.MichaelsSKU AND SIML.Language_Type_ID = SIIL.Language_Type_ID and SIML.Vendor_Number = II.VendorNumber
			WHERE SIML.ID is null AND II.Batch_ID = @BatchID

		END TRY
		
		BEGIN CATCH
			set @msg = 'Updating Item Master Languages from Import Item Languages Table pt 2... Error Occurred in Update' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
			Rollback Tran
			EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
			EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
			RETURN	
		END CATCH		
		
		--MWM:LCR
		---- Update SPD_Item_Translation_Required
		--Set @msg = 'Adding items to SPD_Item_Translation_Required from Import New Item. Batch: ' + @vcBatchID
		--IF @Debug=1  Print @msg
		--EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
		--BEGIN TRY
		--	Insert into SPD_Item_Translation_Required
		--	(Michaels_SKU)
		--	Select distinct sku.Michaels_SKU
		--	FROM [SPD_Item_Master_SKU] SKU
		--		Join SPD_Import_Items II	on SKU.[Michaels_SKU] = II.MichaelsSKU
		--		join SPD_Batch B			on II.Batch_ID = B.ID
		--		join SPD_Workflow_Stage WS	on B.Workflow_Stage_ID = WS.ID
		--	WHERE B.ID = @BatchID
		--		and WS.Stage_Type_id = 4		-- ONLY COMPLETED BATCHES PLEASE
		--		and II.Valid_Existing_SKU = 0	-- Make sure that Item is new and not loaded initially from the Item Master
		--		and ltrim(rtrim(SKU.SKU_Group)) In ('US AND CANADA','CANADA ONLY')
		--		and sku.POG_Start_Date is not null
		--		and not exists
		--		(
		--			Select 1 from SPD_Item_Translation_Required R where R.Michaels_SKU = sku.Michaels_SKU
		--		)

		--	set @rows = @@Rowcount
		--	set @msg = '    Records Inserted: ' + convert(varchar(20),@rows)
		--	IF @Debug=1  Print @msg
		--	EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
		--END TRY
		
		--BEGIN CATCH
		--	set @msg = 'Adding items to SPD_Item_Translation_Required SKU from Import... Error Occurred in Insert' + ' (Batch: ' + @vcBatchID + ') ' + ERROR_MESSAGE()
		--	Rollback Tran
		--	EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M=@msg
		--	EXEC [usp_SPD_ItemMaint_CompleteOrErrorBatch] @Batch_ID=0, @cmd = 'S', @Msg = @msg
		--	RETURN
		--END CATCH

	END	
	
	Commit Tran
	IF @Debug=1  Print 'Updating Item Master Proc Ends'
	EXEC usp_SPD_MQ_LogMessage @D=@LTS, @M='Updating Item Master From New Item Proc Ends'


END


GO

